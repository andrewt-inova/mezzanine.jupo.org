[
    {
        "pk": 25,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "Another year has gone by and another obligatory year in review post is due. 2011 was a\nyear full of change for me. I changed jobs twice, spent half the year coding in a new language, moved interstate, and switched my primary operating system.",
            "title": "2011: My Year in Review",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "osx ruby django django dash open source",
            "content": "<p>Another year has gone by and another obligatory <em>year in review</em> post is due. 2011 was a\nyear full of change for me. I changed jobs twice, spent half the year coding in a new language, moved interstate, and switched my primary operating system.</p>\n\n<h4 id=\"ruby\">Ruby</h4>\n\n<p>After working at <a href=\"http://citrus.com.au\">Citrus</a> for almost nine years, I was well overdue for a change of scenery, so when I was approached by <a href=\"http://impactdata.com.au\">Impact Data</a> to come and work for them using <a href=\"http://rubyonrails.org\">Ruby on Rails</a>, I welcomed the opportunity. My time there was short and sweet however, as after six months I decided to move back home to Sydney, but it was a really rewarding experience working with an incredibly smart team on a technology stack that was new to me. I had a great time learning Ruby, forming a strong appreciation for its elegance, and it was very interesting along the way making plenty of <a href=\"http://blog.jupo.org/2011/07/30/rails-quick-start-for-djangonauts/\">comparisons between Rails and Django</a>. Naturally I started using Ruby in my own projects, getting to know <a href=\"http://www.sinatrarb.com\">Sinatra</a> for a handful of apps that I built. I&rsquo;ll be writing a more detailed post about those soon, so stay tuned!</p>\n\n<h4 id=\"django-dash\">Django Dash</h4>\n\n<p>For the second year in a row I entered the <a href=\"http://djangodash.com\">Django Dash</a> hackathon. This time around I wanted to do something that really pushed Django outside of its typical usage patterns. I&rsquo;d recently read Cody Soyland&rsquo;s introductory blog post on <a href=\"http://codysoyland.com/2011/feb/6/evented-django-part-one-socketio-and-gevent/\">using WebSockets with Django</a>, and so I came up with an idea I called <a href=\"http://drawnby.jupo.org\">Drawn By</a>, a collaborative drawing app where people could create sketches together in real-time, save them to an image they can download, and rate others&rsquo; sketches in the gallery.</p>\n\n<p>I got to use a variety of technology I hadn&rsquo;t used before which was really fun. I used <a href=\"http://www.gevent.org\">gevent</a> as the evented web server for maintaining open socket connections with the browser, the NoSQL database <a href=\"http://redis.io\">Redis</a> for queuing events and storing temporary pixel data, and the browser&rsquo;s <a href=\"http://en.wikipedia.org/wiki/Canvas_element\">Canvas API</a> for front-end drawing interaction and rendering. I set a relatively high goal for ourselves this year with what we wanted to achieve, but we pulled it off nicely in the end.</p>\n\n<p>This year we came 3rd place out of around 50 entries, which was a great improvement on the previous year&rsquo;s result of 8th. The most important result however was the creation of <a href=\"https://github.com/stephenmcd/django-socketio\">django-socketio</a>, which was extracted from Drawn By and released as open source. It brings together all of the scaffolding for using WebSockets with Django, and implements an events and channels system for building your own applications around it. <a href=\"http://blog.jupo.org/2011/08/13/real-time-web-apps-with-django-and-websockets/\">I previously wrote about django-socketio</a> right after releasing it, and since then it has gained quite a lot of traction, with a handful of developers contributing back fixes and new features.</p>\n\n<h4 id=\"open-source\">Open Source</h4>\n\n<p>I actually spent less time this year contributing to open source than I did the previous year, but I steamed ahead nonetheless with a lot of new projects, as well as continued development and support for my major works, <a href=\"http://mezzanine.jupo.org\">Mezzanine</a> and <a href=\"http://cartridge.jupo.org\">Cartridge</a>. Both these projects have reached a very mature level over the course of 2011, thanks to tons of contributions from the <a href=\"http://groups.google.com/group/mezzanine-users/topics\">Mezzanine and Cartridge community</a>, which continues to grow steadily. Here&rsquo;s a list of the projects I released as open source over the year:</p>\n\n<ul>\n  <li><a href=\"http://drawnby.jupo.org\">Drawn By</a>: Collaborative real-time sketching. (Django / Python)</li>\n  <li><a href=\"https://github.com/stephenmcd/django-socketio\">django-socketio</a>: WebSockets for Django. (Django / Python)</li>\n  <li><a href=\"https://github.com/stephenmcd/virtualboxing\">Virtualboxing</a>: Comparison utilities for <a href=\"http://basho.com/products/riak-overview/\">Riak</a> and <a href=\"http://www.mongodb.org\">MongoDB</a>. (Ruby)</li>\n  <li><a href=\"http://chat.jupo.org\">Grillode</a>: Multi-purpose chat server. (<a href=\"http://nodejs.org\">Node</a> / <a href=\"http://coffeescript.org\">CoffeeScript</a>)</li>\n  <li><a href=\"http://linkedout.jupo.org\">Linked Out</a>: Create PDF resumes for <a href=\"http://linkedin.com\">LinkedIn</a>. (Sinatra / Ruby)</li>\n  <li><a href=\"http://klout-feed.jupo.org\">Klout Feed</a>: Daily <a href=\"http://klout.com\">Klout</a> scores via RSS. (Sinatra / Ruby)</li>\n  <li><a href=\"http://github.com/stephenmcd/babbler\">Babbler</a>: A <a href=\"http://twitter.com\">Twitter</a> bot. (Python)</li>\n  <li><a href=\"http://otr.jupo.org\">One True Repo</a>: Combined <a href=\"http://github.com\">GitHub</a> and <a href=\"http://bitbucket.org\">Bitbucket</a> API. (Sinatra / Ruby)</li>\n  <li><a href=\"http://blog.jupo.org/2011/12/31/announcing-hg-github/\">hg-github</a>: A <a href=\"http://mercurial.selenic.com/\">Mercurial</a> extension for GitHub. (Mercurial / Python)</li>\n  <li><a href=\"https://github.com/stephenmcd/sphinx-me\">sphinx-me</a>: A <a href=\"http://sphinx.pocoo.org/\">Sphinx</a> documentation generator. (Python)</li>\n</ul>\n\n<h4 id=\"osx\">OSX</h4>\n\n<p>As I mentioned, towards the end of the year I moved back to Sydney. An opportunity came up to work with <a href=\"http://fairfax.com.au\">Fairfax</a>, the largest media organisation in Australia. Fairfax is building a new publishing platform using Django, so my experience with content management and Django was a natural fit. Mostly though, it was a chance for me to move back home and be closer to my family, after being away from them in Melbourne for a decade.</p>\n\n<p>When I started at Fairfax, I was surprised to find the entire team running OSX. I wasn&rsquo;t surprised so much by the choice itself, as OSX is very popular in the Django and wider development community, but more so by my own lack of experience with it, having solely used Linux for the last half decade. I decided to give it a go and found it to be on par with Linux as a development environment.</p>\n\n<p>My biggest gripe was breaking down the mental muscle I&rsquo;d built up around the shortcut keys for wrangling text. At first I was fumbling on OSX, but after a few days of using OSX during the day and Linux at night, I found that I wasn&rsquo;t efficient with either of them - I needed consistency. I was also long overdue for a new machine. I originally had my eye on some of the MacBook Air clones like the <a href=\"http://us.acer.com/ac/en/US/content/s-series-home\">Acer UltraBook</a> and <a href=\"http://zenbook.asus.com/au/design/\">Asus ZenBook</a>, but I couldn&rsquo;t find any information about running Linux on these, and I wasn&rsquo;t prepared to go through the pain of working it out if anything went wrong. So I bit the bullet and picked up a 13 inch MacBook Air.</p>\n\n<p>All I need at the software level is visible application shortcuts, keyboard-driven application switching, a decent <a href=\"http://www.sublimetext.com\">editor</a>, <a href=\"http://www.iterm2.com\">terminal</a>, <a href=\"http://www.google.com/chrome/\">web browser</a> and <a href=\"http://mxcl.github.com/homebrew/\">package manager</a>, and I&rsquo;m good to go. In that regard, OSX and Linux are equivalent for my use, each with their own minor flaws. What I am really loving is the hardware. The keyboard seems laid out in a way that lets me type faster than ever, and the solid state drive means everything is instantaneous - that paired with the best battery life I&rsquo;ve ever experienced, and it&rsquo;s a dream machine.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2012-01-10 10:00:00",
            "slug": "2011-my-year-in-review",
            "expiry_date": null
        }
    },
    {
        "pk": 1,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "The two front-runners in source code management these days are undoubtedly Git and Mercurial. Distributed version control has clearly proven itself as the superior model over older centralised systems like SVN, particularly in the context of open source development, where the ability to fork repositories and push and pull branches between them facilitates a much more efficient and streamlined work-flow.",
            "title": "Announcing hg-github",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "version control mercurial git github bitbucket open source",
            "content": "<p>The two front-runners in source code management these days are undoubtedly <a href=\"http://git-scm.com\">Git</a> and <a href=\"http://mercurial.selenic.com/\">Mercurial</a>. Distributed version control has clearly proven itself as the superior model over older centralised systems like <a href=\"http://subversion.tigris.org/\">SVN</a>, particularly in the context of open source development, where the ability to fork repositories and push and pull branches between them facilitates a much more efficient and streamlined work-flow.</p>\n\n<p>My personal opinion about the difference between the two is similar to my take on <a href=\"http://blog.jupo.org/2011/07/30/rails-quick-start-for-djangonauts\">Django and Rails</a>. Relative to their alternatives, the two are far more similar than different, essentially providing the same concepts and features, but with quite different underlying philosophies in their implementations. For this reason I choose the less popular Mercurial over Git to manage all of my projects. Firstly I feel it has a more natural and intuitive UI (I&rsquo;m not referring to a graphical interface here, but the actual commands it implements and their arguments). Another key factor is that Mercurial is written in Python, which means hacking on it and building extensions for it is a breeze.</p>\n\n<p>What makes Git more popular than Mercurial? One major factor is their respective online hosting services, <a href=\"http://github.com\">GitHub</a> for Git and <a href=\"http://bitbucket.org\">Bitbucket</a> for Mercurial. If you&rsquo;re unfamiliar with these sites, they&rsquo;re like Facebook for programmers who share projects and collaborate together on code rather than post photos and videos. While both of these sites mostly implement the same core features, Github has always been several steps ahead of Bitbucket in terms of overall polish, and being first to market with new features. This difference has led GitHib to become far more popular than its Mercurial counterpart, and as a result, Git far more popular than Mercurial.</p>\n\n<p>With the majority of open source activity occurring on GitHub, what then is a Mercurial user to do? Limiting your projects to the audience of Bitbucket means missing out on a lot of potential collaboration. Fortunately some time ago, the team at GitHub developed a Mercurial extension called <a href=\"http://hg-git.github.com/\">hg-git</a>. It allows you to transfer code back and forth between a Mercurial repository on your machine to a Git repository on another machine, like GitHub for example, taking care of all the translation required between Git and Mercurial. After several years of using hg-git, it&rsquo;s one of the only pieces of software that continues to amaze me. Think of <a href=\"http://translate.google.com/\">Google&rsquo;s language translator</a>, which on a good day can provide some very quirky translations when converting text from one language to another. hg-git performs the same task, but has no room for error when translating a source code repository from Mercurial to Git, and back again. Admittedly hg-git has a much easier job to do than translating human languages with all their ambiguities. Still, I am constantly impressed by the task it performs.</p>\n\n<p>So hg-git allows me to develop my projects using Mercurial and have them shared on both Github and Bitbucket, allowing for maximum collaboration which is fantastic. It&rsquo;s not entirely seamless however. I still need to perform a couple of manual steps such as adding GitHub paths to my repo configuration, and creating Mercurial tags that map to the Git branches I want to work with. I need to do this each time I set up a new repository, be it for starting a new project, or forking a project of my own or someone else&rsquo;s. Recently I had to do this about half a dozen times in the space of an hour while working on a few different projects, and I thought to myself that I should be able to automate it. The result is a Mercurial extension I&rsquo;ve called <a href=\"https://github.com/stephenmcd/hg-github\">hg-github</a> which automatically takes care of these manual steps required. It also wraps hg-git, so you don&rsquo;t need to install both extensions, as hg-github pulls in and takes care of all the hard work that hg-git does.</p>\n\n<h4 id=\"overview\">Overview</h4>\n\n<p>Once hg-github is installed, assuming the default remote location of your repository is on Bitbucket, the GitHub path is automatically added and given the name <code>github</code>, so you can push to it with the following command:</p>\n\n<div class=\"highlight\"><pre><code class=\"sh\"><span class=\"nv\">$ </span>hg push github\n</code></pre>\n</div>\n\n<p>For other named Bitbucket locations, the name <code>github-NAME</code> is given, where <code>NAME</code> is the name of the path located on BitBucket. For example consider the following <code>.hg/hgrc</code> repo config:</p>\n\n<div class=\"highlight\"><pre><code class=\"ini\"><span class=\"k\">[paths]</span>\n<span class=\"na\">default</span> <span class=\"o\">=</span> <span class=\"s\">ssh://hg@bitbucket.org/stephenmcd/hg-github</span>\n<span class=\"na\">somefork</span> <span class=\"o\">=</span> <span class=\"s\">ssh://hg@bitbucket.org/stephenmcd/hg-github-temp</span>\n</code></pre>\n</div>\n\n<p>hg-git will add entries to the config file as follows. Note that the config file isn&rsquo;t actually written to:</p>\n\n<div class=\"highlight\"><pre><code class=\"ini\"><span class=\"k\">[paths]</span>\n<span class=\"na\">default</span> <span class=\"o\">=</span> <span class=\"s\">ssh://hg@bitbucket.org/stephenmcd/hg-github</span>\n<span class=\"na\">somefork</span> <span class=\"o\">=</span> <span class=\"s\">ssh://hg@bitbucket.org/stephenmcd/hg-github-temp</span>\n\n<span class=\"na\">github</span> <span class=\"o\">=</span> <span class=\"s\">git+ssh://git@github.com/stephenmcd/hg-github.git</span>\n<span class=\"na\">github-somefork</span> <span class=\"o\">=</span> <span class=\"s\">git+ssh://git@github.com/stephenmcd/hg-github-temp.git</span>\n</code></pre>\n</div>\n\n<p>hg-github assumes you have the same username on GitHub and Bitbucket. If you have a different GitHub username, you can specify it by adding the following section to your global <code>.hgrc</code> file. For example my GitHub username is <code>stephenmcd</code>:</p>\n\n<div class=\"highlight\"><pre><code class=\"ini\"><span class=\"k\">[github]</span>\n<span class=\"na\">username</span> <span class=\"o\">=</span> <span class=\"s\">stephenmcd</span>\n</code></pre>\n</div>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2011-12-31 10:00:00",
            "slug": "announcing-hg-github",
            "expiry_date": null
        }
    },
    {
        "pk": 26,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "The two front-runners in source code management these days are undoubtedly Git and Mercurial. Distributed version control has clearly proven itself as the superior model over older centralised systems like SVN, particularly in the context of open source development, where the ability to fork repositories and push and pull branches between them facilitates a much more efficient and streamlined work-flow.",
            "title": "Announcing hg-github",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "version control mercurial git github bitbucket open source",
            "content": "<p>The two front-runners in source code management these days are undoubtedly <a href=\"http://git-scm.com\">Git</a> and <a href=\"http://mercurial.selenic.com/\">Mercurial</a>. Distributed version control has clearly proven itself as the superior model over older centralised systems like <a href=\"http://subversion.tigris.org/\">SVN</a>, particularly in the context of open source development, where the ability to fork repositories and push and pull branches between them facilitates a much more efficient and streamlined work-flow.</p>\n\n<p>My personal opinion about the difference between the two is similar to <a href=\"http://blog.jupo.org/2011/07/30/rails-quick-start-for-djangonauts\">my take on Django and Rails</a>. Relative to their alternatives, the two are far more similar than different, essentially providing the same concepts and features, but with quite different underlying philosophies in their implementations. For this reason I choose the less popular Mercurial over Git to manage all of my projects. Firstly I feel it has a more natural and intuitive UI (I&rsquo;m not referring to a graphical interface here, but the actual commands it implements and their arguments). Another key factor is that Mercurial is written in Python, which means hacking on it and building extensions for it is a breeze.</p>\n\n<p>What makes Git more popular than Mercurial? One major factor is their respective online hosting services, <a href=\"http://github.com\">GitHub</a> for Git and <a href=\"http://bitbucket.org\">Bitbucket</a> for Mercurial. If you&rsquo;re unfamiliar with these sites, they&rsquo;re like Facebook for programmers who share projects and collaborate together on code rather than post photos and videos. While both of these sites mostly implement the same core features, Github has always been several steps ahead of Bitbucket in terms of overall polish, and being first to market with new features. This difference has led GitHub to become far more popular than its Mercurial counterpart, and as a result, Git far more popular than Mercurial.</p>\n\n<p>With the majority of open source activity occurring on GitHub, what then is a Mercurial user to do? Limiting your projects to the audience of Bitbucket means missing out on a lot of potential collaboration. Fortunately some time ago, the team at GitHub developed a Mercurial extension called <a href=\"http://hg-git.github.com/\">hg-git</a>. It allows you to transfer code back and forth between a Mercurial repository on your machine to a Git repository on another machine, like GitHub for example, taking care of all the translation required between Git and Mercurial. After several years of using hg-git, it&rsquo;s one of the only pieces of software that continues to amaze me. Think of <a href=\"http://translate.google.com/\">Google&rsquo;s language translator</a>, which on a good day can provide some very quirky translations when converting text from one language to another. hg-git performs the same task, but has no room for error when translating a source code repository from Mercurial to Git, and back again. Admittedly hg-git has a much easier job to do than translating human languages with all their ambiguities. Still, I am constantly impressed by the task it performs.</p>\n\n<p>So hg-git allows me to develop my projects using Mercurial and have them shared on both Github and Bitbucket, allowing for maximum collaboration which is fantastic. It&rsquo;s not entirely seamless however. I still need to perform a couple of manual steps such as adding GitHub paths to my repo configuration, and creating Mercurial tags that map to the Git branches I want to work with. I need to do this each time I set up a new repository, be it for starting a new project, or forking a project of my own or someone else&rsquo;s. Recently I had to do this about half a dozen times in the space of an hour while working on a few different projects, and I thought to myself that I should be able to automate it. The result is a Mercurial extension I&rsquo;ve called <a href=\"https://github.com/stephenmcd/hg-github\">hg-github</a> which automatically takes care of these manual steps required. It also wraps hg-git, so you don&rsquo;t need to install both extensions, as hg-github pulls in and takes care of all the hard work that hg-git does.</p>\n\n<h4 id=\"overview\">Overview</h4>\n\n<p>Once hg-github is installed, assuming the default remote location of your repository is on Bitbucket, the GitHub path is automatically added and given the name <code>github</code>, so you can push to it with the following command:</p>\n\n<div class=\"highlight\"><pre><code class=\"sh\"><span class=\"nv\">$ </span>hg push github\n</code></pre>\n</div>\n\n<p>For other named Bitbucket locations, the name <code>github-NAME</code> is given, where <code>NAME</code> is the name of the path located on BitBucket. For example consider the following <code>.hg/hgrc</code> repo config:</p>\n\n<div class=\"highlight\"><pre><code class=\"ini\"><span class=\"k\">[paths]</span>\n<span class=\"na\">default</span> <span class=\"o\">=</span> <span class=\"s\">ssh://hg@bitbucket.org/stephenmcd/hg-github</span>\n<span class=\"na\">somefork</span> <span class=\"o\">=</span> <span class=\"s\">ssh://hg@bitbucket.org/stephenmcd/hg-github-temp</span>\n</code></pre>\n</div>\n\n<p>hg-git will add entries to the config file as follows. Note that the config file isn&rsquo;t actually written to:</p>\n\n<div class=\"highlight\"><pre><code class=\"ini\"><span class=\"k\">[paths]</span>\n<span class=\"na\">default</span> <span class=\"o\">=</span> <span class=\"s\">ssh://hg@bitbucket.org/stephenmcd/hg-github</span>\n<span class=\"na\">somefork</span> <span class=\"o\">=</span> <span class=\"s\">ssh://hg@bitbucket.org/stephenmcd/hg-github-temp</span>\n\n<span class=\"na\">github</span> <span class=\"o\">=</span> <span class=\"s\">git+ssh://git@github.com/stephenmcd/hg-github.git</span>\n<span class=\"na\">github-somefork</span> <span class=\"o\">=</span> <span class=\"s\">git+ssh://git@github.com/stephenmcd/hg-github-temp.git</span>\n</code></pre>\n</div>\n\n<p>hg-github assumes you have the same username on GitHub and Bitbucket. If you have a different GitHub username, you can specify it by adding the following section to your global <code>.hgrc</code> file. For example my GitHub username is <code>stephenmcd</code>:</p>\n\n<div class=\"highlight\"><pre><code class=\"ini\"><span class=\"k\">[github]</span>\n<span class=\"na\">username</span> <span class=\"o\">=</span> <span class=\"s\">stephenmcd</span>\n</code></pre>\n</div>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2011-12-31 10:00:00",
            "slug": "announcing-hg-github-1",
            "expiry_date": null
        }
    },
    {
        "pk": 2,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "As a creator and maintainer of several popular reusable Django applications, one of the most commonly requested features I&rsquo;m asked for is the ability to customise the fields that a model implements. This topic comes up often on the Mezzanine mailing list, and during this particular thread we researched ways that fields could be dynamically injected into models at run-time.",
            "title": "Django Model Field Injection",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "django mezzanine python orm",
            "content": "<p>As a creator and maintainer of several popular reusable <a href=\"https://www.djangoproject.com/\">Django</a> applications, one of the most commonly requested features I&rsquo;m asked for is the ability to customise the fields that a model implements. This topic comes up often on the <a href=\"http://groups.google.com/group/mezzanine-users\">Mezzanine mailing list</a>, and during <a href=\"http://groups.google.com/group/mezzanine-users/browse_thread/thread/1f1669b0091a88d5\">this particular thread</a> we researched ways that fields could be dynamically injected into models at run-time.</p>\n\n<h4 id=\"other-approaches\">Other Approaches</h4>\n\n<p>It&rsquo;s worth taking a look at other approaches to the general problem, and what their drawbacks are, in order to provide context for what the final solution needs to achieve.</p>\n\n<p>One approach is to implement as many of the model classes as possible as <a href=\"https://docs.djangoproject.com/en/dev/topics/db/models/#abstract-base-classes\">abstract base classes</a>, so that users can subclass these with their own models. This approach makes sense for certain types of customisation, and it&rsquo;s what I&rsquo;ve done with <a href=\"https://github.com/stephenmcd/django-forms-builder/blob/master/forms_builder/forms/models.py\">django-forms-builder</a> for example. Some caveats exist with this approach however. Firstly, <a href=\"https://docs.djangoproject.com/en/dev/ref/models/fields/#module-django.db.models.fields.related\">relationship fields</a> can&rsquo;t be defined on the abstract models, so these need to be implemented in concrete models either within the same app, or by the user implementing their own subclasses. Secondly, any functionality that references your models, such as <a href=\"https://docs.djangoproject.com/en/dev/topics/http/views/\">views</a> or <a href=\"https://docs.djangoproject.com/en/dev/topics/http/middleware/\">middleware</a>, needs to either have configurable settings for choosing which models to use, or be reimplemented entirely by the user to make use of their custom fields.</p>\n\n<p>Another approach is to simply recommend that users subclass the models that the app provides using <a href=\"https://docs.djangoproject.com/en/dev/topics/db/models/#multi-table-inheritance\">multi-table inheritance</a>. Unfortunately this will introduce unnecessary overhead with the extra database queries required when accessing the instances of the subclasses. Best case is that this amounts to an extra query or two in a view dealing with a single instance. Worst case is that when this approach is used with a queryset in a template, an extra query is performed for each instance returned - the classic <a href=\"http://stackoverflow.com/questions/97197/what-is-the-n1-selects-problem\">N+1 query problem</a>.</p>\n\n<h4 id=\"dynamic-injection\">Dynamic Injection</h4>\n\n<p>The ideal approach would allow users to directly modify models with their own code, outside of the models&rsquo; apps, without the models themselves having to implement any special hooks for customisation. The end result being an optimal database design, with no extra API requirements for the relevant models. It just so happens that this is possible by using several features that Django exposes, and combining them together in a particular way.</p>\n\n<p>The approach boils down to three concepts:</p>\n\n<ul>\n  <li>Dynamically adding fields to model classes</li>\n  <li>Ensuring Django&rsquo;s model system respects the new fields</li>\n  <li>Getting the load ordering correct for the above to work</li>\n</ul>\n\n<p>Django&rsquo;s model fields provide an undocumented <code>contribute_to_class</code> method. This method serves as a fancy version of <code>setattr</code> and takes a value and attribute name to use as arguments. Internally it then takes care of all the house-keeping required for a field to be added to a model.</p>\n\n<p>The other feature of Django we&rsquo;ll use is the <a href=\"https://docs.djangoproject.com/en/dev/ref/signals/#class-prepared\"><code>class_prepared</code></a> signal. This signal is emitted each time a model class is declared and loaded for the first time by Django&rsquo;s model system.</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">CharField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models.signals</span> <span class=\"kn\">import</span> <span class=\"n\">class_prepared</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add_field</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    class_prepared signal handler that checks for the model named</span>\n<span class=\"sd\">    MyModel as the sender, and adds a CharField</span>\n<span class=\"sd\">    to it.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">&quot;MyModel&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"s\">&quot;New field&quot;</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n        <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">contribute_to_class</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"s\">&quot;new_field&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">class_prepared</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">add_field</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>The final consideration is connecting the <code>class_prepared</code> signal at the correct time. It needs to occur prior to the relevant model class being declared, otherwise the signal will never be triggered when we want it to. A general way of achieving this is to connect the signal from within an app that is listed before the app containing the relevant model, in the <code>INSTALLED_APPS</code> setting. Note that in the above code, we don&rsquo;t explicitly import the model to use it as the signal&rsquo;s sender, instead checking for the model&rsquo;s class name, as importing it would break these load ordering requirements.</p>\n\n<h4 id=\"caveats\">Caveats</h4>\n\n<p>Like the previously described approaches, dynamic injection also comes with a set of drawbacks. These drawbacks stem from the fact that the apps containing the models being customised don&rsquo;t contain a definition for the fields being injected. This means that migration tools likes <a href=\"http://south.aeracode.org/\">South</a> are unable to detect the new fields, and workarounds such as creating manual migrations are required.</p>\n\n<p>Another related problem is when new admin classes containing references to the custom fields are registered and the fields haven&rsquo;t yet been injected. A typical requirement for injected fields is to expose them via <a href=\"https://docs.djangoproject.com/en/dev/ref/contrib/admin/\">Django&rsquo;s admin interface</a>, which can be achieved by unregistering existing admin classes for the models that fields are being injected into, subclassing these admin classes with new references to the injected fields, and registering the new admin classes. Unfortunately if this unregister/register dance occurs in an admin module, the fields may not have yet been injected. A quick work-around for this is to perform the unregister/register calls inside your project&rsquo;s urlconf.</p>\n\n<h4 id=\"mezzanine-support\">Mezzanine Support</h4>\n\n<p>Drawbacks aside, the field injection technique described above has characteristics that make it incredibly useful. As such the approach has first-class support in <a href=\"http://mezzanine.jupo.org\">Mezzanine</a> by way of the <code>EXTRA_MODEL_FIELDS</code> setting. This setting allows you to define a sequence of all the custom fields you&rsquo;d like to inject. Each item in the sequence contains four items: the dotted Python path to the model (including the field name to use for injection), the dotted Python path to the field class to use for the injected field, a sequence of the field&rsquo;s position arguments, and finally a dict of its keyword arguments.</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"n\">EXTRA_MODEL_FIELDS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"c\"># Add a custom image field from the fictitious somelib.fields module</span>\n    <span class=\"c\"># to Mezzanine's BlogPost model:</span>\n    <span class=\"p\">(</span>\n        <span class=\"c\"># Dotted path to field.</span>\n        <span class=\"s\">&quot;mezzanine.blog.models.BlogPost.image&quot;</span><span class=\"p\">,</span>\n        <span class=\"c\"># Dotted path to field class.</span>\n        <span class=\"s\">&quot;somelib.fields.ImageField&quot;</span><span class=\"p\">,</span>\n        <span class=\"c\"># Positional args for field class.</span>\n        <span class=\"p\">(</span><span class=\"s\">&quot;Image&quot;</span><span class=\"p\">,),</span>\n        <span class=\"c\"># Keyword args for field class.</span>\n        <span class=\"p\">{</span><span class=\"s\">&quot;blank&quot;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"s\">&quot;upload_to&quot;</span><span class=\"p\">:</span> <span class=\"s\">&quot;blog&quot;</span><span class=\"p\">},</span>\n    <span class=\"p\">),</span>\n    <span class=\"c\"># Example of adding a field to *all* of Mezzanine's content types:</span>\n    <span class=\"p\">(</span>\n        <span class=\"s\">&quot;mezzanine.pages.models.Page.another_field&quot;</span><span class=\"p\">,</span>\n        <span class=\"s\">&quot;IntegerField&quot;</span><span class=\"p\">,</span> <span class=\"c\"># 'django.db.models.' is implied if path is omitted.</span>\n        <span class=\"p\">(</span><span class=\"s\">&quot;Another name&quot;</span><span class=\"p\">,),</span>\n        <span class=\"p\">{</span><span class=\"s\">&quot;blank&quot;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"s\">&quot;default&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Mezzanine then uses this setting to inject all of the fields defined, using <code>class_prepared</code> and <code>contribute_to_class</code> as described earlier. It handles getting load order correct by performing the injection within the <a href=\"https://github.com/stephenmcd/mezzanine/blob/master/mezzanine/boot/__init__.py\"><code>mezzanine.boot</code></a> app, which is forced to the front of all apps defined in <code>INSTALLED_APPS</code>. Django&rsquo;s admin is also patched in the boot app, to defer certain calls to <code>unregister</code> and <code>register</code>, to correct the ordering issues described earlier.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2011-11-10 10:00:00",
            "slug": "django-model-field-injection",
            "expiry_date": null
        }
    },
    {
        "pk": 27,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "As a creator and maintainer of several popular reusable Django applications, one of the most commonly requested features I&rsquo;m asked for is the ability to customise the fields that a model implements. This topic comes up often on the Mezzanine mailing list, and during this particular thread we researched ways that fields could be dynamically injected into models at run-time.",
            "title": "Django Model Field Injection",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "django mezzanine python orm",
            "content": "<p>As a creator and maintainer of several popular reusable <a href=\"https://www.djangoproject.com/\">Django</a> applications, one of the most commonly requested features I&rsquo;m asked for is the ability to customise the fields that a model implements. This topic comes up often on the <a href=\"http://groups.google.com/group/mezzanine-users\">Mezzanine mailing list</a>, and during <a href=\"http://groups.google.com/group/mezzanine-users/browse_thread/thread/1f1669b0091a88d5\">this particular thread</a> we researched ways that fields could be dynamically injected into models at run-time.</p>\n\n<h4 id=\"other-approaches\">Other Approaches</h4>\n\n<p>It&rsquo;s worth taking a look at other approaches to the general problem, and what their drawbacks are, in order to provide context for what the final solution needs to achieve.</p>\n\n<p>One approach is to implement as many of the model classes as possible as <a href=\"https://docs.djangoproject.com/en/dev/topics/db/models/#abstract-base-classes\">abstract base classes</a>, so that users can subclass these with their own models. This approach makes sense for certain types of customisation, and it&rsquo;s what I&rsquo;ve done with <a href=\"https://github.com/stephenmcd/django-forms-builder/blob/master/forms_builder/forms/models.py\">django-forms-builder</a> for example. Some caveats exist with this approach however. Firstly, <a href=\"https://docs.djangoproject.com/en/dev/ref/models/fields/#module-django.db.models.fields.related\">relationship fields</a> can&rsquo;t be defined on the abstract models, so these need to be implemented in concrete models either within the same app, or by the user implementing their own subclasses. Secondly, any functionality that references your models, such as <a href=\"https://docs.djangoproject.com/en/dev/topics/http/views/\">views</a> or <a href=\"https://docs.djangoproject.com/en/dev/topics/http/middleware/\">middleware</a>, needs to either have configurable settings for choosing which models to use, or be reimplemented entirely by the user to make use of their custom fields.</p>\n\n<p>Another approach is to simply recommend that users subclass the models that the app provides using <a href=\"https://docs.djangoproject.com/en/dev/topics/db/models/#multi-table-inheritance\">multi-table inheritance</a>. Unfortunately this will introduce unnecessary overhead with the extra database queries required when accessing the instances of the subclasses. Best case is that this amounts to an extra query or two in a view dealing with a single instance. Worst case is that when this approach is used with a queryset in a template, an extra query is performed for each instance returned - the classic <a href=\"http://stackoverflow.com/questions/97197/what-is-the-n1-selects-problem\">N+1 query problem</a>.</p>\n\n<h4 id=\"dynamic-injection\">Dynamic Injection</h4>\n\n<p>The ideal approach would allow users to directly modify models with their own code, outside of the models&rsquo; apps, without the models themselves having to implement any special hooks for customisation. The end result being an optimal database design, with no extra API requirements for the relevant models. It just so happens that this is possible by using several features that Django exposes, and combining them together in a particular way.</p>\n\n<p>The approach boils down to three concepts:</p>\n\n<ul>\n  <li>Dynamically adding fields to model classes</li>\n  <li>Ensuring Django&rsquo;s model system respects the new fields</li>\n  <li>Getting the load ordering correct for the above to work</li>\n</ul>\n\n<p>Django&rsquo;s model fields provide an undocumented <code>contribute_to_class</code> method. This method serves as a fancy version of <code>setattr</code> and takes a value and attribute name to use as arguments. Internally it then takes care of all the house-keeping required for a field to be added to a model.</p>\n\n<p>The other feature of Django we&rsquo;ll use is the <a href=\"https://docs.djangoproject.com/en/dev/ref/signals/#class-prepared\"><code>class_prepared</code></a> signal. This signal is emitted each time a model class is declared and loaded for the first time by Django&rsquo;s model system.</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">CharField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models.signals</span> <span class=\"kn\">import</span> <span class=\"n\">class_prepared</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add_field</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    class_prepared signal handler that checks for the model named</span>\n<span class=\"sd\">    MyModel as the sender, and adds a CharField</span>\n<span class=\"sd\">    to it.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">&quot;MyModel&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"s\">&quot;New field&quot;</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n        <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">contribute_to_class</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"s\">&quot;new_field&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">class_prepared</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">add_field</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>The final consideration is connecting the <code>class_prepared</code> signal at the correct time. It needs to occur prior to the relevant model class being declared, otherwise the signal will never be triggered when we want it to. A general way of achieving this is to connect the signal from within an app that is listed before the app containing the relevant model, in the <code>INSTALLED_APPS</code> setting. Note that in the above code, we don&rsquo;t explicitly import the model to use it as the signal&rsquo;s sender, instead checking for the model&rsquo;s class name, as importing it would break these load ordering requirements.</p>\n\n<h4 id=\"caveats\">Caveats</h4>\n\n<p>Like the previously described approaches, dynamic injection also comes with a set of drawbacks. These drawbacks stem from the fact that the apps containing the models being customised don&rsquo;t contain a definition for the fields being injected. This means that migration tools likes <a href=\"http://south.aeracode.org/\">South</a> are unable to detect the new fields, and workarounds such as creating manual migrations are required.</p>\n\n<p>Another related problem is when new admin classes containing references to the custom fields are registered and the fields haven&rsquo;t yet been injected. A typical requirement for injected fields is to expose them via <a href=\"https://docs.djangoproject.com/en/dev/ref/contrib/admin/\">Django&rsquo;s admin interface</a>, which can be achieved by unregistering existing admin classes for the models that fields are being injected into, subclassing these admin classes with new references to the injected fields, and registering the new admin classes. Unfortunately if this unregister/register dance occurs in an admin module, the fields may not have yet been injected. A quick work-around for this is to perform the unregister/register calls inside your project&rsquo;s urlconf.</p>\n\n<h4 id=\"mezzanine-support\">Mezzanine Support</h4>\n\n<p>Drawbacks aside, the field injection technique described above has characteristics that make it incredibly useful. As such the approach has first-class support in <a href=\"http://mezzanine.jupo.org\">Mezzanine</a> by way of the <code>EXTRA_MODEL_FIELDS</code> setting. This setting allows you to define a sequence of all the custom fields you&rsquo;d like to inject. Each item in the sequence contains four items: the dotted Python path to the model (including the field name to use for injection), the dotted Python path to the field class to use for the injected field, a sequence of the field&rsquo;s position arguments, and finally a dict of its keyword arguments.</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"n\">EXTRA_MODEL_FIELDS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"c\"># Add a custom image field from the fictitious somelib.fields module</span>\n    <span class=\"c\"># to Mezzanine's BlogPost model:</span>\n    <span class=\"p\">(</span>\n        <span class=\"c\"># Dotted path to field.</span>\n        <span class=\"s\">&quot;mezzanine.blog.models.BlogPost.image&quot;</span><span class=\"p\">,</span>\n        <span class=\"c\"># Dotted path to field class.</span>\n        <span class=\"s\">&quot;somelib.fields.ImageField&quot;</span><span class=\"p\">,</span>\n        <span class=\"c\"># Positional args for field class.</span>\n        <span class=\"p\">(</span><span class=\"s\">&quot;Image&quot;</span><span class=\"p\">,),</span>\n        <span class=\"c\"># Keyword args for field class.</span>\n        <span class=\"p\">{</span><span class=\"s\">&quot;blank&quot;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"s\">&quot;upload_to&quot;</span><span class=\"p\">:</span> <span class=\"s\">&quot;blog&quot;</span><span class=\"p\">},</span>\n    <span class=\"p\">),</span>\n    <span class=\"c\"># Example of adding a field to *all* of Mezzanine's content types:</span>\n    <span class=\"p\">(</span>\n        <span class=\"s\">&quot;mezzanine.pages.models.Page.another_field&quot;</span><span class=\"p\">,</span>\n        <span class=\"s\">&quot;IntegerField&quot;</span><span class=\"p\">,</span> <span class=\"c\"># 'django.db.models.' is implied if path is omitted.</span>\n        <span class=\"p\">(</span><span class=\"s\">&quot;Another name&quot;</span><span class=\"p\">,),</span>\n        <span class=\"p\">{</span><span class=\"s\">&quot;blank&quot;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"s\">&quot;default&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Mezzanine then uses this setting to inject all of the fields defined, using <code>class_prepared</code> and <code>contribute_to_class</code> as described earlier. It handles getting load order correct by performing the injection within the <a href=\"https://github.com/stephenmcd/mezzanine/blob/master/mezzanine/boot/__init__.py\"><code>mezzanine.boot</code></a> app, which is forced to the front of all apps defined in <code>INSTALLED_APPS</code>. Django&rsquo;s admin is also patched in the boot app, to defer certain calls to <code>unregister</code> and <code>register</code>, to correct the ordering issues described earlier.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2011-11-10 10:00:00",
            "slug": "django-model-field-injection-1",
            "expiry_date": null
        }
    },
    {
        "pk": 3,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "I recently gave a presentational talk to the development team at my work, on what it&rsquo;s like contributing to open source. For those who are yet to get involved, a common perception is that the open source community seems like one big socialist hippie commune, whose motivations are entirely altruistic with little reward for the individual. The approach I took was to dispel this myth and show that for many who participate, their motivations are mostly self serving, with many personal gains to be made. Despite some of the awkward truths I focused on, the talk was received really well.",
            "title": "Open Source for You",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "open source",
            "content": "<p>I recently gave a presentational talk to the development team at my work, on what it&rsquo;s like contributing to open source. For those who are yet to get involved, a common perception is that the open source community seems like one big socialist hippie commune, whose motivations are entirely altruistic with little reward for the individual. The approach I took was to dispel this myth and show that for many who participate, their motivations are mostly self serving, with many personal gains to be made. Despite some of the awkward truths I focused on, the talk was received really well.</p>\n\n<h4 id=\"your-day-job-sucks-make-programming-fun-again\">Your Day Job Sucks, Make Programming Fun Again</h4>\n\n<p>If you have a regular 9 to 5 job as a software engineer at a typical company, chances are likely that your job sucks in several ways. You work on the same types of projects every day. You work with the same technology every day, and most likely it&rsquo;s dated. There are more modern technology stacks out there that are much more elegant, yet for a variety of non-technical reasons, you&rsquo;re not allowed to use them at work. You also have deadlines. Deadlines lead to knocking out features as quickly as possible, which directly conflicts with the quality of your work, so you&rsquo;re often forced to take ugly shortcuts, leaving little to be proud of.</p>\n\n<p>If this is your only exposure to programming, it gets boring pretty quickly and isn&rsquo;t much fun at all. Contrary to this, programming can actually be incredibly fun! Imagine your company had hundreds of different projects to choose from, and let you choose whichever one you wanted to work on. Then on top of that, they told you that you could use whichever technologies you wanted to, and that you could take as long as you needed to build it <em>correctly</em> - so long as the end result was the most well designed and beautifully written software you&rsquo;ve ever produced. As a professional programmer, that sounds like a dream, but that&rsquo;s exactly how it is when you work on open source projects. Choose your problem domain. Choose your technology stack. Choose your pace. Choose your quality.</p>\n\n<h4 id=\"become-a-better-developer-through-collaboration\">Become a Better Developer through Collaboration</h4>\n\n<p>There are two ways to become a better developer: writing code and reading code. This clearly doesn&rsquo;t make sense in a silo on your own. There&rsquo;s little to learn from reading your own code beyond reminiscent value, and you could write code on your own for years and the only lessons learned would be those you teach yourself. Naturally the real learning is to be had from interacting with other developers, writing code that they can review and give you feedback on, and reading code written by other developers with more experience and different approaches than you have.</p>\n\n<p>Drawing back to your day job, how many developers do you collaborate directly with. A few? A dozen? A small pool that will give you much to learn from, but is still relatively limited in scope. The open source community is made up of thousands of developers, who over many years have produced millions of lines of code. Code of quality much greater than you&rsquo;d ever be exposed to without stepping outside of your workplace.</p>\n\n<h4 id=\"acquire-cash-money\">Acquire Cash Money</h4>\n\n<p>One of the biggest misconceptions abut open source development is that it&rsquo;s a financially fruitless labour. While true to a certain extent, there are actually several ways in which it can pay a monetary return, both indirectly and directly.</p>\n\n<p>You may work a steady, full-time job, or you&rsquo;re looking for one, and think of yourself as an employee with a fixed salary, in total contrast to those wild freelancers and entrepreneurs who don&rsquo;t know where their next meal will come from. Wrong. You are a business, just like your employer is. You have one customer, your employer. Sometimes you might feel as though you&rsquo;re stuck in your day job, when in actual fact you&rsquo;re simply stuck with one client.</p>\n\n<p>So how can you gain more clients? How can you gain a better client? By promoting your business of course. Open source provides a great way for you to showcase you and your ability as a developer. Your open source contributions can distinguish your CV from other developers, namely, your business&rsquo;s competition. Graphic designers have always had the luxury of being able to display their portfolios, and developers can too. I&rsquo;ve been on both sides of the hiring table, and when choosing between potential hires, someone with significant open source contributions has already demonstrated a clear passion for what they do, and therefore has a major advantage over those who are tasked with convincing people of the same, without having anything to show for it.</p>\n\n<p>Getting your open source projects to the level of quality and usefulness where people are actually building production systems with them is huge achievement in itself. Stemming from that are direct opportunities for paid work. Your corporate users may need your software customised for their use cases. You may even be lucky enough that they&rsquo;d like features developed into the project that are great ideas - things you might not have thought of, and will take the project to the next level. Who better to develop these than the creator of the software themselves? I&rsquo;ve had several instances where this has occurred, and companies have sponsored development on features that, had I had the insight to think of, would have developed freely on my own anyway.</p>\n\n<h4 id=\"broaden-non-technical-experience\">Broaden Non-Technical Experience</h4>\n\n<p>Hands on coding is only one small aspect of software development. There are many other disciplines that make up the process of shipping a successful product. Project management, community building, formal writing, product development and marketing. While freelancers and one-man commercial studios may get the benefit of dipping their toes into these different areas, as a developer at a typical company your role often doesn&rsquo;t take you outside of the day to day coding.</p>\n\n<p>Running an open source project properly will allow you to skill up in broad range of non-technical areas. I spend a lot of my time working on my most popular project, however these days only a small portion of this time is actually spent coding. Most of the time is spent in discussion with other developers on their feature ideas, coordinating the inclusion or exclusion of these, and providing support for new users. It&rsquo;s hard work, but it&rsquo;s a great and relevant experience.</p>\n\n<p>Corollary to this, many non-technical people who&rsquo;d like to contribute to open source in some way, believe that they don&rsquo;t have anything worthwhile to offer. With all that&rsquo;s involved, some of the most beneficial contributions are those of a non-technical nature. If this describes you, then please don&rsquo;t hesitate to dive in. Your help means more than you can imagine.</p>\n\n<h4 id=\"feels-good-man\">Feels Good Man</h4>\n\n<p>The most obvious yet least tangible benefit in contributing to open source, is the idea I first alluded to around altruism and giving to others. As I mentioned, coordinating a non-trivial open source project can be hard work. It has its highs and lows, and sometimes it feels like there&rsquo;s more of the latter. However every now and then, I&rsquo;ll get a personal email of praise and gratitude. Not in any public forum where the soapbox can be a conduit for ulterior motives, just a private and genuine expression of thanks. I would never have thought of this as being particularly rewarding, until I actually experienced it. It really fills you with a true sense of pride and satisfaction, which makes it all worth while in the end.</p>\n\n<h4 id=\"get-started-now\">Get Started Now</h4>\n\n<p>The Chinese philosopher <a href=\"http://en.wikipedia.org/wiki/Laozi\">Lao Tzu</a> said:</p>\n\n<blockquote>\n  <p>A journey of a thousand miles begins with a single step</p>\n</blockquote>\n\n<p>Getting started might seem like a daunting task. Start small. Ignore the inner voice that whispers in your ear, arguing that your open source idea wouldn&rsquo;t be of any use to anyone. That might even be true, but it doesn&rsquo;t matter. Do it anyway. A lot of my projects are only a few dozen lines of code. People have found them useful in ways I couldn&rsquo;t have imagined.</p>\n\n<p>Ideas can be hard to come by. Most of mine were itches I wanted to scratch. Product gaps in the technology stacks I&rsquo;m interested in, or mundane processes I went through regularly, upon realising they could be automated and productised.</p>\n\n<p>Perhaps you&rsquo;re an end user of open source software, and it isn&rsquo;t perfect. A feature works differently than how you think it should, or something is undocumented and you struggled to find it. These days it seems that the modus operandi is to throw up your arms, and complain as loudly as possible about how the software you&rsquo;re using for free, isn&rsquo;t exactly the way you want it to be. Don&rsquo;t. You have the choice to do something about it. Dive into the source code. Contribute something back. Improve yourself, and be a part of something.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2011-09-12 10:00:00",
            "slug": "open-source-for-you",
            "expiry_date": null
        }
    },
    {
        "pk": 28,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "Update, Feb 14: @rkJun has translated this post into Korean.",
            "title": "Open Source for You",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "open source",
            "content": "<p><strong>Update, Feb 14:</strong> <a href=\"https://twitter.com/rkJun\">@rkJun</a> has <a href=\"http://rkjun.wordpress.com/2012/02/13/open-source-for-you-korean_translate/\">translated this post into Korean</a>.</p>\n\n<p>I recently gave a presentational talk to the development team at my work, on what it&rsquo;s like contributing to open source. A common perception by people not involved is that the open source community seems like one big socialist hippie commune, whose motivations are entirely altruistic with little reward for the individual. The approach I took was to dispel this myth and show that for many who participate, their motivations are mostly self serving, with many personal gains to be made. Despite some of the awkward truths I focused on, the talk was received really well.</p>\n\n<h4 id=\"your-day-job-sucks-make-programming-fun-again\">Your Day Job Sucks, Make Programming Fun Again</h4>\n\n<p>If you have a regular 9 to 5 job as a software engineer at a typical company, chances are likely that your job sucks in several ways. You work on the same types of projects every day. You work with the same technology every day, and most likely it&rsquo;s dated. There are more modern technology stacks out there that are much more elegant, yet for a variety of non-technical reasons, you&rsquo;re not allowed to use them at work. You also have deadlines. Deadlines lead to knocking out features as quickly as possible, which directly conflicts with the quality of your work, so you&rsquo;re often forced to take ugly shortcuts, leaving little to be proud of.</p>\n\n<p>If this is your only exposure to programming, it gets boring pretty quickly and isn&rsquo;t much fun at all. Contrary to this, programming can actually be incredibly fun! Imagine your company had hundreds of different projects to choose from, and let you choose whichever one you wanted to work on. Then on top of that, they told you that you could use whichever technologies you wanted to, and that you could take as long as you needed to build it <em>correctly</em> - so long as the end result was the most well designed and beautifully written software you&rsquo;ve ever produced. As a professional programmer, that sounds like a dream, but that&rsquo;s exactly how it is when you work on open source projects. Choose your problem domain. Choose your technology stack. Choose your pace. Choose your quality.</p>\n\n<h4 id=\"become-a-better-developer-through-collaboration\">Become a Better Developer through Collaboration</h4>\n\n<p>There are two ways to become a better developer: writing code and reading code. This clearly doesn&rsquo;t make sense in a silo on your own. There&rsquo;s little to learn from reading your own code beyond reminiscent value, and you could write code on your own for years and the only lessons learned would be those you teach yourself. Naturally the real learning is to be had from interacting with other developers, writing code that they can review and give you feedback on, and reading code written by other developers with more experience and different approaches than you have.</p>\n\n<p>Drawing back to your day job, how many developers do you collaborate directly with. A few? A dozen? A small pool that will give you much to learn from, but is still relatively limited in scope. The open source community is made up of thousands of developers, who over many years have produced millions of lines of code. Code of quality much greater than you&rsquo;d ever be exposed to without stepping outside of your workplace.</p>\n\n<h4 id=\"acquire-cash-money\">Acquire Cash Money</h4>\n\n<p>One of the biggest misconceptions abut open source development is that it&rsquo;s a financially fruitless labour. While true to a certain extent, there are actually several ways in which it can pay a monetary return, both indirectly and directly.</p>\n\n<p>You may work a steady, full-time job, or you&rsquo;re looking for one, and think of yourself as an employee with a fixed salary, in total contrast to those wild freelancers and entrepreneurs who don&rsquo;t know where their next meal will come from. Wrong. You are a business, just like your employer is. You have one customer, your employer. Sometimes you might feel as though you&rsquo;re stuck in your day job, when in actual fact you&rsquo;re simply stuck with one client.</p>\n\n<p>So how can you gain more clients? How can you gain a better client? By promoting your business of course. Open source provides a great way for you to showcase you and your ability as a developer. Your open source contributions can distinguish your CV from other developers, namely, your business&rsquo;s competition. Graphic designers have always had the luxury of being able to display their portfolios, and developers can too. I&rsquo;ve been on both sides of the hiring table, and when choosing between potential hires, someone with significant open source contributions has already demonstrated a clear passion for what they do, and therefore has a major advantage over those who are tasked with convincing people of the same, without having anything to show for it.</p>\n\n<p>Getting your open source projects to the level of quality and usefulness where people are actually building production systems with them is huge achievement in itself. Stemming from that are direct opportunities for paid work. Your corporate users may need your software customised for their use cases. You may even be lucky enough that they&rsquo;d like features developed into the project that are great ideas - things you might not have thought of, and will take the project to the next level. Who better to develop these than the creator of the software themselves? I&rsquo;ve had several instances where this has occurred, and companies have sponsored development on features that, had I had the insight to think of, would have developed freely on my own anyway.</p>\n\n<h4 id=\"broaden-non-technical-experience\">Broaden Non-Technical Experience</h4>\n\n<p>Hands on coding is only one small aspect of software development. There are many other disciplines that make up the process of shipping a successful product. Project management, community building, formal writing, product development and marketing. While freelancers and one-man commercial studios may get the benefit of dipping their toes into these different areas, as a developer at a typical company your role often doesn&rsquo;t take you outside of the day to day coding.</p>\n\n<p>Running an open source project properly will allow you to skill up in broad range of non-technical areas. I spend a lot of my time working on my most popular project, however these days only a small portion of this time is actually spent coding. Most of the time is spent in discussion with other developers on their feature ideas, coordinating the inclusion or exclusion of these, and providing support for new users. It&rsquo;s hard work, but it&rsquo;s a great and relevant experience.</p>\n\n<p>Corollary to this, many non-technical people who&rsquo;d like to contribute to open source in some way, believe that they don&rsquo;t have anything worthwhile to offer. With all that&rsquo;s involved, some of the most beneficial contributions are those of a non-technical nature. If this describes you, then please don&rsquo;t hesitate to dive in. Your help means more than you can imagine.</p>\n\n<h4 id=\"feels-good-man\">Feels Good Man</h4>\n\n<p>The most obvious yet least tangible benefit in contributing to open source, is the idea I first alluded to around altruism and giving to others. As I mentioned, coordinating a non-trivial open source project can be hard work. It has its highs and lows, and sometimes it feels like there&rsquo;s more of the latter. However every now and then, I&rsquo;ll get a personal email of praise and gratitude. Not in any public forum where the soapbox can be a conduit for ulterior motives, just a private and genuine expression of thanks. I would never have thought of this as being particularly rewarding, until I actually experienced it. It really fills you with a true sense of pride and satisfaction, which makes it all worth while in the end.</p>\n\n<h4 id=\"get-started-now\">Get Started Now</h4>\n\n<p>The Chinese philosopher <a href=\"http://en.wikipedia.org/wiki/Laozi\">Lao Tzu</a> said:</p>\n\n<blockquote>\n  <p>A journey of a thousand miles begins with a single step</p>\n</blockquote>\n\n<p>Getting started might seem like a daunting task. Start small. Ignore the inner voice that whispers in your ear, arguing that your open source idea wouldn&rsquo;t be of any use to anyone. That might even be true, but it doesn&rsquo;t matter. Do it anyway. A lot of my projects are only a few dozen lines of code. People have found them useful in ways I couldn&rsquo;t have imagined.</p>\n\n<p>Ideas can be hard to come by. Most of mine were itches I wanted to scratch. Product gaps in the technology stacks I&rsquo;m interested in, or mundane processes I went through regularly, upon realising they could be automated and productised.</p>\n\n<p>Perhaps you&rsquo;re an end user of open source software, and it isn&rsquo;t perfect. A feature works differently than how you think it should, or something is undocumented and you struggled to find it. These days it seems that the modus operandi is to throw up your arms, and complain as loudly as possible about how the software you&rsquo;re using for free, isn&rsquo;t exactly the way you want it to be. Don&rsquo;t. You have the choice to do something about it. Dive into the source code. Contribute something back. Improve yourself, and be a part of something.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2011-09-12 10:00:00",
            "slug": "open-source-for-you-1",
            "expiry_date": null
        }
    },
    {
        "pk": 4,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "I recently took part in Django Dash, the annual\nhackathon where teams of up to three compete to build the best\nDjango project they can within 48 hours. This year\nI worked with Travis White and Josh de\nBlank to build DrawnBy -\na collaborative drawing application that allows people to sketch together in\nreal-time.",
            "title": "Real-time Web Apps with Django and WebSockets",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "django websockets socket.io",
            "content": "<p>I recently took part in <a href=\"http://djangodash.com\">Django Dash</a>, the annual\nhackathon where teams of up to three compete to build the best\n<a href=\"http://djangoproject.com\">Django</a> project they can within 48 hours. This year\nI worked with <a href=\"http://www.traviswhite.com.au/\">Travis White</a> and <a href=\"http://joshdeblank.com/\">Josh de\nBlank</a> to build <a href=\"http://drawnby.jupo.org\">DrawnBy</a> -\na collaborative drawing application that allows people to sketch together in\nreal-time.</p>\n\n<p>DrawnBy makes extensive use of\n<a href=\"http://en.wikipedia.org/wiki/WebSockets\">WebSockets</a> which are mostly unheard\nof in web stacks like Django and Rails, or even antiquated stacks like PHP and\nASP.NET, which are all designed around accepting a request and returning a\nresponse to the browser as quickly as possible. This is in contrast to\nWebSockets which allow full duplex communication between the browser and\nserver, and therefore require long running requests per user.</p>\n\n<p>A variety of patterns for dealing with WebSockets in Django emerged while\ndeveloping DrawnBy, and since the Dash I&rsquo;ve been working on abstracting these\ninto a reusable Django application called <a href=\"https://github.com/stephenmcd/django-socketio\">django-socketio</a> which I&rsquo;ve released\ntoday. It&rsquo;s available on <a href=\"https://github.com/stephenmcd/django-\nsocketio\">Github</a>, <a href=\"https://bitbucket.org/stephenmcd/django-socketio\">Bitbucket</a> and\n<a href=\"http://pypi.python.org/pypi/django-socketio/\">PyPI</a>.</p>\n\n<p>Here&rsquo;s an overview of the features.</p>\n\n<h4 id=\"features\">Features</h4>\n\n<ul>\n  <li>Installation of required packages from PyPI</li>\n  <li>A management command for running gevent&rsquo;s pywsgi server with auto-reloading capabilities</li>\n  <li>A channel subscription and broadcast system that extends Socket.IO allowing WebSockets and events to be partitioned into separate concerns</li>\n  <li>A signals-like event system that abstracts away the various stages of a Socket.IO request</li>\n  <li>The required views, urlpatterns, templatetags and tests for all the above</li>\n</ul>\n\n<h4 id=\"channels\">Channels</h4>\n\n<p>The WebSocket implemented by gevent-websocket provides two methods for sending\ndata to other clients, <code>socket.send</code> which sends data to the given socket\ninstance, and <code>socket.broadcast</code> which sends data to all socket instances\nother than itself.</p>\n\n<p>A common requirement for WebSocket based applications is to divide\ncommunications up into separate channels. For example a chat site may have\nmultiple chat rooms and rather than using <code>broadcast</code> which would send a chat\nmessage to all chat rooms, each room would need a reference to each of the\nconnected sockets so that <code>send</code> can be called on each socket when a new\nmessage arrives for that room.</p>\n\n<p>django-socketio extends Socket.IO both on the client and server to provide\nchannels that can be subscribed and broadcast to.</p>\n\n<p>To subscribe to a channel client-side in JavaScript use the <code>socket.subscribe</code>\nmethod:</p>\n\n<div class=\"highlight\"><pre><code class=\"javascript\"><span class=\"kd\">var</span> <span class=\"nx\">socket</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">io</span><span class=\"p\">.</span><span class=\"nx\">Socket</span><span class=\"p\">();</span>\n<span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">();</span>\n<span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"nx\">connect</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">(</span><span class=\"nx\">my</span> <span class=\"nx\">channel</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre>\n</div>\n\n<p>Once the socket is subscribed to a channel, you can then broadcast to the\nchannel server-side in Python using the <code>socket.broadcast_channel</code> method:</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">broadcast_channel</span><span class=\"p\">(</span><span class=\"s\">&quot;my message&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h4 id=\"events\">Events</h4>\n\n<p>The <code>django_socketio.events</code> module provides a handful of events that can be\nsubscribed to, very much like connecting receiver functions to Django signals.\nEach of these events are raised throughout the relevant stages of a Socket.IO\nrequest.</p>\n\n<p>Events are subscribed to by applying each event as a decorator to your event\nhandler functions:</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"kn\">from</span> <span class=\"nn\">django_socketio.events</span> <span class=\"kn\">import</span> <span class=\"n\">on_message</span>\n\n<span class=\"nd\">@on_message</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_message_handler</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">socket</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</code></pre>\n</div>\n\n<p>Each event handler takes at least three arguments: the current Django\n<code>request</code>, the Socket.IO <code>socket</code> the event occurred for, and a <code>context</code>,\nwhich is simply a dictionary that can be used to persist variables across all\nevents throughout the life-cycle of a single WebSocket connection.</p>\n\n<ul>\n  <li><code>on_connect</code> - occurs once when the WebSocket connection is first established.</li>\n  <li><code>on_message</code> - occurs every time data is sent to the WebSocket. Takes an extra <code>message</code> argument which contains the data sent.</li>\n  <li><code>on_subscribe</code> - occurs when a channel is subscribed to. Takes an extra <code>channel</code> argument which contains the channel subscribed to.</li>\n  <li><code>on_unsubscribe</code> - occurs when a channel is unsubscribed from. Takes an extra <code>channel</code> argument which contains the channel unsubscribed from.</li>\n  <li><code>on_error</code> - occurs when an error is raised. Takes an extra <code>exception</code> argument which contains the exception for the error.</li>\n  <li><code>on_disconnect</code> - occurs once when the WebSocket disconnects.</li>\n  <li><code>on_finish</code> - occurs once when the Socket.IO request is finished.</li>\n</ul>\n\n<p>Like Django signals, event handlers can be defined anywhere so long as they\nend up being imported. Consider adding them to their own module that gets\nimported by your urlconf, or even adding them to your views module since\nthey&rsquo;re conceptually similar to views.</p>\n\n<h4 id=\"binding-events-to-channels\">Binding Events to Channels</h4>\n\n<p>All events other than the <code>on_connect</code> event can also be bound to particular\nchannels by passing a <code>channel</code> argument to the event decorator. The channel\nargument can contain a regular expression pattern used to match again multiple\nchannels of similar function.</p>\n\n<p>For example, suppose you implemented a chat site with multiple rooms.\nWebSockets would be the basis for users communicating within each chat room,\nhowever you may want to use them elsewhere throughout the site for different\npurposes, perhaps for a real-time admin dashboard. In this case there would be\ntwo distinct WebSocket uses, with the chat rooms each requiring their own\nindividual channels.</p>\n\n<p>Suppose each chat room user subscribes to a channel client-side using the\nroom&rsquo;s ID:</p>\n\n<div class=\"highlight\"><pre><code class=\"javascript\"><span class=\"kd\">var</span> <span class=\"nx\">socket</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">io</span><span class=\"p\">.</span><span class=\"nx\">Socket</span><span class=\"p\">();</span>\n<span class=\"kd\">var</span> <span class=\"nx\">roomID</span> <span class=\"o\">=</span> <span class=\"mi\">42</span><span class=\"p\">;</span>\n<span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">();</span>\n<span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"nx\">connect</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">(</span><span class=\"nx\">room</span><span class=\"o\">-</span> <span class=\"o\">+</span> <span class=\"nx\">roomID</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre>\n</div>\n\n<p>Then server-side the different message handlers are bound to each type of\nchannel:</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"nd\">@on_message</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"s\">&quot;dashboard&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_dashboard_handler</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">socket</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"nd\">@on_message</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"s\">&quot;^room-&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_chat_handler</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">socket</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</code></pre>\n</div>\n\n<h4 id=\"chat-demo\">Chat Demo</h4>\n\n<p>The &ldquo;hello world&rdquo; of WebSocket applications is naturally the chat room. As\nsuch django-socketio comes with a demo chat application that provides examples\nof the different events and channel features available.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2011-08-13 10:00:00",
            "slug": "real-time-web-apps-with-django-and-websockets",
            "expiry_date": null
        }
    },
    {
        "pk": 29,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "I recently took part in Django Dash, the annual\nhackathon where teams of up to three compete to build the best\nDjango project they can within 48 hours. This year\nI worked with Travis White and Josh de\nBlank to build DrawnBy -\na collaborative drawing application that allows people to sketch together in\nreal-time.",
            "title": "Real-time Web Apps with Django and WebSockets",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "django websockets socket.io",
            "content": "<p>I recently took part in <a href=\"http://djangodash.com\">Django Dash</a>, the annual\nhackathon where teams of up to three compete to build the best\n<a href=\"http://djangoproject.com\">Django</a> project they can within 48 hours. This year\nI worked with <a href=\"http://www.traviswhite.com.au/\">Travis White</a> and <a href=\"http://joshdeblank.com/\">Josh de\nBlank</a> to build <a href=\"http://drawnby.jupo.org\">DrawnBy</a> -\na collaborative drawing application that allows people to sketch together in\nreal-time.</p>\n\n<p>DrawnBy makes extensive use of\n<a href=\"http://en.wikipedia.org/wiki/WebSockets\">WebSockets</a> which are mostly unheard\nof in web stacks like Django and Rails, or even antiquated stacks like PHP and\nASP.NET, which are all designed around accepting a request and returning a\nresponse to the browser as quickly as possible. This is in contrast to\nWebSockets which allow full duplex communication between the browser and\nserver, and therefore require long running requests per user.</p>\n\n<p>A variety of patterns for dealing with WebSockets in Django emerged while\ndeveloping DrawnBy, and since the Dash I&rsquo;ve been working on abstracting these\ninto a reusable Django application called <a href=\"https://github.com/stephenmcd/django-socketio\">django-socketio</a> which I&rsquo;ve released\ntoday. It&rsquo;s available on <a href=\"https://github.com/stephenmcd/django-\nsocketio\">Github</a>, <a href=\"https://bitbucket.org/stephenmcd/django-socketio\">Bitbucket</a> and\n<a href=\"http://pypi.python.org/pypi/django-socketio/\">PyPI</a>.</p>\n\n<p>Here&rsquo;s an overview of the features.</p>\n\n<h4 id=\"features\">Features</h4>\n\n<ul>\n  <li>Installation of required packages from PyPI</li>\n  <li>A management command for running gevent&rsquo;s pywsgi server with auto-reloading capabilities</li>\n  <li>A channel subscription and broadcast system that extends Socket.IO allowing WebSockets and events to be partitioned into separate concerns</li>\n  <li>A signals-like event system that abstracts away the various stages of a Socket.IO request</li>\n  <li>The required views, urlpatterns, templatetags and tests for all the above</li>\n</ul>\n\n<h4 id=\"channels\">Channels</h4>\n\n<p>The WebSocket implemented by gevent-websocket provides two methods for sending\ndata to other clients, <code>socket.send</code> which sends data to the given socket\ninstance, and <code>socket.broadcast</code> which sends data to all socket instances\nother than itself.</p>\n\n<p>A common requirement for WebSocket based applications is to divide\ncommunications up into separate channels. For example a chat site may have\nmultiple chat rooms and rather than using <code>broadcast</code> which would send a chat\nmessage to all chat rooms, each room would need a reference to each of the\nconnected sockets so that <code>send</code> can be called on each socket when a new\nmessage arrives for that room.</p>\n\n<p>django-socketio extends Socket.IO both on the client and server to provide\nchannels that can be subscribed and broadcast to.</p>\n\n<p>To subscribe to a channel client-side in JavaScript use the <code>socket.subscribe</code>\nmethod:</p>\n\n<div class=\"highlight\"><pre><code class=\"javascript\"><span class=\"kd\">var</span> <span class=\"nx\">socket</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">io</span><span class=\"p\">.</span><span class=\"nx\">Socket</span><span class=\"p\">();</span>\n<span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">();</span>\n<span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"nx\">connect</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">(</span><span class=\"nx\">my</span> <span class=\"nx\">channel</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre>\n</div>\n\n<p>Once the socket is subscribed to a channel, you can then broadcast to the\nchannel server-side in Python using the <code>socket.broadcast_channel</code> method:</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">broadcast_channel</span><span class=\"p\">(</span><span class=\"s\">&quot;my message&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h4 id=\"events\">Events</h4>\n\n<p>The <code>django_socketio.events</code> module provides a handful of events that can be\nsubscribed to, very much like connecting receiver functions to Django signals.\nEach of these events are raised throughout the relevant stages of a Socket.IO\nrequest.</p>\n\n<p>Events are subscribed to by applying each event as a decorator to your event\nhandler functions:</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"kn\">from</span> <span class=\"nn\">django_socketio.events</span> <span class=\"kn\">import</span> <span class=\"n\">on_message</span>\n\n<span class=\"nd\">@on_message</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_message_handler</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">socket</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</code></pre>\n</div>\n\n<p>Each event handler takes at least three arguments: the current Django\n<code>request</code>, the Socket.IO <code>socket</code> the event occurred for, and a <code>context</code>,\nwhich is simply a dictionary that can be used to persist variables across all\nevents throughout the life-cycle of a single WebSocket connection.</p>\n\n<ul>\n  <li><code>on_connect</code> - occurs once when the WebSocket connection is first established.</li>\n  <li><code>on_message</code> - occurs every time data is sent to the WebSocket. Takes an extra <code>message</code> argument which contains the data sent.</li>\n  <li><code>on_subscribe</code> - occurs when a channel is subscribed to. Takes an extra <code>channel</code> argument which contains the channel subscribed to.</li>\n  <li><code>on_unsubscribe</code> - occurs when a channel is unsubscribed from. Takes an extra <code>channel</code> argument which contains the channel unsubscribed from.</li>\n  <li><code>on_error</code> - occurs when an error is raised. Takes an extra <code>exception</code> argument which contains the exception for the error.</li>\n  <li><code>on_disconnect</code> - occurs once when the WebSocket disconnects.</li>\n  <li><code>on_finish</code> - occurs once when the Socket.IO request is finished.</li>\n</ul>\n\n<p>Like Django signals, event handlers can be defined anywhere so long as they\nend up being imported. Consider adding them to their own module that gets\nimported by your urlconf, or even adding them to your views module since\nthey&rsquo;re conceptually similar to views.</p>\n\n<h4 id=\"binding-events-to-channels\">Binding Events to Channels</h4>\n\n<p>All events other than the <code>on_connect</code> event can also be bound to particular\nchannels by passing a <code>channel</code> argument to the event decorator. The channel\nargument can contain a regular expression pattern used to match again multiple\nchannels of similar function.</p>\n\n<p>For example, suppose you implemented a chat site with multiple rooms.\nWebSockets would be the basis for users communicating within each chat room,\nhowever you may want to use them elsewhere throughout the site for different\npurposes, perhaps for a real-time admin dashboard. In this case there would be\ntwo distinct WebSocket uses, with the chat rooms each requiring their own\nindividual channels.</p>\n\n<p>Suppose each chat room user subscribes to a channel client-side using the\nroom&rsquo;s ID:</p>\n\n<div class=\"highlight\"><pre><code class=\"javascript\"><span class=\"kd\">var</span> <span class=\"nx\">socket</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">io</span><span class=\"p\">.</span><span class=\"nx\">Socket</span><span class=\"p\">();</span>\n<span class=\"kd\">var</span> <span class=\"nx\">roomID</span> <span class=\"o\">=</span> <span class=\"mi\">42</span><span class=\"p\">;</span>\n<span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">();</span>\n<span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"nx\">connect</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">(</span><span class=\"nx\">room</span><span class=\"o\">-</span> <span class=\"o\">+</span> <span class=\"nx\">roomID</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre>\n</div>\n\n<p>Then server-side the different message handlers are bound to each type of\nchannel:</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"nd\">@on_message</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"s\">&quot;dashboard&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_dashboard_handler</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">socket</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"nd\">@on_message</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"s\">&quot;^room-&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_chat_handler</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">socket</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</code></pre>\n</div>\n\n<h4 id=\"chat-demo\">Chat Demo</h4>\n\n<p>The &ldquo;hello world&rdquo; of WebSocket applications is naturally the chat room. As\nsuch django-socketio comes with a demo chat application that provides examples\nof the different events and channel features available.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2011-08-13 10:00:00",
            "slug": "real-time-web-apps-with-django-and-websockets-1",
            "expiry_date": null
        }
    },
    {
        "pk": 5,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "I recently started a new role at a Ruby on Rails shop, which as a long time Django specialist was a really interesting opportunity. There&rsquo;s a lot of competition between the two frameworks&rsquo; communities, ranging from friendly rivalry and respectful admiration at the mature end of the scale, to all out fanboy fuelled flame-wars at the other.",
            "title": "Rails Quick Start for Djangonauts",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "python ruby rails django",
            "content": "<p>I recently started a new role at a <a href=\"http://rubyonrails.org/\">Ruby on Rails</a> shop, which as a long time <a href=\"https://www.djangoproject.com/\">Django</a> specialist was a really interesting opportunity. There&rsquo;s a lot of competition between the two frameworks&rsquo; communities, ranging from friendly rivalry and respectful admiration at the mature end of the scale, to all out fanboy fuelled flame-wars at the other.</p>\n\n<p>After you wade through the rivalry, the common wisdom voiced is that they&rsquo;re conceptually the same. If you know <a href=\"http://python.org/\">Python</a>, go with Django and if you know <a href=\"http://www.ruby-lang.org/\">Ruby</a>, go with Rails. After spending several months with Rails I can attest to this being true. At a bird&rsquo;s-eye view both frameworks contain almost identical concepts, implemented with different philosophies stemming from the ideals expressed by the languages they&rsquo;re written in. Both frameworks provide a vastly superior approach to security, modularity and rapid development than <a href=\"http://blog.jupo.org/2010/09/28/on-modern-web-development/\">their predecessors do</a>.</p>\n\n<p>An interesting question to ask would be: <em>which would be the best framework to choose, not knowing either language?</em> It would be naive of me to believe I am unbiased, but I would certainly recommend Django over Rails. The relative strictness of Python and explicitness of each component in Django, compared to the implicit magic in Rails, is simply much more geared towards creating large-scale systems in a sane and transparent way. To Ruby&rsquo;s credit though, I have developed a real admiration for the language itself, and have continued using it in my own projects - but that&rsquo;s a topic for another post.</p>\n\n<p>Considering how similar the two frameworks are component-wise, one thing I did miss was a side-by-side cheat sheet for working out what each of the concepts were in Rails that I already knew well in Django. I&rsquo;ve put one together below to help out anyone who might be picking up either framework while already knowing the other. For clarity, I&rsquo;ve also included descriptions of each type of component, for those who haven&rsquo;t used either framework.</p>\n\n<table class=\"zebra-striped\">\n<tr>\n    <th>Django</th>\n    <th>Ruby on Rails</th>\n    <th>&nbsp;</th>\n</tr>\n<tr>\n    <td><a href=\"https://docs.djangoproject.com/en/dev/topics/http/urls/\">URL patterns</a></td>\n    <td><a href=\"http://guides.rubyonrails.org/routing.html\">Routes</a></td>\n    <td>Regular expression definitions for each type of URL and what part of the web site they map to.</td>\n</tr>\n<tr>\n    <td><a href=\"https://docs.djangoproject.com/en/dev/topics/http/views/\">Views</a></td>\n    <td><a href=\"http://guides.rubyonrails.org/action_controller_overview.html\">Controllers</a></td>\n    <td>The units of code that the above regular expressions map to, that perform application logic and pass data to a rendering layer.</td>\n</tr>\n<tr>\n    <td><a href=\"https://docs.djangoproject.com/en/dev/topics/templates/\">Templates</a></td>\n    <td><a href=\"http://guides.rubyonrails.org/layouts_and_rendering.html\">Views</a></td>\n    <td>The rendering layer that is given data from the code described above, and performs display logic typically wrapped around HTML code.</td>\n</tr>\n<tr>\n    <td><a href=\"https://docs.djangoproject.com/en/dev/ref/templates/builtins/\">Template tags</a> <em>(built-in)</em></td>\n    <td><a href=\"http://www.ruby-doc.org/stdlib-1.9.3/libdoc/erb/rdoc/ERB.html\">Embedded Ruby</a></td>\n    <td>The flow-control language that can be used in the rendering layer.</td>\n</tr>\n<tr>\n    <td><a href=\"https://docs.djangoproject.com/en/dev/howto/custom-template-tags/\">Template tags</a> <em>(custom)</em></td>\n    <td><a href=\"http://guides.rubyonrails.org/getting_started.html#view-helpers\">Helpers</a></td>\n    <td>The system for defining custom functions that can be used in the rendering layer.</td>\n</tr>\n<tr>\n    <td><a href=\"https://docs.djangoproject.com/en/dev/topics/db/models/\">Models</a></td>\n    <td><a href=\"http://guides.rubyonrails.org/getting_started.html#getting-up-and-running-quickly-with-scaffolding\">Models</a></td>\n    <td>The data-definition layer that maps classes to database tables - the <a href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\">ORM</a>.</td>\n</tr>\n<tr>\n    <td><a href=\"https://docs.djangoproject.com/en/dev/topics/db/managers/\">Managers</a></td>\n    <td><a href=\"http://guides.rubyonrails.org/active_record_querying.html#scopes\">Scopes</a></td>\n    <td>The way to extend the ORM to define custom database queries.</td>\n</tr>\n<tr>\n    <td><a href=\"https://docs.djangoproject.com/en/dev/howto/custom-management-commands/\">Management commands</a></td>\n    <td><a href=\"http://guides.rubyonrails.org/command_line.html\">Rake tasks</a></td>\n    <td>Scripts for performing administrative tasks via the command line.</td>\n</tr>\n<tr>\n    <td><a href=\"https://docs.djangoproject.com/en/dev/glossary/#term-project\">Project</a></td>\n    <td><a href=\"http://guides.rubyonrails.org/getting_started.html#creating-the-blog-application\">App</a></td>\n    <td>An entire application built with the framework.</td>\n</tr>\n<tr>\n    <td><a href=\"https://docs.djangoproject.com/en/dev/intro/tutorial01/#creating-models\">App</a></td>\n    <td><a href=\"http://guides.rubyonrails.org/plugins.html\">Plugin</a></td>\n    <td>The way in which all components in the framework can grouped together in separate areas of functionality.</td>\n</tr>\n<tr>\n    <td><a href=\"http://south.aeracode.org/\">South</a> <em>(third-party)</em></td>\n    <td><a href=\"http://guides.rubyonrails.org/migrations.html\">Migrations</a></td>\n    <td>The system used for automatically applying changes in the ORM definition to the underlying database tables, such as adding and removing columns.</td>\n</tr>\n<tr>\n    <td><a href=\"https://docs.djangoproject.com/en/dev/ref/contrib/admin/\">Admin</a></td>\n    <td><a href=\"https://github.com/sferik/rails_admin\">RailsAdmin</a> <em>(third-party)</em></td>\n    <td>A web-based interface for authenticating administrative users and providing CRUD tools for managing data.</td>\n</tr>\n<tr>\n    <td colspan=\"3\">\n    <p>The following table lists software that aren't part of Django or Rails, but are core parts of the Python and Ruby eco-systems, and go hand-in-hand with using either framework.</p>\n    </td>\n</tr>\n<tr>\n    <th>Python</th>\n    <th>Ruby</th>\n    <th>&nbsp;</th>\n</tr>\n<tr>\n    <td><a href=\"http://www.virtualenv.org/\">Virtualenv</a></td>\n    <td><a href=\"http://beginrescueend.com/\">RVM</a></td>\n    <td>The system used for running isolated environments bound to a particular language version, combined with a set of install libraries.</td>\n</tr>\n<tr>\n    <td><a href=\"http://www.pip-installer.org/\">PIP</a></td>\n    <td><a href=\"http://gembundler.com/\">Bundler</a></td>\n    <td>The package manager for installing libraries.</td>\n</tr>\n<tr>\n    <td><a href=\"http://www.wsgi.org/\">WSGI</a></td>\n    <td><a href=\"http://en.wikipedia.org/wiki/Rack_(web_server_interface)\">Rack</a></td>\n    <td>A standard specification for applications to interface with HTTP, allowing for a single application entry point and middleware to be implemented.</td>\n</tr>\n<tr>\n    <td><a href=\"http://fabfile.org/\">Fabric</a></td>\n    <td><a href=\"http://en.wikipedia.org/wiki/Capistrano\">Capistrano</a></td>\n    <td>A system for automating tasks on remote servers from a local machine, typically as part of a deployment process.</td>\n</tr>\n</table>\n\n<p>Not all of these pairings are a perfect one-to-one match conceptually, but should be good enough to get an overall view of what each concept is within both frameworks.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2011-07-30 10:00:00",
            "slug": "rails-quick-start-for-djangonauts",
            "expiry_date": null
        }
    },
    {
        "pk": 30,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "I recently started a new role at a Ruby on Rails shop, which as a long time Django specialist was a really interesting opportunity. There&rsquo;s a lot of competition between the two frameworks&rsquo; communities, ranging from friendly rivalry and respectful admiration at the mature end of the scale, to all out fanboy fuelled flame-wars at the other.",
            "title": "Rails Quick Start for Djangonauts",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "python ruby rails django",
            "content": "<p>I recently started a new role at a <a href=\"http://rubyonrails.org/\">Ruby on Rails</a> shop, which as a long time <a href=\"https://www.djangoproject.com/\">Django</a> specialist was a really interesting opportunity. There&rsquo;s a lot of competition between the two frameworks&rsquo; communities, ranging from friendly rivalry and respectful admiration at the mature end of the scale, to all out fanboy fuelled flame-wars at the other.</p>\n\n<p>After you wade through the rivalry, the common wisdom voiced is that they&rsquo;re conceptually the same. If you know <a href=\"http://python.org/\">Python</a>, go with Django and if you know <a href=\"http://www.ruby-lang.org/\">Ruby</a>, go with Rails. After spending several months with Rails I can attest to this being true. At a bird&rsquo;s-eye view both frameworks contain almost identical concepts, implemented with different philosophies stemming from the ideals expressed by the languages they&rsquo;re written in. Both frameworks provide a vastly superior approach to security, modularity and rapid development than <a href=\"http://blog.jupo.org/2010/09/28/on-modern-web-development/\">their predecessors do</a>.</p>\n\n<p>An interesting question to ask would be: <em>which would be the best framework to choose, not knowing either language?</em> It would be naive of me to believe I am unbiased, but I would certainly recommend Django over Rails. The relative strictness of Python and explicitness of each component in Django, compared to the implicit magic in Rails, is simply much more geared towards creating large-scale systems in a sane and transparent way. To Ruby&rsquo;s credit though, I have developed a real admiration for the language itself, and have continued using it in my own projects - but that&rsquo;s a topic for another post.</p>\n\n<p>Considering how similar the two frameworks are component-wise, one thing I did miss was a side-by-side cheat sheet for working out what each of the concepts were in Rails that I already knew well in Django. I&rsquo;ve put one together below to help out anyone who might be picking up either framework while already knowing the other. For clarity, I&rsquo;ve also included descriptions of each type of component, for those who haven&rsquo;t used either framework.</p>\n\n<table class=\"zebra-striped\">\n<tr>\n    <th>Django</th>\n    <th>Ruby on Rails</th>\n    <th>&nbsp;</th>\n</tr>\n<tr>\n    <td><a href=\"https://docs.djangoproject.com/en/dev/topics/http/urls/\">URL patterns</a></td>\n    <td><a href=\"http://guides.rubyonrails.org/routing.html\">Routes</a></td>\n    <td>Regular expression definitions for each type of URL and what part of the web site they map to.</td>\n</tr>\n<tr>\n    <td><a href=\"https://docs.djangoproject.com/en/dev/topics/http/views/\">Views</a></td>\n    <td><a href=\"http://guides.rubyonrails.org/action_controller_overview.html\">Controllers</a></td>\n    <td>The units of code that the above regular expressions map to, that perform application logic and pass data to a rendering layer.</td>\n</tr>\n<tr>\n    <td><a href=\"https://docs.djangoproject.com/en/dev/topics/templates/\">Templates</a></td>\n    <td><a href=\"http://guides.rubyonrails.org/layouts_and_rendering.html\">Views</a></td>\n    <td>The rendering layer that is given data from the code described above, and performs display logic typically wrapped around HTML code.</td>\n</tr>\n<tr>\n    <td><a href=\"https://docs.djangoproject.com/en/dev/ref/templates/builtins/\">Template tags</a> <em>(built-in)</em></td>\n    <td><a href=\"http://www.ruby-doc.org/stdlib-1.9.3/libdoc/erb/rdoc/ERB.html\">Embedded Ruby</a></td>\n    <td>The flow-control language that can be used in the rendering layer.</td>\n</tr>\n<tr>\n    <td><a href=\"https://docs.djangoproject.com/en/dev/howto/custom-template-tags/\">Template tags</a> <em>(custom)</em></td>\n    <td><a href=\"http://guides.rubyonrails.org/getting_started.html#view-helpers\">Helpers</a></td>\n    <td>The system for defining custom functions that can be used in the rendering layer.</td>\n</tr>\n<tr>\n    <td><a href=\"https://docs.djangoproject.com/en/dev/topics/db/models/\">Models</a></td>\n    <td><a href=\"http://guides.rubyonrails.org/getting_started.html#getting-up-and-running-quickly-with-scaffolding\">Models</a></td>\n    <td>The data-definition layer that maps classes to database tables - the <a href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\">ORM</a>.</td>\n</tr>\n<tr>\n    <td><a href=\"https://docs.djangoproject.com/en/dev/topics/db/managers/\">Managers</a></td>\n    <td><a href=\"http://guides.rubyonrails.org/active_record_querying.html#scopes\">Scopes</a></td>\n    <td>The way to extend the ORM to define custom database queries.</td>\n</tr>\n<tr>\n    <td><a href=\"https://docs.djangoproject.com/en/dev/howto/custom-management-commands/\">Management commands</a></td>\n    <td><a href=\"http://guides.rubyonrails.org/command_line.html\">Rake tasks</a></td>\n    <td>Scripts for performing administrative tasks via the command line.</td>\n</tr>\n<tr>\n    <td><a href=\"https://docs.djangoproject.com/en/dev/glossary/#term-project\">Project</a></td>\n    <td><a href=\"http://guides.rubyonrails.org/getting_started.html#creating-the-blog-application\">App</a></td>\n    <td>An entire application built with the framework.</td>\n</tr>\n<tr>\n    <td><a href=\"https://docs.djangoproject.com/en/dev/intro/tutorial01/#creating-models\">App</a></td>\n    <td><a href=\"http://guides.rubyonrails.org/plugins.html\">Plugin</a></td>\n    <td>The way in which all components in the framework can grouped together in separate areas of functionality.</td>\n</tr>\n<tr>\n    <td><a href=\"http://south.aeracode.org/\">South</a> <em>(third-party)</em></td>\n    <td><a href=\"http://guides.rubyonrails.org/migrations.html\">Migrations</a></td>\n    <td>The system used for automatically applying changes in the ORM definition to the underlying database tables, such as adding and removing columns.</td>\n</tr>\n<tr>\n    <td><a href=\"https://docs.djangoproject.com/en/dev/ref/contrib/admin/\">Admin</a></td>\n    <td><a href=\"https://github.com/sferik/rails_admin\">RailsAdmin</a> <em>(third-party)</em></td>\n    <td>A web-based interface for authenticating administrative users and providing CRUD tools for managing data.</td>\n</tr>\n<tr>\n    <td colspan=\"3\">\n    <p>The following table lists software that aren't part of Django or Rails, but are core parts of the Python and Ruby eco-systems, and go hand-in-hand with using either framework.</p>\n    </td>\n</tr>\n<tr>\n    <th>Python</th>\n    <th>Ruby</th>\n    <th>&nbsp;</th>\n</tr>\n<tr>\n    <td><a href=\"http://www.virtualenv.org/\">Virtualenv</a></td>\n    <td><a href=\"http://beginrescueend.com/\">RVM</a></td>\n    <td>The system used for running isolated environments bound to a particular language version, combined with a set of install libraries.</td>\n</tr>\n<tr>\n    <td><a href=\"http://www.pip-installer.org/\">PIP</a></td>\n    <td><a href=\"http://gembundler.com/\">Bundler</a></td>\n    <td>The package manager for installing libraries.</td>\n</tr>\n<tr>\n    <td><a href=\"http://www.wsgi.org/\">WSGI</a></td>\n    <td><a href=\"http://en.wikipedia.org/wiki/Rack_(web_server_interface)\">Rack</a></td>\n    <td>A standard specification for applications to interface with HTTP, allowing for a single application entry point and middleware to be implemented.</td>\n</tr>\n<tr>\n    <td><a href=\"http://fabfile.org/\">Fabric</a></td>\n    <td><a href=\"http://en.wikipedia.org/wiki/Capistrano\">Capistrano</a></td>\n    <td>A system for automating tasks on remote servers from a local machine, typically as part of a deployment process.</td>\n</tr>\n</table>\n\n<p>Not all of these pairings are a perfect one-to-one match conceptually, but should be good enough to get an overall view of what each concept is within both frameworks.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2011-07-30 10:00:00",
            "slug": "rails-quick-start-for-djangonauts-1",
            "expiry_date": null
        }
    },
    {
        "pk": 6,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "The question of scalability with regard to\nMezzanine and\nDjango recently came on up on the\nmezzanine-users mailing list, to which I offered the following reply.",
            "title": "Does Mezzanine Scale?",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "mezzanine cartridge django scalability",
            "content": "<p>The question of scalability with regard to\n<a href=\"http://mezzanine.jupo.org/\">Mezzanine</a> and\n<a href=\"https://www.djangoproject.com/\">Django</a> recently came on up on the\n<a href=\"http://groups.google.com/group/mezzanine-\nusers/topics\">mezzanine-users mailing list</a>, to which I offered the following reply.</p>\n\n<p>Mezzanine and Django itself are fantastic choices for someone concerned with\nscaling for high traffic.</p>\n\n<p>The <a href=\"https://addons.mozilla.org\">Mozilla add-ons</a> site that hosts all Firefox\nplugins, and <a href=\"http://disqus.com/\">Disqus</a> which is currently the world&rsquo;s\nhighest traffic commenting system, both run on Django. Each of these have been\nquoted at <a href=\"http://www.djangocon.eu/talks/18/\">500 million hits per day</a> and <a href=\"http://www.quora.com/Django/What-is-the-highest-traffic-\nwebsite-built-on-top-of-Django\">1\nbillion per month</a> respectively.</p>\n\n<p>One of the keys to scaling sites like these is the wealth of options available\nfor caching in the Django ecosystem, and the ability to then scale out the\nnumber of both application servers running Django, and caching servers\ntypically running <a href=\"http://memcached.org/\">memcached</a>, with very little\nmodification to your application code. Django comes out-of-the-box with the\nability to switch on <a href=\"https://docs.djangoproject.com/en/1.3/topics/cache/#the-per-site-\ncache\">site-wide\ncaching</a>, <a href=\"https://docs.djangoproject.com/en/1.3/topics/cache\n/#the-per-view-cache\">per page caching</a> and <a href=\"https://docs.djangoproject.com/en/1.3/topics/cache/#template-\nfragment-caching\">template fragment\ncaching</a>. Beyond that there are also third-party Django applications\nthat implement object level caching such as <a href=\"http://jbalogh.me/projects/cache-machine/\">Django Cache\nMachine</a> and <a href=\"http://packages.python.org/johnny-cache/\">Johnny\nCache</a>, for even finer-grained\ncontrol with little modification to your code.</p>\n\n<p>Both Mezzanine and <a href=\"http://cartridge.jupo.org/\">Cartridge</a> have been designed\nfrom the ground up with scalability in mind. Particular care has been taken to\navoid any <a href=\"http://www.pbell.com/index.cfm/2006/9/17\n/Understanding-the-n1-query-problem\">n+1 queries</a>, for example rendering out multiple\ninstances of Mezzanine&rsquo;s navigation tree containing any number of nested\nlevels of navigation will only ever run a single database query. Same with\nCartridge&rsquo;s products. What this means is that you can go very far traffic-\nwise, using a single server without even thinking about caching. Once you do\nthen the ability to add application and cache servers is trivial, and will\ntake you incredibly far using a single database. Once you start needing\nmultiple database servers Django also comes with the built-in ability to\n<a href=\"https://docs.djangoproject.com/en/1.3/topics/db/multi-db/\">route models across different\ndatabases</a>, so\nthere are extra options there beyond your typical master/slave database\nreplication scenario.</p>\n\n<p>I&rsquo;ve only touched on the topic to provide an overview of what&rsquo;s available, and\nyou should certainly research it further for your particular scenario, but as\nyou can see scalability is a core concern baked into Django and Mezzanine, so\nyou can choose these with confidence.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2011-06-16 10:00:00",
            "slug": "does-mezzanine-scale",
            "expiry_date": null
        }
    },
    {
        "pk": 31,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "The question of scalability with regard to\nMezzanine and\nDjango recently came on up on the\nmezzanine-users mailing list, to which I offered the following reply.",
            "title": "Does Mezzanine Scale?",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "mezzanine cartridge django scalability",
            "content": "<p>The question of scalability with regard to\n<a href=\"http://mezzanine.jupo.org/\">Mezzanine</a> and\n<a href=\"https://www.djangoproject.com/\">Django</a> recently came on up on the\n<a href=\"http://groups.google.com/group/mezzanine-\nusers/topics\">mezzanine-users mailing list</a>, to which I offered the following reply.</p>\n\n<p>Mezzanine and Django itself are fantastic choices for someone concerned with\nscaling for high traffic.</p>\n\n<p>The <a href=\"https://addons.mozilla.org\">Mozilla add-ons</a> site that hosts all Firefox\nplugins, and <a href=\"http://disqus.com/\">Disqus</a> which is currently the world&rsquo;s\nhighest traffic commenting system, both run on Django. Each of these have been\nquoted at <a href=\"http://www.djangocon.eu/talks/18/\">500 million hits per day</a> and <a href=\"http://www.quora.com/Django/What-is-the-highest-traffic-\nwebsite-built-on-top-of-Django\">1\nbillion per month</a> respectively.</p>\n\n<p>One of the keys to scaling sites like these is the wealth of options available\nfor caching in the Django ecosystem, and the ability to then scale out the\nnumber of both application servers running Django, and caching servers\ntypically running <a href=\"http://memcached.org/\">memcached</a>, with very little\nmodification to your application code. Django comes out-of-the-box with the\nability to switch on <a href=\"https://docs.djangoproject.com/en/1.3/topics/cache/#the-per-site-\ncache\">site-wide\ncaching</a>, <a href=\"https://docs.djangoproject.com/en/1.3/topics/cache\n/#the-per-view-cache\">per page caching</a> and <a href=\"https://docs.djangoproject.com/en/1.3/topics/cache/#template-\nfragment-caching\">template fragment\ncaching</a>. Beyond that there are also third-party Django applications\nthat implement object level caching such as <a href=\"http://jbalogh.me/projects/cache-machine/\">Django Cache\nMachine</a> and <a href=\"http://packages.python.org/johnny-cache/\">Johnny\nCache</a>, for even finer-grained\ncontrol with little modification to your code.</p>\n\n<p>Both Mezzanine and <a href=\"http://cartridge.jupo.org/\">Cartridge</a> have been designed\nfrom the ground up with scalability in mind. Particular care has been taken to\navoid any <a href=\"http://www.pbell.com/index.cfm/2006/9/17\n/Understanding-the-n1-query-problem\">n+1 queries</a>, for example rendering out multiple\ninstances of Mezzanine&rsquo;s navigation tree containing any number of nested\nlevels of navigation will only ever run a single database query. Same with\nCartridge&rsquo;s products. What this means is that you can go very far traffic-\nwise, using a single server without even thinking about caching. Once you do\nthen the ability to add application and cache servers is trivial, and will\ntake you incredibly far using a single database. Once you start needing\nmultiple database servers Django also comes with the built-in ability to\n<a href=\"https://docs.djangoproject.com/en/1.3/topics/db/multi-db/\">route models across different\ndatabases</a>, so\nthere are extra options there beyond your typical master/slave database\nreplication scenario.</p>\n\n<p>I&rsquo;ve only touched on the topic to provide an overview of what&rsquo;s available, and\nyou should certainly research it further for your particular scenario, but as\nyou can see scalability is a core concern baked into Django and Mezzanine, so\nyou can choose these with confidence.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2011-06-16 10:00:00",
            "slug": "does-mezzanine-scale-1",
            "expiry_date": null
        }
    },
    {
        "pk": 7,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "Mezzanine and Cartridge Hit the Mainstream",
            "title": "Mezzanine and Cartridge Hit the Mainstream",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "mezzanine cartridge django australia techworld cio magazine open source",
            "content": "<p><a href=\"http://www.cio.com.au/article/380\n246/melbourne_hacker_releases_open_source_django_apps/\">Mezzanine and Cartridge Hit the Mainstream</a></p>\n\n<p>This week I had the fantastic opportunity to be interviewed by <a href=\"http://www.gedda.info/\">Rodney\nGedda</a> from <a href=\"http://idg.com/\">IDG</a> for their\n<a href=\"http://www.techworld.com.au/\">TechWorld</a> and <a href=\"http://www.cio.com.au/\">CIO</a>\nmagazines. The interview focused on my open source work with the\n<a href=\"http://mezzanine.jupo.org/\">Mezzanine</a> and\n<a href=\"http://cartridge.jupo.org/\">Cartridge</a> projects.</p>\n\n<p><a href=\"http://www.cio.com.au/arti\ncle/380246/melbourne_hacker_releases_open_source_django_apps/\">Melbourne hacker releases open source Django apps</a></p>\n\n<p>These projects have been gaining traction at an incredible pace, with a solid\ncommunity forming around them over the last year. All of this has happened in\nspite of having no formal promotion outside of the community itself, which\nmakes this type of exposure all the more exciting.</p>\n\n<p>It&rsquo;s also no secret that I think <a href=\"http://blog.jupo.org/2010/09/28/on-\nmodern-web-development/\">the Australian web development market is\nmany years behind the United States</a>, so it&rsquo;s a great step forward to see modern\ntechnology getting covered by the mainstream local tech media.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2011-03-21 10:00:00",
            "slug": "mezzanine-and-cartridge-hit-the-mainstream",
            "expiry_date": null
        }
    },
    {
        "pk": 32,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "Mezzanine and Cartridge Hit the Mainstream",
            "title": "Mezzanine and Cartridge Hit the Mainstream",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "mezzanine cartridge django australia techworld cio magazine open source",
            "content": "<p><a href=\"http://www.cio.com.au/article/380\n246/melbourne_hacker_releases_open_source_django_apps/\">Mezzanine and Cartridge Hit the Mainstream</a></p>\n\n<p>This week I had the fantastic opportunity to be interviewed by <a href=\"http://www.gedda.info/\">Rodney\nGedda</a> from <a href=\"http://idg.com/\">IDG</a> for their\n<a href=\"http://www.techworld.com.au/\">TechWorld</a> and <a href=\"http://www.cio.com.au/\">CIO</a>\nmagazines. The interview focused on my open source work with the\n<a href=\"http://mezzanine.jupo.org/\">Mezzanine</a> and\n<a href=\"http://cartridge.jupo.org/\">Cartridge</a> projects.</p>\n\n<p><a href=\"http://www.cio.com.au/arti\ncle/380246/melbourne_hacker_releases_open_source_django_apps/\">Melbourne hacker releases open source Django apps</a></p>\n\n<p>These projects have been gaining traction at an incredible pace, with a solid\ncommunity forming around them over the last year. All of this has happened in\nspite of having no formal promotion outside of the community itself, which\nmakes this type of exposure all the more exciting.</p>\n\n<p>It&rsquo;s also no secret that I think <a href=\"http://blog.jupo.org/2010/09/28/on-\nmodern-web-development/\">the Australian web development market is\nmany years behind the United States</a>, so it&rsquo;s a great step forward to see modern\ntechnology getting covered by the mainstream local tech media.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2011-03-21 10:00:00",
            "slug": "mezzanine-and-cartridge-hit-the-mainstream-1",
            "expiry_date": null
        }
    },
    {
        "pk": 8,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "Having remained utterly faithful to Python and\nDjango over the last year, and dedicating all\nof my available time to open source projects like\nMezzanine and\nCartridge, with the new year at hand I though it\nwas about time to take a break and add some new technology to my repertoire.\nDuring his keynote speech at Djangocon.eu\n2010, the creator of Django Jacob\nKaplan-Moss states \u201cit will challenge what you think\nyou know about web/server architecture\u201d when referring to\nNode.js. Since then it has been sitting in the back of my\nmind as something I definitely needed to check out, so I decided to dive in\nhead first.",
            "title": "How I Now Know Node",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "coffeescript javascript node.js sockets",
            "content": "<p>Having remained utterly faithful to <a href=\"http://python.org/\">Python</a> and\n<a href=\"http://www.djangoproject.com/\">Django</a> over the last year, and dedicating all\nof my available time to open source projects like\n<a href=\"http://mezzanine.jupo.org\">Mezzanine</a> and\n<a href=\"http://cartridge.jupo.org\">Cartridge</a>, with the new year at hand I though it\nwas about time to take a break and add some new technology to my repertoire.\nDuring his <a href=\"http://djangoconeu.blip.tv/file/3674233/\">keynote speech at Djangocon.eu\n2010</a>, the creator of Django <a href=\"http://jacobian.org/\">Jacob\nKaplan-Moss</a> states \u201cit will challenge what you think\nyou know about web/server architecture\u201d when referring to\n<a href=\"http://nodejs.org\">Node.js</a>. Since then it has been sitting in the back of my\nmind as something I definitely needed to check out, so I decided to dive in\nhead first.</p>\n\n<p>Node.js is a general purpose JavaScript development environment geared towards\nwriting network servers. It uses an event-based, non-blocking architecture\nwhich allows your web application to scale to thousands of concurrent\nconnections without needing a finite pool of threads or processes. JavaScript\nis executed using <a href=\"http://code.google.com/apis/v8/intro.html\">Google&rsquo;s V8\nengine</a> which ranks very highly in\nspeed <a href=\"http://shootout.alioth.debian.org/u32/which-programming-languages-\nare-fastest.php\">compared to other dynamic\nlanguages</a>, so not only does Node.js scale elegantly, it&rsquo;s damn fast.</p>\n\n<p>Having recently built <a href=\"http://github.com/stephenmcd/grillo\">Grillo</a>, a console\nbased chat server, I&rsquo;d been considering what it would be like to put together\na web-based version. In fact I had achieved <a href=\"http://code.google.com/p/cmdsvr/\">something\nsimilar</a> in the past using <a href=\"http://docs.python.org/library/basehttpserver.html\">Python&rsquo;s\nBaseHttpServer module</a>,\nand while functional for a few hundred connections, my approach would never\nscale, as either a separate thread or process would be required for each open\nconnection. The event driven architecture of scaling a web server for an\nincreasing number of open connections is mostly a solved problem, especially\nin the Python community with projects like\n<a href=\"http://twistedmatrix.com/\">Twisted</a> and\n<a href=\"http://www.tornadoweb.org/\">Tornado</a>. However Node.js is different in that\nits non-blocking evented model is a first class citizen by design.</p>\n\n<p>With a useful project at hand to try Node.js on, I set about creating what\nI&rsquo;ve named <a href=\"http://chat.jupo.org/about\">Grillode</a> (yes you guessed it: Grillo\n+ Node). It&rsquo;s a web-based chat server with a set of configuration options that\nlets you run it in various modes, such as a customer support queue, or with\n<a href=\"http://en.wikipedia.org/wiki/Chatroulette\">Chatroulette</a> style random match-\nups. I&rsquo;ve released the source onto\n<a href=\"http://github.com/stephenmcd/grillode\">Github</a> and\n<a href=\"http://bitbucket.org/stephenmcd/grillode\">Bitbucket</a>, and also have <a href=\"http://chat.jupo.org/\">a demo\nup and running</a>.</p>\n\n<p>The process of putting Grillode together led me through many parts of the\necosystem that has developed around Node.js - following is an overview of the\npieces I ended up working with.</p>\n\n<h4 id=\"node-package-manager-npm\">Node Package Manager (NPM)</h4>\n\n<p><a href=\"http://npmjs.org/\">NPM</a> is a command line utility that gives you access to a\ncentral online repository of packages built for Node.js. It works wonderfully\nwhen installed correctly, but on my machine I encountered a handful of issues\nwhere it ended up recreating various system directories all throughout my home\ndirectory. After setting up various symlinks by hand, I did get it to work\nafter many failed attempts at installing it. This issue was definitely\nspecific to my machine as I was then able to go ahead and install NPM\nseamlessly on several different servers.</p>\n\n<p>Once everything was working correctly it made deployment of Grillode a breeze.\nBy specifying all of its dependencies in a <a href=\"https://github.com/s\ntephenmcd/grillode/blob/master/package.json\">package.json</a> file, NPM was able to installed\neverything required in a single step.</p>\n\n<h4 id=\"express\">Express</h4>\n\n<p><a href=\"http://expressjs.com/\">Express</a> provides basic URL routing to functions that\nwill typically perform some application logic and hand off data to a template\nto be rendered. It contains integration points for a handful of different\ntemplating libraries and it also contains a simple middleware system. I\u2019d\ndefinitely consider it to be a micro framework, but it\u2019s a great start at\nwhipping your Node.js application into a well defined structure.</p>\n\n<h4 id=\"socketio\">Socket.io</h4>\n\n<p><a href=\"http://socket.io/\">Socket.io</a> takes all the leg work out of maintaining an\nopen connection to the browser. You start by attaching it to your Node.js\nserver which then automatically makes available the client-side JavaScript\nrequired. This provides the communication channel between the client and the\nserver, which attempts to use <a href=\"http://en.wikipedia.org/wiki/WebSockets\">web\nsockets</a> when available, and\ntransparently falls back to Flash sockets or even old-school AJAX polling if\nthe former options aren\u2019t supported by the browser.</p>\n\n<p>It then provides all of the methods and event handlers for connecting and\nsending data over the connection. The beauty behind how this is implemented is\nthat it exposes these methods and events almost identically to both the\nNode.js server, and the browser client - instantly you have available two-way\ncommunication between the browser and the server via an open connection,\nwithout requiring any new requests to the server.</p>\n\n<h4 id=\"coffeescript\">CoffeeScript</h4>\n\n<p>As many others have done, I\u2019ve often compared JavaScript to Python in that\nthey both share an object model defined by a hash table of names and object\nmembers, which can be introspected and dynamically modified. While this is a\nvery elegant model, JavaScript boasts syntax reminiscant of the turn of the\ncentury, cluttered with semicolons and braces, and missing a handful of\nfeatures found in modern languages such as list comprehensions and much more.\nWell <a href=\"http://www.americanscientist.org/issues/i\nd.3489,y.0,no.,content.true,page.1,css.print/issue.aspx\">the war on semicolons is over</a> with the explosion in\npopularity of languages such as Python and Ruby showing this to be true.</p>\n\n<p><a href=\"http://coffeescript.org\">CoffeeScript</a> is a language inspired by Python and\nRuby which gets compiled directly into JavaScript. It therefore retains all\nthe properties of JavaScript such as its data types, objects and methods, but\nprovides a much more modern and clean syntax with some fantastic sugar, such\nas list comprehensions, class-based object construction, string interpolation\nand more.</p>\n\n<p>Experimentally, CoffeeScript can be run directly in the browser in place of\nJavaScript by including the compiler JavaScript file itself, but much more\ninterestingly it can be used as an execution environment for Node.js, which\nwill perform the compilation to JavaScript when the Node.js application is\nfirst started. I found my experience to match reports of up to 30% in\nreduction of the amount of code required.</p>\n\n<h4 id=\"coffeekup\">Coffeekup</h4>\n\n<p>When looking into what was available for templating, I started out with\n<a href=\"http://github.com/visionmedia/ejs\">EJS</a> which basically gives you executable\nJavaScript within your template files. I found this to provide a poor\nseparation between display and application code, something that Django gets\nright by providing a limited template language that has basic flow control,\nbut makes writing non-trivial logic difficult to do.</p>\n\n<p>I then discovered a Node.js template library called\n<a href=\"http://coffeekup.org/\">Coffeekup</a>, that tied in very closely with the time I\nhad already spent with CoffeeScript. Coffeekup allows you to define your HTML\nentirely in CoffeeScript. I\u2019m still undecided on whether this is a thing of\nbeauty or horror. It\u2019s very surreal to work with web page markup expressed\nentirely in programming code. I guess there\u2019s somewhat of an undeserved\nfeeling of the presentation being too closely tied to programming logic. There\nis a magical feeling in having your server code, client code and presentation\ncode all in the exact same language, coupled with the given language being\nCoffeeScript which is incredibly clean.</p>\n\n<h4 id=\"conclusion\">Conclusion</h4>\n\n<p>I really enjoyed working with Node.js and the young ecosystem surrounding it.\nAt this point in time, I wouldn\u2019t consider it for a typical project over a\nfull stack framework like Django with the elegance of Python, however it\ndefinitely serves as a fantastic choice for a very specific criteria -\nscalable, real time web applications.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2011-02-01 10:00:00",
            "slug": "how-i-now-know-node",
            "expiry_date": null
        }
    },
    {
        "pk": 33,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "Having remained utterly faithful to Python and\nDjango over the last year, and dedicating all\nof my available time to open source projects like\nMezzanine and\nCartridge, with the new year at hand I though it\nwas about time to take a break and add some new technology to my repertoire.\nDuring his keynote speech at Djangocon.eu\n2010, the creator of Django Jacob\nKaplan-Moss states \u201cit will challenge what you think\nyou know about web/server architecture\u201d when referring to\nNode.js. Since then it has been sitting in the back of my\nmind as something I definitely needed to check out, so I decided to dive in\nhead first.",
            "title": "How I Now Know Node",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "coffeescript javascript node.js sockets",
            "content": "<p>Having remained utterly faithful to <a href=\"http://python.org/\">Python</a> and\n<a href=\"http://www.djangoproject.com/\">Django</a> over the last year, and dedicating all\nof my available time to open source projects like\n<a href=\"http://mezzanine.jupo.org\">Mezzanine</a> and\n<a href=\"http://cartridge.jupo.org\">Cartridge</a>, with the new year at hand I though it\nwas about time to take a break and add some new technology to my repertoire.\nDuring his <a href=\"http://djangoconeu.blip.tv/file/3674233/\">keynote speech at Djangocon.eu\n2010</a>, the creator of Django <a href=\"http://jacobian.org/\">Jacob\nKaplan-Moss</a> states \u201cit will challenge what you think\nyou know about web/server architecture\u201d when referring to\n<a href=\"http://nodejs.org\">Node.js</a>. Since then it has been sitting in the back of my\nmind as something I definitely needed to check out, so I decided to dive in\nhead first.</p>\n\n<p>Node.js is a general purpose JavaScript development environment geared towards\nwriting network servers. It uses an event-based, non-blocking architecture\nwhich allows your web application to scale to thousands of concurrent\nconnections without needing a finite pool of threads or processes. JavaScript\nis executed using <a href=\"http://code.google.com/apis/v8/intro.html\">Google&rsquo;s V8\nengine</a> which ranks very highly in\nspeed <a href=\"http://shootout.alioth.debian.org/u32/which-programming-languages-\nare-fastest.php\">compared to other dynamic\nlanguages</a>, so not only does Node.js scale elegantly, it&rsquo;s damn fast.</p>\n\n<p>Having recently built <a href=\"http://github.com/stephenmcd/grillo\">Grillo</a>, a console\nbased chat server, I&rsquo;d been considering what it would be like to put together\na web-based version. In fact I had achieved <a href=\"http://code.google.com/p/cmdsvr/\">something\nsimilar</a> in the past using <a href=\"http://docs.python.org/library/basehttpserver.html\">Python&rsquo;s\nBaseHttpServer module</a>,\nand while functional for a few hundred connections, my approach would never\nscale, as either a separate thread or process would be required for each open\nconnection. The event driven architecture of scaling a web server for an\nincreasing number of open connections is mostly a solved problem, especially\nin the Python community with projects like\n<a href=\"http://twistedmatrix.com/\">Twisted</a> and\n<a href=\"http://www.tornadoweb.org/\">Tornado</a>. However Node.js is different in that\nits non-blocking evented model is a first class citizen by design.</p>\n\n<p>With a useful project at hand to try Node.js on, I set about creating what\nI&rsquo;ve named <a href=\"http://chat.jupo.org/about\">Grillode</a> (yes you guessed it: Grillo\n+ Node). It&rsquo;s a web-based chat server with a set of configuration options that\nlets you run it in various modes, such as a customer support queue, or with\n<a href=\"http://en.wikipedia.org/wiki/Chatroulette\">Chatroulette</a> style random match-\nups. I&rsquo;ve released the source onto\n<a href=\"http://github.com/stephenmcd/grillode\">Github</a> and\n<a href=\"http://bitbucket.org/stephenmcd/grillode\">Bitbucket</a>, and also have <a href=\"http://chat.jupo.org/\">a demo\nup and running</a>.</p>\n\n<p>The process of putting Grillode together led me through many parts of the\necosystem that has developed around Node.js - following is an overview of the\npieces I ended up working with.</p>\n\n<h4 id=\"node-package-manager-npm\">Node Package Manager (NPM)</h4>\n\n<p><a href=\"http://npmjs.org/\">NPM</a> is a command line utility that gives you access to a\ncentral online repository of packages built for Node.js. It works wonderfully\nwhen installed correctly, but on my machine I encountered a handful of issues\nwhere it ended up recreating various system directories all throughout my home\ndirectory. After setting up various symlinks by hand, I did get it to work\nafter many failed attempts at installing it. This issue was definitely\nspecific to my machine as I was then able to go ahead and install NPM\nseamlessly on several different servers.</p>\n\n<p>Once everything was working correctly it made deployment of Grillode a breeze.\nBy specifying all of its dependencies in a <a href=\"https://github.com/s\ntephenmcd/grillode/blob/master/package.json\">package.json</a> file, NPM was able to installed\neverything required in a single step.</p>\n\n<h4 id=\"express\">Express</h4>\n\n<p><a href=\"http://expressjs.com/\">Express</a> provides basic URL routing to functions that\nwill typically perform some application logic and hand off data to a template\nto be rendered. It contains integration points for a handful of different\ntemplating libraries and it also contains a simple middleware system. I\u2019d\ndefinitely consider it to be a micro framework, but it\u2019s a great start at\nwhipping your Node.js application into a well defined structure.</p>\n\n<h4 id=\"socketio\">Socket.io</h4>\n\n<p><a href=\"http://socket.io/\">Socket.io</a> takes all the leg work out of maintaining an\nopen connection to the browser. You start by attaching it to your Node.js\nserver which then automatically makes available the client-side JavaScript\nrequired. This provides the communication channel between the client and the\nserver, which attempts to use <a href=\"http://en.wikipedia.org/wiki/WebSockets\">web\nsockets</a> when available, and\ntransparently falls back to Flash sockets or even old-school AJAX polling if\nthe former options aren\u2019t supported by the browser.</p>\n\n<p>It then provides all of the methods and event handlers for connecting and\nsending data over the connection. The beauty behind how this is implemented is\nthat it exposes these methods and events almost identically to both the\nNode.js server, and the browser client - instantly you have available two-way\ncommunication between the browser and the server via an open connection,\nwithout requiring any new requests to the server.</p>\n\n<h4 id=\"coffeescript\">CoffeeScript</h4>\n\n<p>As many others have done, I\u2019ve often compared JavaScript to Python in that\nthey both share an object model defined by a hash table of names and object\nmembers, which can be introspected and dynamically modified. While this is a\nvery elegant model, JavaScript boasts syntax reminiscant of the turn of the\ncentury, cluttered with semicolons and braces, and missing a handful of\nfeatures found in modern languages such as list comprehensions and much more.\nWell <a href=\"http://www.americanscientist.org/issues/i\nd.3489,y.0,no.,content.true,page.1,css.print/issue.aspx\">the war on semicolons is over</a> with the explosion in\npopularity of languages such as Python and Ruby showing this to be true.</p>\n\n<p><a href=\"http://coffeescript.org\">CoffeeScript</a> is a language inspired by Python and\nRuby which gets compiled directly into JavaScript. It therefore retains all\nthe properties of JavaScript such as its data types, objects and methods, but\nprovides a much more modern and clean syntax with some fantastic sugar, such\nas list comprehensions, class-based object construction, string interpolation\nand more.</p>\n\n<p>Experimentally, CoffeeScript can be run directly in the browser in place of\nJavaScript by including the compiler JavaScript file itself, but much more\ninterestingly it can be used as an execution environment for Node.js, which\nwill perform the compilation to JavaScript when the Node.js application is\nfirst started. I found my experience to match reports of up to 30% in\nreduction of the amount of code required.</p>\n\n<h4 id=\"coffeekup\">Coffeekup</h4>\n\n<p>When looking into what was available for templating, I started out with\n<a href=\"http://github.com/visionmedia/ejs\">EJS</a> which basically gives you executable\nJavaScript within your template files. I found this to provide a poor\nseparation between display and application code, something that Django gets\nright by providing a limited template language that has basic flow control,\nbut makes writing non-trivial logic difficult to do.</p>\n\n<p>I then discovered a Node.js template library called\n<a href=\"http://coffeekup.org/\">Coffeekup</a>, that tied in very closely with the time I\nhad already spent with CoffeeScript. Coffeekup allows you to define your HTML\nentirely in CoffeeScript. I\u2019m still undecided on whether this is a thing of\nbeauty or horror. It\u2019s very surreal to work with web page markup expressed\nentirely in programming code. I guess there\u2019s somewhat of an undeserved\nfeeling of the presentation being too closely tied to programming logic. There\nis a magical feeling in having your server code, client code and presentation\ncode all in the exact same language, coupled with the given language being\nCoffeeScript which is incredibly clean.</p>\n\n<h4 id=\"conclusion\">Conclusion</h4>\n\n<p>I really enjoyed working with Node.js and the young ecosystem surrounding it.\nAt this point in time, I wouldn\u2019t consider it for a typical project over a\nfull stack framework like Django with the elegance of Python, however it\ndefinitely serves as a fantastic choice for a very specific criteria -\nscalable, real time web applications.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2011-02-01 10:00:00",
            "slug": "how-i-now-know-node-1",
            "expiry_date": null
        }
    },
    {
        "pk": 9,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "I recently came across the Rosetta Code Project.\nIt&rsquo;s a community contributed wiki that contains hundreds of solutions to\nprogramming problems,\nimplemented in hundreds of different programming\nlanguages, which\nis great source of entertainment for a programming languages enthusiast such\nas myself. The main focus of the project isn&rsquo;t to demonstrate individual\nsolutions on their own, but to provide comparisons between different\nprogramming languages and how they approach the same task.",
            "title": "Grillo, a Terminal Based Chat Server and Client",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "rosetta code python sockets open source",
            "content": "<p>I recently came across the <a href=\"http://rosettacode.org/\">Rosetta Code Project</a>.\nIt&rsquo;s a community contributed wiki that contains <a href=\"http://rosettacode.org/wiki/Category:Programming_Tasks\">hundreds of solutions to\nprogramming problems</a>,\nimplemented in <a href=\"http://rosettacode.org/wiki/Category:Programming_Languages\">hundreds of different programming\nlanguages</a>, which\nis great source of entertainment for a programming languages enthusiast such\nas myself. The main focus of the project isn&rsquo;t to demonstrate individual\nsolutions on their own, but to provide comparisons between different\nprogramming languages and how they approach the same task.</p>\n\n<p>The wiki also contains various dynamic reports, such as <a href=\"http://rosettacode\n.org/wiki/Category:Unimplemented_tasks_by_language\">which tasks have yet\nto be implemented for each particular programming language</a>. I took a look at <a href=\"http://rosettacode.org/wiki/Reports:Tasks_not_implemented_in_Python\">the\nPython\npage</a> to\nsee if there were any interesting tasks remaining that I could potentially\nprovide a solution to, and as I expected there were only a few relatively\nobscure tasks that were yet to have solutions provided.</p>\n\n<p>One task remaining for Python that did catch my eye was to <a href=\"http://rosettacode.org/wiki/Chat_server\">demonstrate a\nsimple chat server using sockets</a>.\nI&rsquo;ve always been especially fond of network programming, from web crawlers to\nXMLRPC to lower level sockets, I seem to really enjoy writing code that runs\nover the Internet without necessarily being related to web development, so I\nwent ahead and added a <a href=\"http://rosettacode.org/wiki/Chat_server#Python\">Python solution for the chat server\ntask</a>.</p>\n\n<p>I honestly had so much fun working on this that I decided to extend it even\nfurther. Firstly I refactored it into a more object oriented approach which\nallowed for creating both server and client tools which could be run\nconcurrently using separate threads of control. I then added several commands\nthat could be run directly in chat by any user, for example listing the\ncurrent users who were logged in.</p>\n\n<p>I then decided to publish the code for my chat server and client onto both\n<a href=\"https://github.com/stephenmcd/grillo\">GitHub</a> and\n<a href=\"https://bitbucket.org/stephenmcd/grillo\">Bitbucket</a>, after giving it the name\n&ldquo;Grillo&rdquo;. It&rsquo;s named after the <a href=\"http://en.wikipedia.org/wiki/Grillo_telephone\">Italian\nphone</a> of the same name,\ndeveloped in 1965. They both share the common theme of being a very small\ncommunications device for their class, while being implemented with relatively\nbasic technology.</p>\n\n<p>Given that there are many richer and more powerful applications available for\nimplementing the features Grillo provides, at the least it serves as a good\nexample of how to do basic socket programming in Python, as well as a\ndemonstrating some simple tricks for controlling threads. At the best case\nsomeone will pick up the code base and extend it further in ways I haven&rsquo;t\nanticipated - here&rsquo;s hoping!</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2011-01-03 10:00:00",
            "slug": "grillo-a-terminal-based-chat-server-and-client",
            "expiry_date": null
        }
    },
    {
        "pk": 34,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "I recently came across the Rosetta Code Project.\nIt&rsquo;s a community contributed wiki that contains hundreds of solutions to\nprogramming problems,\nimplemented in hundreds of different programming\nlanguages, which\nis great source of entertainment for a programming languages enthusiast such\nas myself. The main focus of the project isn&rsquo;t to demonstrate individual\nsolutions on their own, but to provide comparisons between different\nprogramming languages and how they approach the same task.",
            "title": "Grillo, a Terminal Based Chat Server and Client",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "rosetta code python sockets open source",
            "content": "<p>I recently came across the <a href=\"http://rosettacode.org/\">Rosetta Code Project</a>.\nIt&rsquo;s a community contributed wiki that contains <a href=\"http://rosettacode.org/wiki/Category:Programming_Tasks\">hundreds of solutions to\nprogramming problems</a>,\nimplemented in <a href=\"http://rosettacode.org/wiki/Category:Programming_Languages\">hundreds of different programming\nlanguages</a>, which\nis great source of entertainment for a programming languages enthusiast such\nas myself. The main focus of the project isn&rsquo;t to demonstrate individual\nsolutions on their own, but to provide comparisons between different\nprogramming languages and how they approach the same task.</p>\n\n<p>The wiki also contains various dynamic reports, such as <a href=\"http://rosettacode\n.org/wiki/Category:Unimplemented_tasks_by_language\">which tasks have yet\nto be implemented for each particular programming language</a>. I took a look at <a href=\"http://rosettacode.org/wiki/Reports:Tasks_not_implemented_in_Python\">the\nPython\npage</a> to\nsee if there were any interesting tasks remaining that I could potentially\nprovide a solution to, and as I expected there were only a few relatively\nobscure tasks that were yet to have solutions provided.</p>\n\n<p>One task remaining for Python that did catch my eye was to <a href=\"http://rosettacode.org/wiki/Chat_server\">demonstrate a\nsimple chat server using sockets</a>.\nI&rsquo;ve always been especially fond of network programming, from web crawlers to\nXMLRPC to lower level sockets, I seem to really enjoy writing code that runs\nover the Internet without necessarily being related to web development, so I\nwent ahead and added a <a href=\"http://rosettacode.org/wiki/Chat_server#Python\">Python solution for the chat server\ntask</a>.</p>\n\n<p>I honestly had so much fun working on this that I decided to extend it even\nfurther. Firstly I refactored it into a more object oriented approach which\nallowed for creating both server and client tools which could be run\nconcurrently using separate threads of control. I then added several commands\nthat could be run directly in chat by any user, for example listing the\ncurrent users who were logged in.</p>\n\n<p>I then decided to publish the code for my chat server and client onto both\n<a href=\"https://github.com/stephenmcd/grillo\">GitHub</a> and\n<a href=\"https://bitbucket.org/stephenmcd/grillo\">Bitbucket</a>, after giving it the name\n&ldquo;Grillo&rdquo;. It&rsquo;s named after the <a href=\"http://en.wikipedia.org/wiki/Grillo_telephone\">Italian\nphone</a> of the same name,\ndeveloped in 1965. They both share the common theme of being a very small\ncommunications device for their class, while being implemented with relatively\nbasic technology.</p>\n\n<p>Given that there are many richer and more powerful applications available for\nimplementing the features Grillo provides, at the least it serves as a good\nexample of how to do basic socket programming in Python, as well as a\ndemonstrating some simple tricks for controlling threads. At the best case\nsomeone will pick up the code base and extend it further in ways I haven&rsquo;t\nanticipated - here&rsquo;s hoping!</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2011-01-03 10:00:00",
            "slug": "grillo-a-terminal-based-chat-server-and-client-1",
            "expiry_date": null
        }
    },
    {
        "pk": 10,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "2010 was an amazing year for me professionally. I learnt and achieved much\nmore than I&rsquo;ve historically packed into a single year, so like many other I&rsquo;ve\ndecided to jump on the &ldquo;year in review&rdquo; bandwagon and put this post\ntogether.",
            "title": "2010: My Year In Review",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "python django open source mezzanine django dash",
            "content": "<p>2010 was an amazing year for me professionally. I learnt and achieved much\nmore than I&rsquo;ve historically packed into a single year, so like many other I&rsquo;ve\ndecided to jump on the &ldquo;<em>year in review</em>&rdquo; bandwagon and put this post\ntogether.</p>\n\n<h4 id=\"open-source\">Open Source</h4>\n\n<p>Prior to 2010 I&rsquo;d certainly used open source quite heavily, in fact I&rsquo;d based\nmy entire career as a developer around it, focusing on\n<a href=\"http://python.org/\">Python</a>, <a href=\"http://www.djangoproject.com/\">Django</a> and\n<a href=\"http://en.wikipedia.org/wiki/Linux\">Linux</a> and the open source ecosystem\nsurrounding this amazing platform. However as far as giving back to the\ncommunity went, I had only ever contributed small bug fixes and enhancements\nto a handful of open source projects over the years, and had never been\nheavily involved in any single project. So in 2010 I dived in head first\nlaunching a range of open source projects. Firstly some smaller utilities such\nas <a href=\"https://github.com/stephenmcd/django-forms-builder\">django-forms-builder</a>\nand <a href=\"https://github.com/stephenmcd/gunicorn-console\">gunicorn-console</a>, and\nthen the <a href=\"http://mezzanine.jupo.org/\">Django content management platform\nMezzanine</a>, along with its <a href=\"http://cartridge.jupo.org/\">shopping cart plug-in,\nCartridge.</a></p>\n\n<p>The reception Mezzanine has received has been nothing short of amazing and\nwell beyond anything I had anticipated. It&rsquo;s been an incredibly rewarding\nlearning experience, managing product development and working closely with its\ncontributors towards growing its community. Here are a few stats for the\nproject only 6 months since it was launched:</p>\n\n<ul>\n  <li>120 followers and 30 forks across <a href=\"https://github.com/stephenmcd/mezzanine\">GitHub</a> and <a href=\"https://bitbucket.org/stephenmcd/mezzanine\">Bitbucket</a></li>\n  <li>Code contributions from <a href=\"http://mezzanine.jupo.org/docs/colophon.html#authors\">10 developers</a></li>\n  <li>A <a href=\"http://groups.google.com/group/mezzanine-users/topics\">mailing list</a> with over 60 members and over 300 messages</li>\n  <li>Over 4,000 downloads from the <a href=\"http://pypi.python.org/pypi\">Python Package Index</a></li>\n  <li>Almost 9,000 visitors to the <a href=\"http://mezzanine.jupo.org/\">website</a> with over a 50% return rate</li>\n</ul>\n\n<h4 id=\"team-leadership\">Team Leadership</h4>\n\n<p>Shortly prior to 2010 I moved into the role of development team lead and 2010\nprovided me with a wealth of new experience in this regard. Being responsible\nfor a development team producing rock solid work has always been an aspiration\nof mine and it was incredibly fulfilling to have that come to fruition. It&rsquo;s\nbeen a fairly painless experience due to working with some of the best\ndevelopers I&rsquo;ve met in over a decade, and it&rsquo;s been nothing short of amazing.</p>\n\n<h4 id=\"tooling\">Tooling</h4>\n\n<p>I added a ton of new software tools to my arsenal, being largely responsible\nfor building out our development and deployment processes. I spent a lot of\ntime getting up to speed with some amazing software such as\n<a href=\"http://south.aeracode.org/\">South</a>, <a href=\"http://fabfile.org/\">Fabric</a>,\n<a href=\"http://nginx.org/en/\">NGINX</a> and <a href=\"http://gunicorn.org/\">gunicorn</a>. I&rsquo;ve\nrecently been putting together a development and deployment guide that covers\ncombining all of these and other parts of our stack which I&rsquo;ll also publish in\nthe near future, so stay tuned for that.</p>\n\n<h4 id=\"django-dash\">Django Dash</h4>\n\n<p>This was the first year I decided to put my Django skills to the test by\nentering <a href=\"http://djangodash.com/\">Django Dash</a> - the 48 hour hackathon where\nteams of 3 build a Django project from scratch. Teaming up with <a href=\"http://www.joshdeblank.com/\">Josh de\nBlank</a> and <a href=\"http://ajfisher.me/\">Andrew Fisher</a>,\nthe final result saw us launch <a href=\"http://ratemyflight.org\">Rate My Flight</a> which\nearned us 8th place out of 40 teams internationally. It was a ton of fun\ngetting to interact with some of the wider Django community and I even picked\nup a few new Django tricks along the way.</p>\n\n<p>So that was 2010 - what a blast! I can&rsquo;t imagine what 2011 will bring if it\ninvolves as much change and initiative as the previous year has. Bring it on!</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2011-01-01 10:00:00",
            "slug": "2010-my-year-in-review",
            "expiry_date": null
        }
    },
    {
        "pk": 35,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "2010 was an amazing year for me professionally. I learnt and achieved much\nmore than I&rsquo;ve historically packed into a single year, so like many other I&rsquo;ve\ndecided to jump on the year in review bandwagon and put this post\ntogether.",
            "title": "2010: My Year in Review",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "python django open source mezzanine django dash",
            "content": "<p>2010 was an amazing year for me professionally. I learnt and achieved much\nmore than I&rsquo;ve historically packed into a single year, so like many other I&rsquo;ve\ndecided to jump on the <em>year in review</em> bandwagon and put this post\ntogether.</p>\n\n<h4 id=\"open-source\">Open Source</h4>\n\n<p>Prior to 2010 I&rsquo;d certainly used open source quite heavily, in fact I&rsquo;d based\nmy entire career as a developer around it, focusing on\n<a href=\"http://python.org/\">Python</a>, <a href=\"http://www.djangoproject.com/\">Django</a> and\n<a href=\"http://en.wikipedia.org/wiki/Linux\">Linux</a> and the open source ecosystem\nsurrounding this amazing platform. However as far as giving back to the\ncommunity went, I had only ever contributed small bug fixes and enhancements\nto a handful of open source projects over the years, and had never been\nheavily involved in any single project. So in 2010 I dived in head first\nlaunching a range of open source projects. Firstly some smaller utilities such\nas <a href=\"https://github.com/stephenmcd/django-forms-builder\">django-forms-builder</a>\nand <a href=\"https://github.com/stephenmcd/gunicorn-console\">gunicorn-console</a>, and\nthen the <a href=\"http://mezzanine.jupo.org/\">Django content management platform\nMezzanine</a>, along with its <a href=\"http://cartridge.jupo.org/\">shopping cart plug-in,\nCartridge.</a></p>\n\n<p>The reception Mezzanine has received has been nothing short of amazing and\nwell beyond anything I had anticipated. It&rsquo;s been an incredibly rewarding\nlearning experience, managing product development and working closely with its\ncontributors towards growing its community. Here are a few stats for the\nproject only 6 months since it was launched:</p>\n\n<ul>\n  <li>120 followers and 30 forks across <a href=\"https://github.com/stephenmcd/mezzanine\">GitHub</a> and <a href=\"https://bitbucket.org/stephenmcd/mezzanine\">Bitbucket</a></li>\n  <li>Code contributions from <a href=\"http://mezzanine.jupo.org/docs/colophon.html#authors\">10 developers</a></li>\n  <li>A <a href=\"http://groups.google.com/group/mezzanine-users/topics\">mailing list</a> with over 60 members and over 300 messages</li>\n  <li>Over 4,000 downloads from the <a href=\"http://pypi.python.org/pypi\">Python Package Index</a></li>\n  <li>Almost 9,000 visitors to the <a href=\"http://mezzanine.jupo.org/\">website</a> with over a 50% return rate</li>\n</ul>\n\n<h4 id=\"team-leadership\">Team Leadership</h4>\n\n<p>Shortly prior to 2010 I moved into the role of development team lead and 2010\nprovided me with a wealth of new experience in this regard. Being responsible\nfor a development team producing rock solid work has always been an aspiration\nof mine and it was incredibly fulfilling to have that come to fruition. It&rsquo;s\nbeen a fairly painless experience due to working with some of the best\ndevelopers I&rsquo;ve met in over a decade, and it&rsquo;s been nothing short of amazing.</p>\n\n<h4 id=\"tooling\">Tooling</h4>\n\n<p>I added a ton of new software tools to my arsenal, being largely responsible\nfor building out our development and deployment processes. I spent a lot of\ntime getting up to speed with some amazing software such as\n<a href=\"http://south.aeracode.org/\">South</a>, <a href=\"http://fabfile.org/\">Fabric</a>,\n<a href=\"http://nginx.org/en/\">NGINX</a> and <a href=\"http://gunicorn.org/\">gunicorn</a>. I&rsquo;ve\nrecently been putting together a development and deployment guide that covers\ncombining all of these and other parts of our stack which I&rsquo;ll also publish in\nthe near future, so stay tuned for that.</p>\n\n<h4 id=\"django-dash\">Django Dash</h4>\n\n<p>This was the first year I decided to put my Django skills to the test by\nentering <a href=\"http://djangodash.com/\">Django Dash</a> - the 48 hour hackathon where\nteams of 3 build a Django project from scratch. Teaming up with <a href=\"http://www.joshdeblank.com/\">Josh de\nBlank</a> and <a href=\"http://ajfisher.me/\">Andrew Fisher</a>,\nthe final result saw us launch <a href=\"http://ratemyflight.org\">Rate My Flight</a> which\nearned us 8th place out of 40 teams internationally. It was a ton of fun\ngetting to interact with some of the wider Django community and I even picked\nup a few new Django tricks along the way.</p>\n\n<p>So that was 2010 - what a blast! I can&rsquo;t imagine what 2011 will bring if it\ninvolves as much change and initiative as the previous year has. Bring it on!</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2011-01-01 10:00:00",
            "slug": "2010-my-year-in-review-1",
            "expiry_date": null
        }
    },
    {
        "pk": 11,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "Web development technology has come an incredibly long way over the last\ndecade. Unfortunately in local markets like Australia where I reside, the tech\nsector seems to languish years behind the United States and Europe. We saw\nthis happen with broadband adoption at the turn of the century where most\nAustralians were still on dial-up for years after the rest of the world\nenjoyed widely available cable and ADSL.",
            "title": "On Modern Web Development",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "asp.net australia django java open source php security",
            "content": "<p>Web development technology has come an incredibly long way over the last\ndecade. Unfortunately in local markets like Australia where I reside, the tech\nsector seems to languish years behind the United States and Europe. We saw\nthis happen with broadband adoption at the turn of the century where most\nAustralians were still on dial-up for years after the rest of the world\nenjoyed widely available cable and ADSL.</p>\n\n<p>Fast forward to 2010; and the same situation has occurred with web\ndevelopment. Anyone who follows the startup scene focused around San Francisco\nand NYC will be familiar with the most popular development technologies\navailable - <a href=\"http://www.ruby-lang.org/en/\">Ruby</a>,\n<a href=\"http://python.org/\">Python</a>, <a href=\"http://www.scala-lang.org/\">Scala</a> and many\nmore. Contrast this to the Australian space where the majority of development\nhouses have been sitting for many years on technologies such as ASP.NET and\nPHP, which reached their peak in popularity over half a decade ago.</p>\n\n<p>Why are the majority of shops in markets like mine so complacent when it comes\nto their technology stacks? Is it CTOs that haven&rsquo;t written a line of code in\nyears and their fear of the unknown? Is it a lack of willingness to invest in\nkeeping their developers&rsquo; skill-sets up to date and marketable? On these\nthings I can only speculate. What I can speak about knowledgeably however are\nsome of the reasons these latest technologies far outshine their predecessors,\nand if only a single technology manager reads this post and decides to act on\nit then it was well worth the time spent writing it.</p>\n\n<p>We chose <a href=\"http://www.djangoproject.com/\">Django</a> several years ago so that&rsquo;s\nwhat I&rsquo;ll be making reference to in the following comparisons, however you\ncould just as easily swap it out with <a href=\"http://rubyonrails.org/\">Ruby on Rails</a>\nor any other modern platform and the points would be more or less equivalent.</p>\n\n<table align=\"center\" cellpadding=\"8\" cellspacing=\"0\" class=\"compare zebra-striped\"><tr class=\"row1 top\"><th>\n</th><th>ASP.NET</th><th>PHP</th><th>Java</th><th>Django</th></tr><tr class=\"row2\"><th>Efficiency</th><td class=\"n\">\u2718</td><td class=\"n\">\u2718</td><td class=\"n\">\u2718</td><td class=\"y\">\u2714</td></tr><tr class=\"row1\"><th>Security</th><td class=\"n\">\u2718</td><td class=\"n\">\u2718</td><td class=\"y\">\u2714</td><td class=\"y\">\u2714</td></tr><tr class=\"row2\"><th>Freedom</th><td class=\"n\">\u2718</td><td class=\"y\">\u2714</td><td class=\"n\">\u2718</td><td class=\"y\">\u2714</td></tr><tr class=\"row1\"><th>Developers</th><td class=\"y\">\u2714</td><td class=\"y\">\u2714</td><td class=\"y\">\u2714</td><td class=\"n\">\u2718</td></tr><tr class=\"row2\"><th>Mature Applications</th><td class=\"y\">\u2714</td><td class=\"y\">\u2714</td><td class=\"y\">\u2714</td><td class=\"n\">\u2718</td></tr></table>\n\n<h4 id=\"efficiency\">Efficiency</h4>\n\n<p>I recently came across this fantastic quote:</p>\n\n<blockquote>\n  <p>&ldquo;IDEs: a form of automation needed when the environment in question erects\nartificial barriers.&rdquo;</p>\n</blockquote>\n\n<p>Have you ever tried writing C# or Java in a plain text editor? It is an\nexercise in futility as these languages sport incredibly verbose syntax and\ndeeply nested libraries which require specialised tools simply to write code.\nWhat about the developer that needs to work with all of these different\ntechnologies each day, can they be expected to be experts in several different\nIDEs and switch between them freely? If only these different programming\nenvironments could be used from the same editor - what a joy it would be as a\npracticing polyglot!</p>\n\n<p>On the plus side languages like C# and Java are relatively clean and\nconsistant when compared to abominations such as PHP, which truly is a\ndisorganized mess - functions named using both verb_noun and noun_verb, lots\nof similar functions with no apparent naming convention (Eg: <code>sort()</code>,\n<code>arsort()</code>, <code>asort()</code>, <code>ksort()</code>, <code>natsort()</code>, <code>natcasesort()</code>, <code>rsort()</code>,\n<code>usort()</code>, <code>array_multisort()</code>, <code>uksort()</code>) and a weak type system that can\nlead to bugs which are difficult to discover.</p>\n\n<p>These languages stand in great contrast to modern dynamic languages such as\nPython and Ruby. Ask any Python or Ruby developer which IDE they use and the\nmajority of them will tell you they don&rsquo;t need one. These languages are terse,\nuse flat heirarchies in their libraries and are incredibly expressive.</p>\n\n<h4 id=\"security\">Security</h4>\n\n<p>Aside from the recent <a href=\"http://securitytracker.com/alerts/2010/Sep/1024459.html\">Padding Oracle\nExploit</a>, ASP.NET has\nremained fairly secure over the years. Unfortunately the other parts of the\nstack, IIS and SQL Server, that it&rsquo;s exclusively tied to have been the\npunching bag of the network security world throughout the last decade with\nviruses such as <a href=\"http://en.wikipedia.org/wiki/Code_Red_(computer_worm)\">Code\nRed,</a> <a href=\"http://en.wikipedia.org/wiki/SQL_Slammer\">SQL\nSlammer</a> and more, leaving countless\nwebsites either defaced or knocked entirely offline. With a track record like\nthis it truly is a wonder how anyone would knowingly choose to build public\nfacing Internet services based on a Windows stack.</p>\n\n<p>Inversely we have PHP that while typically deployed on a LAMP stack built with\nsecurity in mind, the language itself makes writing secure applications an\nextemely disciplined task. One need look no further than the <a href=\"http://secunia.com/advisories/product/6745/?task=advisories\">ongoing range of\nsecurity issues</a>\nthat have plagued applications such as Wordpress over the years: SQL\ninjection, cross site scripting (XSS), remote code execution - it&rsquo;s like an\nall-you-can-eat smorgasbord of web application exploits.</p>\n\n<p>Django in contrast runs on top of a secure LAMP stack and is designed from the\nground up with security in mind. It&rsquo;s protected by default against SQL\ninjection, XSS and cross site request forgeries. A developer would actually\nhave to make a concerted effort to create an exploitable Django application.\nAlso like many open source projects a security issue in Django isn&rsquo;t dealt\nwith because a corporation deems it to be the most cost effective decision. In\nthe very few and far between occasions when security issues have inevitably\nbeen discovered, turn-around time for resolving these has been within a 24\nhour period - not weeks or even months as is often the case with corporate\nvendors that lack the agility and motivation to act responsibly.</p>\n\n<h4 id=\"freedom\">Freedom</h4>\n\n<p>A common misconception about open source software is that it lacks the\nreliability of support that comes with choosing a commercial vendor. This is a\nshort sighted view now plaguing many businesses. When Microsoft introduced\n.NET it made the skill-sets of thousands of VB developers redundant. What\nhappens when Microsoft announces that .NET is to be deprecated in their next\ntechnical adventure? The problem here is that a public company with an\nobligation to generate as much profit as it can controls the technology path\nof billions of dollars of software. Sometimes it&rsquo;s in their best financial\ninterest to create fantastic technology, and sometimes it&rsquo;s in their best\nfinancial interest to tear it all down again.</p>\n\n<p>There is then the issue of acquisition. Companies like Microsoft and Oracle\nhave a long and successful history of acquiring their competitors simply to\ndiscontinue their competing technology - let&rsquo;s hope the vendor you&rsquo;re in bed\nwith isn&rsquo;t <em>too</em> good.</p>\n\n<p>Even Java, which for all intents and purposes is an open source technology has\nrecently shown that it isn&rsquo;t immune to the flaw of corporate ownership with\n<a href=\"http://news.cnet.com/8301-30684_3-20013546-265.html\">Oracle suing Google</a>\nover its use on Android phones. Will Android developers find that their time\nand effort invested in this platform will all be for naught?</p>\n\n<p>Python and Django are both licensed under <a href=\"http://en.wikipedia.org/wiki/Permissive_free_software_license\">Permissive Free Software\nLicenses</a>,\nwhich allow anyone to go ahead and do whatever the hell they like with them.\nThey are owned by the <a href=\"http://www.python.org/psf/\">Python Software Foundation</a>\nand the <a href=\"http://www.djangoproject.com/foundation/\">Django Software Foundation</a>\nrespectively. These are non-profit bodies that for the most part exist to\nenforce the IP rights of each technology. These technologies are community\ndriven with one goal in mind: to create best of breed technology. There is no\nfinancial motivation here and so we thus find ultimate reliability with this\nsoftware stack being impervious to the risks described above - it cannot be\nmade redundant by any financially driven corporate strategy as the licensing\nand foundations have been specifically put in place to prevent this from being\npossible. An interesting corollary to this is that these technologies go\nrelatively unheard of without the backing of large corporations promoting\nthem. Next time you&rsquo;re the target of a technology sales pitch consider the\nhigh likelihood that you&rsquo;re not looking at the best technology in its given\napplication domain - best of breed doesn&rsquo;t need to be sold at all, it sells\nitself.</p>\n\n<h4 id=\"developers\">Developers</h4>\n\n<p>ASP.NET, Java and PHP developers outnumber Python and Ruby developers by the\nhundreds if not thousands. This is a great selling point to technical decision\nmakers - the ability to quickly and easily hire developers when the need\narises is critical. But what of the quality of these developers? An\ninteresting question to pose is why a developer who specializes in .NET or PHP\nchose their particular technology. Answer: because that&rsquo;s what everyone else\nuses. You certainly won&rsquo;t find a developer who has gone out and thoroughly\ninvestigated a broad range of different languages coming back and choosing\n.NET over everything else. Those who have done so have chosen their languages\non its technical merits. These are the passionate developers with a love for\ntheir craft, not those who are merely in it for a paycheck and whose\nworkmanship will reflect as much. Paul Graham referred to this in 2004 in his\nincredibly insightful essay <a href=\"http://www.paulgraham.com/pypar.html\">The Python\nParadox</a>.</p>\n\n<h4 id=\"mature-applications\">Mature Applications</h4>\n\n<p>The final point I&rsquo;d like to cover is the maturity of applications developed on\ntop of any given platform. This is where modern languages fall short as by\ndefinition they simply haven&rsquo;t gained enough penetration for mature\napplications to have been developed yet. This is where there is opportunity.\nThis is where the next generation of mature web applications will be built\nusing web application frameworks like <a href=\"http://www.djangoproject.com/\">Django</a>\nand <a href=\"http://rubyonrails.org/\">Rails</a> that are designed from the ground up for\nrapid customization over long software life-cycles while maintaining the\noriginal design integrity of your application - something only a very\ndisciplined developer can maintain with something like PHP, which in almost\nall cases will eventually end up as spaghetti code.</p>\n\n<p>Applications like <a href=\"http://wordpress.org/\">Wordpress</a> and\n<a href=\"http://www.magentocommerce.com/\">Magento</a> may work fine off the shelf for an\nend user, but what type of path have you created for your customer by\nimplementing technology that gets closer and closer to its end of life the\nmore it&rsquo;s customized?</p>\n\n<p>In conclusion - developers and CEOs, challenge your technical decision makers\nto overcome their complacency and invest in technology of the future. Push\nyour employer, your peers and most importantly yourself forward. Invest your\ntime in efficient, secure and unencumbered technology.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2010-09-28 10:00:00",
            "slug": "on-modern-web-development",
            "expiry_date": null
        }
    },
    {
        "pk": 36,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "Web development technology has come an incredibly long way over the last\ndecade. Unfortunately in local markets like Australia where I reside, the tech\nsector seems to languish years behind the United States and Europe. We saw\nthis happen with broadband adoption at the turn of the century where most\nAustralians were still on dial-up for years after the rest of the world\nenjoyed widely available cable and ADSL.",
            "title": "On Modern Web Development",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "asp.net australia django java open source php security",
            "content": "<p>Web development technology has come an incredibly long way over the last\ndecade. Unfortunately in local markets like Australia where I reside, the tech\nsector seems to languish years behind the United States and Europe. We saw\nthis happen with broadband adoption at the turn of the century where most\nAustralians were still on dial-up for years after the rest of the world\nenjoyed widely available cable and ADSL.</p>\n\n<p>Fast forward to 2010; and the same situation has occurred with web\ndevelopment. Anyone who follows the startup scene focused around San Francisco\nand NYC will be familiar with the most popular development technologies\navailable - <a href=\"http://www.ruby-lang.org/en/\">Ruby</a>,\n<a href=\"http://python.org/\">Python</a>, <a href=\"http://www.scala-lang.org/\">Scala</a> and many\nmore. Contrast this to the Australian space where the majority of development\nhouses have been sitting for many years on technologies such as ASP.NET and\nPHP, which reached their peak in popularity over half a decade ago.</p>\n\n<p>Why are the majority of shops in markets like mine so complacent when it comes\nto their technology stacks? Is it CTOs that haven&rsquo;t written a line of code in\nyears and their fear of the unknown? Is it a lack of willingness to invest in\nkeeping their developers&rsquo; skill-sets up to date and marketable? On these\nthings I can only speculate. What I can speak about knowledgeably however are\nsome of the reasons these latest technologies far outshine their predecessors,\nand if only a single technology manager reads this post and decides to act on\nit then it was well worth the time spent writing it.</p>\n\n<p>We chose <a href=\"http://www.djangoproject.com/\">Django</a> several years ago so that&rsquo;s\nwhat I&rsquo;ll be making reference to in the following comparisons, however you\ncould just as easily swap it out with <a href=\"http://rubyonrails.org/\">Ruby on Rails</a>\nor any other modern platform and the points would be more or less equivalent.</p>\n\n<table align=\"center\" cellpadding=\"8\" cellspacing=\"0\" class=\"compare zebra-striped\"><tr class=\"row1 top\"><th>\n</th><th>ASP.NET</th><th>PHP</th><th>Java</th><th>Django</th></tr><tr class=\"row2\"><th>Efficiency</th><td class=\"n\">\u2718</td><td class=\"n\">\u2718</td><td class=\"n\">\u2718</td><td class=\"y\">\u2714</td></tr><tr class=\"row1\"><th>Security</th><td class=\"n\">\u2718</td><td class=\"n\">\u2718</td><td class=\"y\">\u2714</td><td class=\"y\">\u2714</td></tr><tr class=\"row2\"><th>Freedom</th><td class=\"n\">\u2718</td><td class=\"y\">\u2714</td><td class=\"n\">\u2718</td><td class=\"y\">\u2714</td></tr><tr class=\"row1\"><th>Developers</th><td class=\"y\">\u2714</td><td class=\"y\">\u2714</td><td class=\"y\">\u2714</td><td class=\"n\">\u2718</td></tr><tr class=\"row2\"><th>Mature Applications</th><td class=\"y\">\u2714</td><td class=\"y\">\u2714</td><td class=\"y\">\u2714</td><td class=\"n\">\u2718</td></tr></table>\n\n<h4 id=\"efficiency\">Efficiency</h4>\n\n<p>I recently came across this fantastic quote:</p>\n\n<blockquote>\n  <p>&ldquo;IDEs: a form of automation needed when the environment in question erects\nartificial barriers.&rdquo;</p>\n</blockquote>\n\n<p>Have you ever tried writing C# or Java in a plain text editor? It is an\nexercise in futility as these languages sport incredibly verbose syntax and\ndeeply nested libraries which require specialised tools simply to write code.\nWhat about the developer that needs to work with all of these different\ntechnologies each day, can they be expected to be experts in several different\nIDEs and switch between them freely? If only these different programming\nenvironments could be used from the same editor - what a joy it would be as a\npracticing polyglot!</p>\n\n<p>On the plus side languages like C# and Java are relatively clean and\nconsistant when compared to abominations such as PHP, which truly is a\ndisorganized mess - functions named using both verb_noun and noun_verb, lots\nof similar functions with no apparent naming convention (Eg: <code>sort()</code>,\n<code>arsort()</code>, <code>asort()</code>, <code>ksort()</code>, <code>natsort()</code>, <code>natcasesort()</code>, <code>rsort()</code>,\n<code>usort()</code>, <code>array_multisort()</code>, <code>uksort()</code>) and a weak type system that can\nlead to bugs which are difficult to discover.</p>\n\n<p>These languages stand in great contrast to modern dynamic languages such as\nPython and Ruby. Ask any Python or Ruby developer which IDE they use and the\nmajority of them will tell you they don&rsquo;t need one. These languages are terse,\nuse flat heirarchies in their libraries and are incredibly expressive.</p>\n\n<h4 id=\"security\">Security</h4>\n\n<p>Aside from the recent <a href=\"http://securitytracker.com/alerts/2010/Sep/1024459.html\">Padding Oracle\nExploit</a>, ASP.NET has\nremained fairly secure over the years. Unfortunately the other parts of the\nstack, IIS and SQL Server, that it&rsquo;s exclusively tied to have been the\npunching bag of the network security world throughout the last decade with\nviruses such as <a href=\"http://en.wikipedia.org/wiki/Code_Red_(computer_worm)\">Code\nRed,</a> <a href=\"http://en.wikipedia.org/wiki/SQL_Slammer\">SQL\nSlammer</a> and more, leaving countless\nwebsites either defaced or knocked entirely offline. With a track record like\nthis it truly is a wonder how anyone would knowingly choose to build public\nfacing Internet services based on a Windows stack.</p>\n\n<p>Inversely we have PHP that while typically deployed on a LAMP stack built with\nsecurity in mind, the language itself makes writing secure applications an\nextemely disciplined task. One need look no further than the <a href=\"http://secunia.com/advisories/product/6745/?task=advisories\">ongoing range of\nsecurity issues</a>\nthat have plagued applications such as Wordpress over the years: SQL\ninjection, cross site scripting (XSS), remote code execution - it&rsquo;s like an\nall-you-can-eat smorgasbord of web application exploits.</p>\n\n<p>Django in contrast runs on top of a secure LAMP stack and is designed from the\nground up with security in mind. It&rsquo;s protected by default against SQL\ninjection, XSS and cross site request forgeries. A developer would actually\nhave to make a concerted effort to create an exploitable Django application.\nAlso like many open source projects a security issue in Django isn&rsquo;t dealt\nwith because a corporation deems it to be the most cost effective decision. In\nthe very few and far between occasions when security issues have inevitably\nbeen discovered, turn-around time for resolving these has been within a 24\nhour period - not weeks or even months as is often the case with corporate\nvendors that lack the agility and motivation to act responsibly.</p>\n\n<h4 id=\"freedom\">Freedom</h4>\n\n<p>A common misconception about open source software is that it lacks the\nreliability of support that comes with choosing a commercial vendor. This is a\nshort sighted view now plaguing many businesses. When Microsoft introduced\n.NET it made the skill-sets of thousands of VB developers redundant. What\nhappens when Microsoft announces that .NET is to be deprecated in their next\ntechnical adventure? The problem here is that a public company with an\nobligation to generate as much profit as it can controls the technology path\nof billions of dollars of software. Sometimes it&rsquo;s in their best financial\ninterest to create fantastic technology, and sometimes it&rsquo;s in their best\nfinancial interest to tear it all down again.</p>\n\n<p>There is then the issue of acquisition. Companies like Microsoft and Oracle\nhave a long and successful history of acquiring their competitors simply to\ndiscontinue their competing technology - let&rsquo;s hope the vendor you&rsquo;re in bed\nwith isn&rsquo;t <em>too</em> good.</p>\n\n<p>Even Java, which for all intents and purposes is an open source technology has\nrecently shown that it isn&rsquo;t immune to the flaw of corporate ownership with\n<a href=\"http://news.cnet.com/8301-30684_3-20013546-265.html\">Oracle suing Google</a>\nover its use on Android phones. Will Android developers find that their time\nand effort invested in this platform will all be for naught?</p>\n\n<p>Python and Django are both licensed under <a href=\"http://en.wikipedia.org/wiki/Permissive_free_software_license\">Permissive Free Software\nLicenses</a>,\nwhich allow anyone to go ahead and do whatever the hell they like with them.\nThey are owned by the <a href=\"http://www.python.org/psf/\">Python Software Foundation</a>\nand the <a href=\"http://www.djangoproject.com/foundation/\">Django Software Foundation</a>\nrespectively. These are non-profit bodies that for the most part exist to\nenforce the IP rights of each technology. These technologies are community\ndriven with one goal in mind: to create best of breed technology. There is no\nfinancial motivation here and so we thus find ultimate reliability with this\nsoftware stack being impervious to the risks described above - it cannot be\nmade redundant by any financially driven corporate strategy as the licensing\nand foundations have been specifically put in place to prevent this from being\npossible. An interesting corollary to this is that these technologies go\nrelatively unheard of without the backing of large corporations promoting\nthem. Next time you&rsquo;re the target of a technology sales pitch consider the\nhigh likelihood that you&rsquo;re not looking at the best technology in its given\napplication domain - best of breed doesn&rsquo;t need to be sold at all, it sells\nitself.</p>\n\n<h4 id=\"developers\">Developers</h4>\n\n<p>ASP.NET, Java and PHP developers outnumber Python and Ruby developers by the\nhundreds if not thousands. This is a great selling point to technical decision\nmakers - the ability to quickly and easily hire developers when the need\narises is critical. But what of the quality of these developers? An\ninteresting question to pose is why a developer who specializes in .NET or PHP\nchose their particular technology. Answer: because that&rsquo;s what everyone else\nuses. You certainly won&rsquo;t find a developer who has gone out and thoroughly\ninvestigated a broad range of different languages coming back and choosing\n.NET over everything else. Those who have done so have chosen their languages\non its technical merits. These are the passionate developers with a love for\ntheir craft, not those who are merely in it for a paycheck and whose\nworkmanship will reflect as much. Paul Graham referred to this in 2004 in his\nincredibly insightful essay <a href=\"http://www.paulgraham.com/pypar.html\">The Python\nParadox</a>.</p>\n\n<h4 id=\"mature-applications\">Mature Applications</h4>\n\n<p>The final point I&rsquo;d like to cover is the maturity of applications developed on\ntop of any given platform. This is where modern languages fall short as by\ndefinition they simply haven&rsquo;t gained enough penetration for mature\napplications to have been developed yet. This is where there is opportunity.\nThis is where the next generation of mature web applications will be built\nusing web application frameworks like <a href=\"http://www.djangoproject.com/\">Django</a>\nand <a href=\"http://rubyonrails.org/\">Rails</a> that are designed from the ground up for\nrapid customization over long software life-cycles while maintaining the\noriginal design integrity of your application - something only a very\ndisciplined developer can maintain with something like PHP, which in almost\nall cases will eventually end up as spaghetti code.</p>\n\n<p>Applications like <a href=\"http://wordpress.org/\">Wordpress</a> and\n<a href=\"http://www.magentocommerce.com/\">Magento</a> may work fine off the shelf for an\nend user, but what type of path have you created for your customer by\nimplementing technology that gets closer and closer to its end of life the\nmore it&rsquo;s customized?</p>\n\n<p>In conclusion - developers and CEOs, challenge your technical decision makers\nto overcome their complacency and invest in technology of the future. Push\nyour employer, your peers and most importantly yourself forward. Invest your\ntime in efficient, secure and unencumbered technology.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2010-09-28 10:00:00",
            "slug": "on-modern-web-development-1",
            "expiry_date": null
        }
    },
    {
        "pk": 12,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "I&rsquo;m happy to announce the first release of\nCartridge - a\nDjango shopping cart application I started\nworking on back in 2009. The development path that Cartridge has taken has\nbeen a strange one. I stopped working on it throughout 2010 in order to get\nthe ball rolling with a project called Mezzanine\nthat I&rsquo;ve blogged about previously. Many parts of Mezzanine actually\noriginated in Cartridge and once development of Mezzanine was well under way\nit made the most sense for continued development of Cartridge to occur as a\nplug-in for Mezzanine which has now come to fruition.",
            "title": "Plugging In Cartridge",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "django python mezzanine cartridge ecommerce",
            "content": "<p>I&rsquo;m happy to announce the first release of\n<a href=\"http://cartridge.jupo.org/\">Cartridge</a> - a\n<a href=\"http://djangoproject.com/\">Django</a> shopping cart application I started\nworking on back in 2009. The development path that Cartridge has taken has\nbeen a strange one. I stopped working on it throughout 2010 in order to get\nthe ball rolling with a project called <a href=\"http://mezzanine.jupo.org/\">Mezzanine</a>\nthat I&rsquo;ve <a href=\"http://blog.jupo.org/2010/06/11\n/mezzanine-just-another-django-cms/\">blogged about previously</a>. Many parts of Mezzanine actually\noriginated in Cartridge and once development of Mezzanine was well under way\nit made the most sense for continued development of Cartridge to occur as a\nplug-in for Mezzanine which has now come to fruition.</p>\n\n<p>Beyond creating a kick-ass shopping cart application for Django, the main\ndesign goal I originally had for Cartridge was to address some of the mistakes\nI felt existed in other offerings available both within and outside of the\nDjango community. These areas I&rsquo;ve aimed to address are as follows:</p>\n\n<h4 id=\"performance\">Performance</h4>\n\n<p>The <a href=\"http://docs.djangoproject.com/en/dev/topics/db/models/\">Django ORM</a> is a\ndouble-edged sword that while saving you a lot of time can also do a lot of\ndamage when used without regard to the underlying SQL queries being performed.\nI&rsquo;ve come across examples in templates where queries are being performed\ninside loops nested inside more loops resulting in abysmal performance. Fixing\nthese problems wasn&rsquo;t simply a case of refactoring template logic as these\nissues were core to the design of how prices and variations were modelled. The\nonly solution was to throw a ton of fine-grained\n<a href=\"http://memcached.org\">memcached</a> usage at the problem, but this should be a\noptional approach to scalability - not a minimum requirement for keeping the\nsite from falling offline. Cartridge has been designed with performance in\nmind from the start with a range of denormalized data structures providing\nO(n) performance as the number of products and categories grow.</p>\n\n<h4 id=\"intuitive-interfaces\">Intuitive Interfaces</h4>\n\n<p>An end user should be able to use an admin system for the first time and\ndiscover an interface that is logical and intuitive. Having to go through a\nhandful of screens to set up a single product requires users to mentally train\nthemselves to remember a work-flow that isn&rsquo;t entirely natural. If the former\nis achievable then the latter is definitely unacceptable. The number of forms\nand fields in an interface can be described as a conversation between the\nsystem and its user, and this conversation should be as quick and painless as\npossible. Cartridge provides single interfaces for creating products,\ncategories, discounts and other types of shop data, with only applicable\nfields making up these forms.</p>\n\n<h4 id=\"bloated-code\">Bloated Code</h4>\n\n<p>Having a system that implements every single feature that might ever be\nrequired in a shopping cart implementation certainly makes for an easy sell,\nhowever as this list grows these features become more obscure and less likely\nto be required in an average implementation. This can result in a convoluted\ncode base that is very difficult to apply customizations to - an inevitable\nrequirement given the unique nature of shopping cart implementations.\nCartridge addresses this issue by implementing only the features typically\nrequired by all shopping cart implementations, leaving custom features up to\nthe developer who will find that due to a tight feature list that the code\nbase and data models remain very clean and easy to work with.</p>\n\n<p>Aside from these features that distinguish it from other shopping cart\napplications, Cartridge comes with a standard set of features that you&rsquo;d\nexpect to find:</p>\n\n<ul>\n  <li>Hierarchical categories (via Mezzanine pages)</li>\n  <li>Easily configurable product options (colours, sizes, etc)</li>\n  <li>Hooks for shipping calculations and payment gateway</li>\n  <li>Sale pricing and discount codes</li>\n  <li>Stock management</li>\n  <li>Product popularity</li>\n  <li>Thumbnail generation</li>\n  <li>Built-in test suite</li>\n  <li>Separation of presentation (no embedded markup)</li>\n  <li>Smart categories (by price range, colour, etc)</li>\n  <li>Configurable number of checkout steps</li>\n</ul>\n\n<p>The <a href=\"http://mezzanine.jupo.org/\">live demo of Mezzanine</a> now includes\nCartridge so go ahead and try it out! If you&rsquo;re interested in hacking on\nCartridge then the source code is freely available under a <a href=\"http://www.linfo.org/bsdlicense.html\">BSD\nlicense</a> at both\n<a href=\"http://github.com/stephenmcd/cartridge\">github</a> and\n<a href=\"http://bitbucket.org/stephenmcd/cartridge\">bitbucket</a>.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2010-09-21 10:00:00",
            "slug": "plugging-in-cartridge",
            "expiry_date": null
        }
    },
    {
        "pk": 37,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "I&rsquo;m happy to announce the first release of\nCartridge - a\nDjango shopping cart application I started\nworking on back in 2009. The development path that Cartridge has taken has\nbeen a strange one. I stopped working on it throughout 2010 in order to get\nthe ball rolling with a project called Mezzanine\nthat I&rsquo;ve blogged about previously. Many parts of Mezzanine actually\noriginated in Cartridge and once development of Mezzanine was well under way\nit made the most sense for continued development of Cartridge to occur as a\nplug-in for Mezzanine which has now come to fruition.",
            "title": "Plugging In Cartridge",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "django python mezzanine cartridge ecommerce",
            "content": "<p>I&rsquo;m happy to announce the first release of\n<a href=\"http://cartridge.jupo.org/\">Cartridge</a> - a\n<a href=\"http://djangoproject.com/\">Django</a> shopping cart application I started\nworking on back in 2009. The development path that Cartridge has taken has\nbeen a strange one. I stopped working on it throughout 2010 in order to get\nthe ball rolling with a project called <a href=\"http://mezzanine.jupo.org/\">Mezzanine</a>\nthat I&rsquo;ve <a href=\"http://blog.jupo.org/2010/06/11\n/mezzanine-just-another-django-cms/\">blogged about previously</a>. Many parts of Mezzanine actually\noriginated in Cartridge and once development of Mezzanine was well under way\nit made the most sense for continued development of Cartridge to occur as a\nplug-in for Mezzanine which has now come to fruition.</p>\n\n<p>Beyond creating a kick-ass shopping cart application for Django, the main\ndesign goal I originally had for Cartridge was to address some of the mistakes\nI felt existed in other offerings available both within and outside of the\nDjango community. These areas I&rsquo;ve aimed to address are as follows:</p>\n\n<h4 id=\"performance\">Performance</h4>\n\n<p>The <a href=\"http://docs.djangoproject.com/en/dev/topics/db/models/\">Django ORM</a> is a\ndouble-edged sword that while saving you a lot of time can also do a lot of\ndamage when used without regard to the underlying SQL queries being performed.\nI&rsquo;ve come across examples in templates where queries are being performed\ninside loops nested inside more loops resulting in abysmal performance. Fixing\nthese problems wasn&rsquo;t simply a case of refactoring template logic as these\nissues were core to the design of how prices and variations were modelled. The\nonly solution was to throw a ton of fine-grained\n<a href=\"http://memcached.org\">memcached</a> usage at the problem, but this should be a\noptional approach to scalability - not a minimum requirement for keeping the\nsite from falling offline. Cartridge has been designed with performance in\nmind from the start with a range of denormalized data structures providing\nO(n) performance as the number of products and categories grow.</p>\n\n<h4 id=\"intuitive-interfaces\">Intuitive Interfaces</h4>\n\n<p>An end user should be able to use an admin system for the first time and\ndiscover an interface that is logical and intuitive. Having to go through a\nhandful of screens to set up a single product requires users to mentally train\nthemselves to remember a work-flow that isn&rsquo;t entirely natural. If the former\nis achievable then the latter is definitely unacceptable. The number of forms\nand fields in an interface can be described as a conversation between the\nsystem and its user, and this conversation should be as quick and painless as\npossible. Cartridge provides single interfaces for creating products,\ncategories, discounts and other types of shop data, with only applicable\nfields making up these forms.</p>\n\n<h4 id=\"bloated-code\">Bloated Code</h4>\n\n<p>Having a system that implements every single feature that might ever be\nrequired in a shopping cart implementation certainly makes for an easy sell,\nhowever as this list grows these features become more obscure and less likely\nto be required in an average implementation. This can result in a convoluted\ncode base that is very difficult to apply customizations to - an inevitable\nrequirement given the unique nature of shopping cart implementations.\nCartridge addresses this issue by implementing only the features typically\nrequired by all shopping cart implementations, leaving custom features up to\nthe developer who will find that due to a tight feature list that the code\nbase and data models remain very clean and easy to work with.</p>\n\n<p>Aside from these features that distinguish it from other shopping cart\napplications, Cartridge comes with a standard set of features that you&rsquo;d\nexpect to find:</p>\n\n<ul>\n  <li>Hierarchical categories (via Mezzanine pages)</li>\n  <li>Easily configurable product options (colours, sizes, etc)</li>\n  <li>Hooks for shipping calculations and payment gateway</li>\n  <li>Sale pricing and discount codes</li>\n  <li>Stock management</li>\n  <li>Product popularity</li>\n  <li>Thumbnail generation</li>\n  <li>Built-in test suite</li>\n  <li>Separation of presentation (no embedded markup)</li>\n  <li>Smart categories (by price range, colour, etc)</li>\n  <li>Configurable number of checkout steps</li>\n</ul>\n\n<p>The <a href=\"http://mezzanine.jupo.org/\">live demo of Mezzanine</a> now includes\nCartridge so go ahead and try it out! If you&rsquo;re interested in hacking on\nCartridge then the source code is freely available under a <a href=\"http://www.linfo.org/bsdlicense.html\">BSD\nlicense</a> at both\n<a href=\"http://github.com/stephenmcd/cartridge\">github</a> and\n<a href=\"http://bitbucket.org/stephenmcd/cartridge\">bitbucket</a>.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2010-09-21 10:00:00",
            "slug": "plugging-in-cartridge-1",
            "expiry_date": null
        }
    },
    {
        "pk": 13,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "You&rsquo;d be forgiven for reading the title of this post and thinking it&rsquo;s about a\ncrazy approach to project briefing that somehow mimics open source development\n- as interesting as that sounds, it isn&rsquo;t the case and my motives are much\nmore simplistic and sinister. What I&rsquo;d like to do here is put a brief together\nfor an open source project called Mezzanine. This\nbrief isn&rsquo;t specifically geared towards programmers so if you think this isn&rsquo;t\nfor you then please continue reading and let me prove you wrong.",
            "title": "An Open Source Brief",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "python django open source mezzanine",
            "content": "<p>You&rsquo;d be forgiven for reading the title of this post and thinking it&rsquo;s about a\ncrazy approach to project briefing that somehow mimics open source development\n- as interesting as that sounds, it isn&rsquo;t the case and my motives are much\nmore simplistic and sinister. What I&rsquo;d like to do here is put a brief together\nfor an open source project called <a href=\"http://mezzanine.jupo.org\">Mezzanine</a>. This\nbrief isn&rsquo;t specifically geared towards programmers so if you think this isn&rsquo;t\nfor you then please continue reading and let me prove you wrong.</p>\n\n<p><em>What is Mezzanine?</em></p>\n\n<p>Anyone who <a href=\"http://twitter.com/stephen_mcd\">follows my updates</a> will know it&rsquo;s\nan open source CMS framework I&rsquo;ve been working on over the last couple of\nmonths. It now has a <a href=\"http://mezzanine.jupo.org/docs/overview.html#features\">concrete feature\nset</a> having come\nremarkably far in a very short amount of time. This might lead you to believe\nan entire team of people have been working on it but in fact it&rsquo;s mostly been\nmyself alone - it&rsquo;s thanks to the incredibly rapid development that using\n<a href=\"http://djangoproject.com\">Django</a> brings you that so much has been done so\nquickly. For those readers who aren&rsquo;t familiar with it please go ahead and\ncheck out the <a href=\"http://mezzanine.jupo.org/docs/overview.html\">overview</a> in the\n<a href=\"http://mezzanine.jupo.org/docs/\">documentation</a>, play around with the <a href=\"http://mezzanine.jupo.org/blog/\">live\ndemo</a> and have a read of my <a href=\"http://blog.jupo.org/2010/06/11/mezzanine-just-another-django-cms/\">previous blog\npost</a> that\ntalks about why I started Mezzanine and what I hope to achieve.</p>\n\n<p><em>Why would I want to help?</em></p>\n\n<p>Perhaps you&rsquo;re an end user of a poorly designed CMS and you&rsquo;ve often wished\nyou could do something about it. Perhaps you&rsquo;re a developer that&rsquo;s had the\nunfortunate experience of trying to extend a seemingly user-friendly CMS\nthat&rsquo;s built using archaic technology, and wished you could be working with\nsomething that&rsquo;s much more cutting edge and elegantly designed. Perhaps you&rsquo;re\nsomeone who &ldquo;gets&rdquo; open source at a deeper level but always felt as someone\nwho isn&rsquo;t a coder that you couldn&rsquo;t contribute. Perhaps you&rsquo;re in business\ndevelopment and you&rsquo;re tired of trying to sell &ldquo;enterprise&rdquo; crap with\ncompletely absurd price tags. If you have anything to do with web development\nthen there&rsquo;s something in this for you.</p>\n\n<p><em>What do I get out of it?</em></p>\n\n<p>As much as you put in of course. The experience of contributing to open source\nsoftware on paper can often be a competitive advantage over other candidates\nfor a job interview or even development contracts for your business. There&rsquo;s\nalso the chance of notoriety - imagine being responsible for the user\ninterface or branding of the next <a href=\"http://wordpress.org/\">Wordpress</a>. Imagine\nyour staff are core contributors to one of the web&rsquo;s leading development\ntools. Again the success of the project will only match its contributions so\nit&rsquo;s ultimately up to you.</p>\n\n<p><em>What can I do to help?</em></p>\n\n<p>A common misconception about open source software is that it&rsquo;s something that\nonly coders can participate in. Unfortunately the result of this is that the\nmajority of open source software ends up being only contributed to by coders\nand is incredibly lacking in a variety of areas. I&rsquo;m talking about visual\nbranding, copy-writing, UI development - all these areas that fall outside of\ncoding but are equally crucial in successfully shipping a professional piece\nof software. Mezzanine has now reached a point where it can only continue to\nmove forward at a consistent pace by bringing in these skills that I don&rsquo;t\nspecialise in. So without further ado, here are the specific roles I think\nneed filling and what the focus of each would be.</p>\n\n<h4 id=\"graphic-designer\">Graphic Designer</h4>\n\n<p>The entire project is desperately in need of some visual love. At the simplest\nlevel it could really use some basic branding such as a logo and &ldquo;powered by&rdquo;\nbuttons. Then there&rsquo;s the <a href=\"http://mezzanine.jupo.org\">Mezzanine website</a>,\n<a href=\"http://mezzanine.jupo.org/docs/\">documentation</a> and <a href=\"http://mezzanine.jupo.org/blog/\">default\nsite</a> that are all currently quite spartan\nlooking.</p>\n\n<h4 id=\"interface-developer\">Interface Developer</h4>\n\n<p>So far the template mark-up for the default site is as minimal as can be.\nWhile this is intentional to some extent in order to best serve those that\nwould come along and customise it for their projects, I think this idea could\nbe improved upon with a greater level of modularity. I&rsquo;m also keen to\nintroduce a CSS framework like <a href=\"http://blueprintcss.org/\">Blueprint</a> into the\ndefault site. Once that&rsquo;s all in order then I&rsquo;d like to address what theming\nwould look like. Is this simply a matter of packaging up copies of the\ntemplates as separate themes? A great milestone for Mezzanine would be to have\na handful of built-in themes created, as well as documenting the process for\ncreating your own.</p>\n\n<h4 id=\"ux-designer\">UX Designer</h4>\n\n<p>I&rsquo;ve introduced a handful of user interface elements into Mezzanine that could\ndefinitely use some ironing out from a usability and accessibility\nperspective. The main contender is the navigation tree in the admin that&rsquo;s\nused for managing the hierarchy of the entire site as well as being the entry\npoint for accessing most of the content management. There&rsquo;s the dashboard\ninterface for the admin area which is in a very early stage. There&rsquo;s the\noverall layout for both the <a href=\"http://mezzanine.jupo.org\">project&rsquo;s own site</a>\nand the <a href=\"http://mezzanine.jupo.org/blog/\">default site</a>. Lastly and of great\nimportance, there&rsquo;s the <a href=\"http://mezzanine.jupo.org/docs/inline-editing.html\">entire system for in-line\nediting</a> which is featured\nin the default site - making this feature as user-friendly as possible is\ncritical.</p>\n\n<h4 id=\"technical-writer\">Technical Writer</h4>\n\n<p>Mezzanine currently has a good start on\n<a href=\"http://mezzanine.jupo.org/docs/\">documentation</a> but at the moment it&rsquo;s mostly\nfocused on developers. I&rsquo;d eventually like to have a lot more material aimed\nat both end users of Mezzanine as well as marketing material geared towards\nbusiness decision makers.</p>\n\n<h4 id=\"product-evangelist\">Product Evangelist</h4>\n\n<p>This is probably the easiest task of all. We simply need the word to be\nspread. Learn about Mezzanine and use whatever medium you like to let the\nworld know how great it is, be it <a href=\"http://twitter.com\">Twitter</a>, mailing lists\nor blog posts.</p>\n\n<p>This list isn&rsquo;t entirely complete and some of the tasks certainly overlap. If\nyou think you fit the bill or know anyone else who would get a kick out of\nworking on Mezzanine then there&rsquo;s no time like the present to get started.\nThere aren&rsquo;t any obligations with this so contributions of any size are\nwelcome. If you&rsquo;d like to get involved but don&rsquo;t know where to start just\n<a href=\"http://groups.google.com/group/mezzanine-\nusers\">post a message to the mailing list</a> and let&rsquo;s talk!</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2010-07-22 10:00:00",
            "slug": "an-open-source-brief",
            "expiry_date": null
        }
    },
    {
        "pk": 38,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "You&rsquo;d be forgiven for reading the title of this post and thinking it&rsquo;s about a\ncrazy approach to project briefing that somehow mimics open source development\n- as interesting as that sounds, it isn&rsquo;t the case and my motives are much\nmore simplistic and sinister. What I&rsquo;d like to do here is put a brief together\nfor an open source project called Mezzanine. This\nbrief isn&rsquo;t specifically geared towards programmers so if you think this isn&rsquo;t\nfor you then please continue reading and let me prove you wrong.",
            "title": "An Open Source Brief",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "python django open source mezzanine",
            "content": "<p>You&rsquo;d be forgiven for reading the title of this post and thinking it&rsquo;s about a\ncrazy approach to project briefing that somehow mimics open source development\n- as interesting as that sounds, it isn&rsquo;t the case and my motives are much\nmore simplistic and sinister. What I&rsquo;d like to do here is put a brief together\nfor an open source project called <a href=\"http://mezzanine.jupo.org\">Mezzanine</a>. This\nbrief isn&rsquo;t specifically geared towards programmers so if you think this isn&rsquo;t\nfor you then please continue reading and let me prove you wrong.</p>\n\n<p><em>What is Mezzanine?</em></p>\n\n<p>Anyone who <a href=\"http://twitter.com/stephen_mcd\">follows my updates</a> will know it&rsquo;s\nan open source CMS framework I&rsquo;ve been working on over the last couple of\nmonths. It now has a <a href=\"http://mezzanine.jupo.org/docs/overview.html#features\">concrete feature\nset</a> having come\nremarkably far in a very short amount of time. This might lead you to believe\nan entire team of people have been working on it but in fact it&rsquo;s mostly been\nmyself alone - it&rsquo;s thanks to the incredibly rapid development that using\n<a href=\"http://djangoproject.com\">Django</a> brings you that so much has been done so\nquickly. For those readers who aren&rsquo;t familiar with it please go ahead and\ncheck out the <a href=\"http://mezzanine.jupo.org/docs/overview.html\">overview</a> in the\n<a href=\"http://mezzanine.jupo.org/docs/\">documentation</a>, play around with the <a href=\"http://mezzanine.jupo.org/blog/\">live\ndemo</a> and have a read of my <a href=\"http://blog.jupo.org/2010/06/11/mezzanine-just-another-django-cms/\">previous blog\npost</a> that\ntalks about why I started Mezzanine and what I hope to achieve.</p>\n\n<p><em>Why would I want to help?</em></p>\n\n<p>Perhaps you&rsquo;re an end user of a poorly designed CMS and you&rsquo;ve often wished\nyou could do something about it. Perhaps you&rsquo;re a developer that&rsquo;s had the\nunfortunate experience of trying to extend a seemingly user-friendly CMS\nthat&rsquo;s built using archaic technology, and wished you could be working with\nsomething that&rsquo;s much more cutting edge and elegantly designed. Perhaps you&rsquo;re\nsomeone who &ldquo;gets&rdquo; open source at a deeper level but always felt as someone\nwho isn&rsquo;t a coder that you couldn&rsquo;t contribute. Perhaps you&rsquo;re in business\ndevelopment and you&rsquo;re tired of trying to sell &ldquo;enterprise&rdquo; crap with\ncompletely absurd price tags. If you have anything to do with web development\nthen there&rsquo;s something in this for you.</p>\n\n<p><em>What do I get out of it?</em></p>\n\n<p>As much as you put in of course. The experience of contributing to open source\nsoftware on paper can often be a competitive advantage over other candidates\nfor a job interview or even development contracts for your business. There&rsquo;s\nalso the chance of notoriety - imagine being responsible for the user\ninterface or branding of the next <a href=\"http://wordpress.org/\">Wordpress</a>. Imagine\nyour staff are core contributors to one of the web&rsquo;s leading development\ntools. Again the success of the project will only match its contributions so\nit&rsquo;s ultimately up to you.</p>\n\n<p><em>What can I do to help?</em></p>\n\n<p>A common misconception about open source software is that it&rsquo;s something that\nonly coders can participate in. Unfortunately the result of this is that the\nmajority of open source software ends up being only contributed to by coders\nand is incredibly lacking in a variety of areas. I&rsquo;m talking about visual\nbranding, copy-writing, UI development - all these areas that fall outside of\ncoding but are equally crucial in successfully shipping a professional piece\nof software. Mezzanine has now reached a point where it can only continue to\nmove forward at a consistent pace by bringing in these skills that I don&rsquo;t\nspecialise in. So without further ado, here are the specific roles I think\nneed filling and what the focus of each would be.</p>\n\n<h4 id=\"graphic-designer\">Graphic Designer</h4>\n\n<p>The entire project is desperately in need of some visual love. At the simplest\nlevel it could really use some basic branding such as a logo and &ldquo;powered by&rdquo;\nbuttons. Then there&rsquo;s the <a href=\"http://mezzanine.jupo.org\">Mezzanine website</a>,\n<a href=\"http://mezzanine.jupo.org/docs/\">documentation</a> and <a href=\"http://mezzanine.jupo.org/blog/\">default\nsite</a> that are all currently quite spartan\nlooking.</p>\n\n<h4 id=\"interface-developer\">Interface Developer</h4>\n\n<p>So far the template mark-up for the default site is as minimal as can be.\nWhile this is intentional to some extent in order to best serve those that\nwould come along and customise it for their projects, I think this idea could\nbe improved upon with a greater level of modularity. I&rsquo;m also keen to\nintroduce a CSS framework like <a href=\"http://blueprintcss.org/\">Blueprint</a> into the\ndefault site. Once that&rsquo;s all in order then I&rsquo;d like to address what theming\nwould look like. Is this simply a matter of packaging up copies of the\ntemplates as separate themes? A great milestone for Mezzanine would be to have\na handful of built-in themes created, as well as documenting the process for\ncreating your own.</p>\n\n<h4 id=\"ux-designer\">UX Designer</h4>\n\n<p>I&rsquo;ve introduced a handful of user interface elements into Mezzanine that could\ndefinitely use some ironing out from a usability and accessibility\nperspective. The main contender is the navigation tree in the admin that&rsquo;s\nused for managing the hierarchy of the entire site as well as being the entry\npoint for accessing most of the content management. There&rsquo;s the dashboard\ninterface for the admin area which is in a very early stage. There&rsquo;s the\noverall layout for both the <a href=\"http://mezzanine.jupo.org\">project&rsquo;s own site</a>\nand the <a href=\"http://mezzanine.jupo.org/blog/\">default site</a>. Lastly and of great\nimportance, there&rsquo;s the <a href=\"http://mezzanine.jupo.org/docs/inline-editing.html\">entire system for in-line\nediting</a> which is featured\nin the default site - making this feature as user-friendly as possible is\ncritical.</p>\n\n<h4 id=\"technical-writer\">Technical Writer</h4>\n\n<p>Mezzanine currently has a good start on\n<a href=\"http://mezzanine.jupo.org/docs/\">documentation</a> but at the moment it&rsquo;s mostly\nfocused on developers. I&rsquo;d eventually like to have a lot more material aimed\nat both end users of Mezzanine as well as marketing material geared towards\nbusiness decision makers.</p>\n\n<h4 id=\"product-evangelist\">Product Evangelist</h4>\n\n<p>This is probably the easiest task of all. We simply need the word to be\nspread. Learn about Mezzanine and use whatever medium you like to let the\nworld know how great it is, be it <a href=\"http://twitter.com\">Twitter</a>, mailing lists\nor blog posts.</p>\n\n<p>This list isn&rsquo;t entirely complete and some of the tasks certainly overlap. If\nyou think you fit the bill or know anyone else who would get a kick out of\nworking on Mezzanine then there&rsquo;s no time like the present to get started.\nThere aren&rsquo;t any obligations with this so contributions of any size are\nwelcome. If you&rsquo;d like to get involved but don&rsquo;t know where to start just\n<a href=\"http://groups.google.com/group/mezzanine-\nusers\">post a message to the mailing list</a> and let&rsquo;s talk!</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2010-07-22 10:00:00",
            "slug": "an-open-source-brief-1",
            "expiry_date": null
        }
    },
    {
        "pk": 14,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "Ask any developer that has put together a Django admin\ninterface and they&rsquo;ll\ntell you that it&rsquo;s an amazing piece of technology that allows you to whip up\nan admin system for your web application in a number of minutes rather than\ndays. Unfortunately this power can be a double-edged sword as without enough\ntime and thought up front, a developer can easily end up creating an interface\nthat&rsquo;s almost impossible for its intended audience to work with.",
            "title": "Mezzanine: Just Another Django CMS?",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "django python php cms mezzanine",
            "content": "<p>Ask any developer that has put together a <a href=\"http://docs.djangoproject.com/en/dev/intro/tutorial02/\">Django admin\ninterface</a> and they&rsquo;ll\ntell you that it&rsquo;s an amazing piece of technology that allows you to whip up\nan admin system for your web application in a number of minutes rather than\ndays. Unfortunately this power can be a double-edged sword as without enough\ntime and thought up front, a developer can easily end up creating an interface\nthat&rsquo;s almost impossible for its intended audience to work with.</p>\n\n<p>I&rsquo;ve seen this issue manifest itself in two ways. The first is the bare-bones\ncase where the options available for creating the admin interface are simply\nleft out, resulting in a spartan admin that does little to guide the user on\nhow to use it. The second could be described as the opposite end of the scale\nwhere there is actually far too much going on in the admin interface at the\ncost of simplicity and intuitiveness. This can often be the result of gluing\ntogether a range of resuable apps that each have their own approach to\nproviding admin interfaces with the end result looking like a <a href=\"http://en.wikipedia.org/wiki/Rube_Goldberg_machine\">Rube Goldberg\nmachine</a>. These scenarios\nare bad for customers and bad for Django. When end-users think of Django, they\nthink of the admin interface - that&rsquo;s what Django is to them so it&rsquo;s critical\nto get this component right.</p>\n\n<p>I recently had <a href=\"http://wordpress.org/\">Wordpress</a> suggested to me as a\nsolution to this problem and it&rsquo;s easy to see why. The Wordpress install base\nalone speaks huge volumes while its admin interface is incredibly user-\nfriendly. It also benefits from not requiring technical expertise to get a\nsimple website with pages and a blog up and running. However I felt this idea\noverlooked the underlying issue of poorly configured Django admin interfaces,\nwhile taking a step backwards by investing in <a href=\"http://php.net/\">PHP</a> - a\nrelatively inelegant technology with a very limited application scope.</p>\n\n<p>My solution to the problem was to tackle the underlying issue more directly by\ncreating a Django application which I&rsquo;ve called\n<a href=\"http://github.com/stephenmcd/mezzanine\">Mezzanine</a>. The approach I&rsquo;ve taken\nis to have functionality on par with Wordpress that can be used as a starting\npoint when developing basic websites. This meant putting a lot of thought into\nthe admin options used, as well as including a custom version of the <a href=\"http://code.google.com/p/django-grappelli/\">django-\ngrappelli admin skin</a> to come up\nwith a modern looking and intuitive admin interface. The other key approach\nI&rsquo;ve taken is to include as much functionality as possible directly in the\napplication itself for the sake of a consistent and lightweight code base that\ncan easily be hacked on. It&rsquo;s worth noting that this is in total contrast to\nother Django website applications such as\n<a href=\"http://github.com/montylounge/django-mingus\">Mingus</a> and\n<a href=\"http://pinaxproject.com/\">Pinax</a>, and that this difference really comes down\nto a question of scope. Pinax for example is capable of a much wider range of\nfunctionality than what I&rsquo;m aiming for with Mezzanine out of the box which is\nto cater for basic websites with the following features:</p>\n\n<ul>\n  <li>Hierarchical page navigation</li>\n  <li>Save as draft and preview on site</li>\n  <li>Drag-n-drop page ordering</li>\n  <li>WYSIWYG editing</li>\n  <li>SEO friendly URLs and meta data</li>\n  <li>Mobile device detection and templates</li>\n  <li>Blogging engine</li>\n  <li>Tagging</li>\n  <li>Custom templates per page or blog post</li>\n  <li><a href=\"http://gravatar.com/\">Gravatar</a> integration</li>\n  <li><a href=\"http://www.google.com/analytics/\">Google Analytics</a> integration</li>\n  <li><a href=\"http://twitter.com\">Twitter</a> feed integration</li>\n  <li><a href=\"http://bit.ly/\">bit.ly</a> integration</li>\n  <li>Sharing via Facebook or Twitter</li>\n  <li>Built-in threaded comments, or:</li>\n  <li><a href=\"http://disqus.com/\">Disqus</a> integration</li>\n</ul>\n\n<p><img alt=\"\" src=\"http://media.tumblr.com/tumblr_l3su7jFBHM1qa0qji.png\" /></p>\n\n<p>The Mezzanine admin dashboard</p>\n\n<p>I&rsquo;ve open sourced the initial version of Mezzanine with a BSD license on both\n<a href=\"http://github.com/stephenmcd/mezzanine\">github</a> and\n<a href=\"http://bitbucket.org/stephenmcd/mezzanine\">bitbucket</a> - it still has a long\nway to go so jump right in and fork away.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2010-06-11 10:00:00",
            "slug": "mezzanine-just-another-django-cms",
            "expiry_date": null
        }
    },
    {
        "pk": 39,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "Ask any developer that has put together a Django admin\ninterface and they&rsquo;ll\ntell you that it&rsquo;s an amazing piece of technology that allows you to whip up\nan admin system for your web application in a number of minutes rather than\ndays. Unfortunately this power can be a double-edged sword as without enough\ntime and thought up front, a developer can easily end up creating an interface\nthat&rsquo;s almost impossible for its intended audience to work with.",
            "title": "Mezzanine: Just Another Django CMS?",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "django python php cms mezzanine",
            "content": "<p>Ask any developer that has put together a <a href=\"http://docs.djangoproject.com/en/dev/intro/tutorial02/\">Django admin\ninterface</a> and they&rsquo;ll\ntell you that it&rsquo;s an amazing piece of technology that allows you to whip up\nan admin system for your web application in a number of minutes rather than\ndays. Unfortunately this power can be a double-edged sword as without enough\ntime and thought up front, a developer can easily end up creating an interface\nthat&rsquo;s almost impossible for its intended audience to work with.</p>\n\n<p>I&rsquo;ve seen this issue manifest itself in two ways. The first is the bare-bones\ncase where the options available for creating the admin interface are simply\nleft out, resulting in a spartan admin that does little to guide the user on\nhow to use it. The second could be described as the opposite end of the scale\nwhere there is actually far too much going on in the admin interface at the\ncost of simplicity and intuitiveness. This can often be the result of gluing\ntogether a range of resuable apps that each have their own approach to\nproviding admin interfaces with the end result looking like a <a href=\"http://en.wikipedia.org/wiki/Rube_Goldberg_machine\">Rube Goldberg\nmachine</a>. These scenarios\nare bad for customers and bad for Django. When end-users think of Django, they\nthink of the admin interface - that&rsquo;s what Django is to them so it&rsquo;s critical\nto get this component right.</p>\n\n<p>I recently had <a href=\"http://wordpress.org/\">Wordpress</a> suggested to me as a\nsolution to this problem and it&rsquo;s easy to see why. The Wordpress install base\nalone speaks huge volumes while its admin interface is incredibly user-\nfriendly. It also benefits from not requiring technical expertise to get a\nsimple website with pages and a blog up and running. However I felt this idea\noverlooked the underlying issue of poorly configured Django admin interfaces,\nwhile taking a step backwards by investing in <a href=\"http://php.net/\">PHP</a> - a\nrelatively inelegant technology with a very limited application scope.</p>\n\n<p>My solution to the problem was to tackle the underlying issue more directly by\ncreating a Django application which I&rsquo;ve called\n<a href=\"http://github.com/stephenmcd/mezzanine\">Mezzanine</a>. The approach I&rsquo;ve taken\nis to have functionality on par with Wordpress that can be used as a starting\npoint when developing basic websites. This meant putting a lot of thought into\nthe admin options used, as well as including a custom version of the <a href=\"http://code.google.com/p/django-grappelli/\">django-\ngrappelli admin skin</a> to come up\nwith a modern looking and intuitive admin interface. The other key approach\nI&rsquo;ve taken is to include as much functionality as possible directly in the\napplication itself for the sake of a consistent and lightweight code base that\ncan easily be hacked on. It&rsquo;s worth noting that this is in total contrast to\nother Django website applications such as\n<a href=\"http://github.com/montylounge/django-mingus\">Mingus</a> and\n<a href=\"http://pinaxproject.com/\">Pinax</a>, and that this difference really comes down\nto a question of scope. Pinax for example is capable of a much wider range of\nfunctionality than what I&rsquo;m aiming for with Mezzanine out of the box which is\nto cater for basic websites with the following features:</p>\n\n<ul>\n  <li>Hierarchical page navigation</li>\n  <li>Save as draft and preview on site</li>\n  <li>Drag-n-drop page ordering</li>\n  <li>WYSIWYG editing</li>\n  <li>SEO friendly URLs and meta data</li>\n  <li>Mobile device detection and templates</li>\n  <li>Blogging engine</li>\n  <li>Tagging</li>\n  <li>Custom templates per page or blog post</li>\n  <li><a href=\"http://gravatar.com/\">Gravatar</a> integration</li>\n  <li><a href=\"http://www.google.com/analytics/\">Google Analytics</a> integration</li>\n  <li><a href=\"http://twitter.com\">Twitter</a> feed integration</li>\n  <li><a href=\"http://bit.ly/\">bit.ly</a> integration</li>\n  <li>Sharing via Facebook or Twitter</li>\n  <li>Built-in threaded comments, or:</li>\n  <li><a href=\"http://disqus.com/\">Disqus</a> integration</li>\n</ul>\n\n<p><img alt=\"\" src=\"http://media.tumblr.com/tumblr_l3su7jFBHM1qa0qji.png\" /></p>\n\n<p>The Mezzanine admin dashboard</p>\n\n<p>I&rsquo;ve open sourced the initial version of Mezzanine with a BSD license on both\n<a href=\"http://github.com/stephenmcd/mezzanine\">github</a> and\n<a href=\"http://bitbucket.org/stephenmcd/mezzanine\">bitbucket</a> - it still has a long\nway to go so jump right in and fork away.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2010-06-11 10:00:00",
            "slug": "mezzanine-just-another-django-cms-1",
            "expiry_date": null
        }
    },
    {
        "pk": 15,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "Like a lot of Django shops our software stack consists of two layers up front:\na public facing web/proxy server and an application server sitting behind it.\nFor a long time we&rsquo;ve enjoyed success using nginx and\nApache to fill these roles respectively, but as an\napplication server the 800 pound gorilla that is Apache can really be\noverkill, which over time we&rsquo;ve found can have quite a cost around lack of\ngranular control. So we recently decided to try out the up and coming\ngunicorn which is currently gaining in popularity\nthroughout the Django community and so far it&rsquo;s been very smooth.",
            "title": "Announcing gunicorn-console",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "django gunicorn python curses",
            "content": "<p>Like a lot of Django shops our software stack consists of two layers up front:\na public facing web/proxy server and an application server sitting behind it.\nFor a long time we&rsquo;ve enjoyed success using <a href=\"http://nginx.org/en/\">nginx</a> and\n<a href=\"http://httpd.apache.org/\">Apache</a> to fill these roles respectively, but as an\napplication server the 800 pound gorilla that is Apache can really be\noverkill, which over time we&rsquo;ve found can have quite a cost around lack of\ngranular control. So we recently decided to try out the up and coming\n<a href=\"http://gunicorn.org/\">gunicorn</a> which is currently gaining in popularity\nthroughout the Django community and so far it&rsquo;s been very smooth.</p>\n\n<p>One of the interesting features it provides is the ability to handle various\nkill signals which map to functions such as adding and removing worker\nprocesses as well as reloading the master process, all on the fly without\ndropping a single client connection. So after a brief honeymoon period I then\ncame up with the following list of questions that mightn&rsquo;t be apparent when\nserving a single application, but really come into play when serving dozens of\napplications this way on a single server:</p>\n\n<ul>\n  <li>How can we deal with the signals interface without knowledge of process IDs?</li>\n  <li>How can we gain visiblity around the ports being used?</li>\n  <li>How can we gain visiblity around the number of worker procesess being used?</li>\n  <li>How can we gain visiblity around the amount of memory being used per application?</li>\n</ul>\n\n<p>All of these can be answered with a small amount of command-line-fu, however I\nwanted this process to be ridiculously easy for our entire team. For quite\nsome time I&rsquo;ve wanted to put together a console application using the <a href=\"http://docs.python.org/howto/curses.html\">curses\nlibrary</a> so a simple management\nconsole for gunicorn seemed like the perfect opportunity to do so and as such,\n<a href=\"http://github.com/stephenmcd/gunicorn-console\">gunicorn-console</a> was born.</p>\n\n<p><img alt=\"\" src=\"http://media.tumblr.com/tumblr_l35p9x2tmU1qa0qji.jpg\" /></p>\n\n<p>As pictured above, after firing up a few gunicorn instances with varying\nparameters gunicorn-console gives you the following interface in all its 8bit\nglory:</p>\n\n<p><img alt=\"\" src=\"http://media.tumblr.com/tumblr_l35pgbDlII1qa0qji.gif\" /></p>\n\n<p>If you&rsquo;re hosting multiple applications served up via gunicorn then gunicorn-\nconsole should make managing them easier. I&rsquo;ve released it with a BSD license\non both <a href=\"http://github.com/stephenmcd/gunicorn-console\">github</a> and\n<a href=\"http://bitbucket.org/stephenmcd/gunicorn-console\">bitbucket</a> using the\namazing <a href=\"http://hg-git.github.com/\">hg-git extension</a>, so go ahead and make it\nbetter!</p>\n\n<p><strong>Update, May 30:</strong> I ended this post with a request for others to contribute and after only a day someone already has. <a href=\"http://adamv.com/\">Adam Vandenberg</a> went ahead and forked the project with <a href=\"http://github.com/adamv/gunicorn-console/commit/0f9bc2672f4cc0b1d560b353304d374d5c927120\">some patches</a> to get it running on OSX, so a big thanks goes to him.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2010-05-29 10:00:00",
            "slug": "announcing-gunicorn-console",
            "expiry_date": null
        }
    },
    {
        "pk": 40,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "Like a lot of Django shops our software stack consists of two layers up front:\na public facing web/proxy server and an application server sitting behind it.\nFor a long time we&rsquo;ve enjoyed success using nginx and\nApache to fill these roles respectively, but as an\napplication server the 800 pound gorilla that is Apache can really be\noverkill, which over time we&rsquo;ve found can have quite a cost around lack of\ngranular control. So we recently decided to try out the up and coming\ngunicorn which is currently gaining in popularity\nthroughout the Django community and so far it&rsquo;s been very smooth.",
            "title": "Announcing gunicorn-console",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "django gunicorn python curses",
            "content": "<p>Like a lot of Django shops our software stack consists of two layers up front:\na public facing web/proxy server and an application server sitting behind it.\nFor a long time we&rsquo;ve enjoyed success using <a href=\"http://nginx.org/en/\">nginx</a> and\n<a href=\"http://httpd.apache.org/\">Apache</a> to fill these roles respectively, but as an\napplication server the 800 pound gorilla that is Apache can really be\noverkill, which over time we&rsquo;ve found can have quite a cost around lack of\ngranular control. So we recently decided to try out the up and coming\n<a href=\"http://gunicorn.org/\">gunicorn</a> which is currently gaining in popularity\nthroughout the Django community and so far it&rsquo;s been very smooth.</p>\n\n<p>One of the interesting features it provides is the ability to handle various\nkill signals which map to functions such as adding and removing worker\nprocesses as well as reloading the master process, all on the fly without\ndropping a single client connection. So after a brief honeymoon period I then\ncame up with the following list of questions that mightn&rsquo;t be apparent when\nserving a single application, but really come into play when serving dozens of\napplications this way on a single server:</p>\n\n<ul>\n  <li>How can we deal with the signals interface without knowledge of process IDs?</li>\n  <li>How can we gain visiblity around the ports being used?</li>\n  <li>How can we gain visiblity around the number of worker procesess being used?</li>\n  <li>How can we gain visiblity around the amount of memory being used per application?</li>\n</ul>\n\n<p>All of these can be answered with a small amount of command-line-fu, however I\nwanted this process to be ridiculously easy for our entire team. For quite\nsome time I&rsquo;ve wanted to put together a console application using the <a href=\"http://docs.python.org/howto/curses.html\">curses\nlibrary</a> so a simple management\nconsole for gunicorn seemed like the perfect opportunity to do so and as such,\n<a href=\"http://github.com/stephenmcd/gunicorn-console\">gunicorn-console</a> was born.</p>\n\n<p><img alt=\"\" src=\"http://media.tumblr.com/tumblr_l35p9x2tmU1qa0qji.jpg\" /></p>\n\n<p>As pictured above, after firing up a few gunicorn instances with varying\nparameters gunicorn-console gives you the following interface in all its 8bit\nglory:</p>\n\n<p><img alt=\"\" src=\"http://media.tumblr.com/tumblr_l35pgbDlII1qa0qji.gif\" /></p>\n\n<p>If you&rsquo;re hosting multiple applications served up via gunicorn then gunicorn-\nconsole should make managing them easier. I&rsquo;ve released it with a BSD license\non both <a href=\"http://github.com/stephenmcd/gunicorn-console\">github</a> and\n<a href=\"http://bitbucket.org/stephenmcd/gunicorn-console\">bitbucket</a> using the\namazing <a href=\"http://hg-git.github.com/\">hg-git extension</a>, so go ahead and make it\nbetter!</p>\n\n<p><strong>Update, May 30:</strong> I ended this post with a request for others to contribute and after only a day someone already has. <a href=\"http://adamv.com/\">Adam Vandenberg</a> went ahead and forked the project with <a href=\"http://github.com/adamv/gunicorn-console/commit/0f9bc2672f4cc0b1d560b353304d374d5c927120\">some patches</a> to get it running on OSX, so a big thanks goes to him.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2010-05-29 10:00:00",
            "slug": "announcing-gunicorn-console-1",
            "expiry_date": null
        }
    },
    {
        "pk": 16,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "A project of mine contains a number of third-party apps that are development\nrelated and potentially not available on every machine the project will run\non. My general approach to dealing with these was to try and import the app in\nmy settings module and if successful, add it to the INSTALLED_APPS\nsetting. However as the number of these apps grew it became a wart within the\nsettings module so I put together this snippet for managing them.",
            "title": "Optional Django Apps",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "python django",
            "content": "<p>A project of mine contains a number of third-party apps that are development\nrelated and potentially not available on every machine the project will run\non. My general approach to dealing with these was to try and import the app in\nmy <code>settings</code> module and if successful, add it to the <code>INSTALLED_APPS</code>\nsetting. However as the number of these apps grew it became a wart within the\nsettings module so I put together this snippet for managing them.</p>\n\n<p>We first create a sequence of dictionaries, each containing information about\nan installed app such as the module to try and import, an extra potential\ncondition for checking and then the sequences of names to add to\n<code>INSTALLED_APPS</code>, <code>MIDDLEWARE_CLASSES</code> and <code>TEMPLATE_CONTEXT_PROCESSORS</code>.\nLet&rsquo;s start with the settings for optionally including the apps <a href=\"http://github.com/django-extensions/django-extensions\">django-\ncommand-extensions</a>,\n<a href=\"http://github.com/robhudson/django-debug-toolbar\">django-debug-toolbar</a> and\n<a href=\"http://south.aeracode.org\">south</a>.</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"c\"># Define any settings specific to each of the optional apps.</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"n\">USE_SOUTH</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">&quot;test&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">DEBUG_TOOLBAR_CONFIG</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">&quot;INTERCEPT_REDIRECTS&quot;</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">}</span>\n\n<span class=\"c\"># Sequence for each optional app as a dict containing info about the app.</span>\n<span class=\"n\">OPTIONAL_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"p\">{</span><span class=\"s\">&quot;import&quot;</span><span class=\"p\">:</span> <span class=\"s\">&quot;django_extensions&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;apps&quot;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s\">&quot;django_extensions&quot;</span><span class=\"p\">,)},</span>\n    <span class=\"p\">{</span><span class=\"s\">&quot;import&quot;</span><span class=\"p\">:</span> <span class=\"s\">&quot;debug_toolbar&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;apps&quot;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s\">&quot;debug_toolbar&quot;</span><span class=\"p\">,),</span> \n        <span class=\"s\">&quot;middleware&quot;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s\">&quot;debug_toolbar.middleware.DebugToolbarMiddleware&quot;</span><span class=\"p\">,)},</span>\n    <span class=\"p\">{</span><span class=\"s\">&quot;import&quot;</span><span class=\"p\">:</span> <span class=\"s\">&quot;south&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;apps&quot;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s\">&quot;south&quot;</span><span class=\"p\">,),</span> <span class=\"s\">&quot;condition&quot;</span><span class=\"p\">:</span> <span class=\"n\">USE_SOUTH</span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Next we simply iterate through the sequence of optional apps and set them up.</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"c\"># Set up each optional app if available.</span>\n<span class=\"k\">for</span> <span class=\"n\">app</span> <span class=\"ow\">in</span> <span class=\"n\">OPTIONAL_APPS</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">&quot;condition&quot;</span><span class=\"p\">,</span> <span class=\"bp\">True</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"nb\">__import__</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">[</span><span class=\"s\">&quot;import&quot;</span><span class=\"p\">])</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">+=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">&quot;apps&quot;</span><span class=\"p\">,</span> <span class=\"p\">())</span>\n            <span class=\"n\">MIDDLEWARE_CLASSES</span> <span class=\"o\">+=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">&quot;middleware&quot;</span><span class=\"p\">,</span> <span class=\"p\">())</span>\n</code></pre>\n</div>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2010-05-10 10:00:00",
            "slug": "optional-django-apps",
            "expiry_date": null
        }
    },
    {
        "pk": 41,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "A project of mine contains a number of third-party apps that are development\nrelated and potentially not available on every machine the project will run\non. My general approach to dealing with these was to try and import the app in\nmy settings module and if successful, add it to the INSTALLED_APPS\nsetting. However as the number of these apps grew it became a wart within the\nsettings module so I put together this snippet for managing them.",
            "title": "Optional Django Apps",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "python django",
            "content": "<p>A project of mine contains a number of third-party apps that are development\nrelated and potentially not available on every machine the project will run\non. My general approach to dealing with these was to try and import the app in\nmy <code>settings</code> module and if successful, add it to the <code>INSTALLED_APPS</code>\nsetting. However as the number of these apps grew it became a wart within the\nsettings module so I put together this snippet for managing them.</p>\n\n<p>We first create a sequence of dictionaries, each containing information about\nan installed app such as the module to try and import, an extra potential\ncondition for checking and then the sequences of names to add to\n<code>INSTALLED_APPS</code>, <code>MIDDLEWARE_CLASSES</code> and <code>TEMPLATE_CONTEXT_PROCESSORS</code>.\nLet&rsquo;s start with the settings for optionally including the apps <a href=\"http://github.com/django-extensions/django-extensions\">django-\ncommand-extensions</a>,\n<a href=\"http://github.com/robhudson/django-debug-toolbar\">django-debug-toolbar</a> and\n<a href=\"http://south.aeracode.org\">south</a>.</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"c\"># Define any settings specific to each of the optional apps.</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"n\">USE_SOUTH</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">&quot;test&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">DEBUG_TOOLBAR_CONFIG</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">&quot;INTERCEPT_REDIRECTS&quot;</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">}</span>\n\n<span class=\"c\"># Sequence for each optional app as a dict containing info about the app.</span>\n<span class=\"n\">OPTIONAL_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"p\">{</span><span class=\"s\">&quot;import&quot;</span><span class=\"p\">:</span> <span class=\"s\">&quot;django_extensions&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;apps&quot;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s\">&quot;django_extensions&quot;</span><span class=\"p\">,)},</span>\n    <span class=\"p\">{</span><span class=\"s\">&quot;import&quot;</span><span class=\"p\">:</span> <span class=\"s\">&quot;debug_toolbar&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;apps&quot;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s\">&quot;debug_toolbar&quot;</span><span class=\"p\">,),</span> \n        <span class=\"s\">&quot;middleware&quot;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s\">&quot;debug_toolbar.middleware.DebugToolbarMiddleware&quot;</span><span class=\"p\">,)},</span>\n    <span class=\"p\">{</span><span class=\"s\">&quot;import&quot;</span><span class=\"p\">:</span> <span class=\"s\">&quot;south&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;apps&quot;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s\">&quot;south&quot;</span><span class=\"p\">,),</span> <span class=\"s\">&quot;condition&quot;</span><span class=\"p\">:</span> <span class=\"n\">USE_SOUTH</span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Next we simply iterate through the sequence of optional apps and set them up.</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"c\"># Set up each optional app if available.</span>\n<span class=\"k\">for</span> <span class=\"n\">app</span> <span class=\"ow\">in</span> <span class=\"n\">OPTIONAL_APPS</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">&quot;condition&quot;</span><span class=\"p\">,</span> <span class=\"bp\">True</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"nb\">__import__</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">[</span><span class=\"s\">&quot;import&quot;</span><span class=\"p\">])</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">+=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">&quot;apps&quot;</span><span class=\"p\">,</span> <span class=\"p\">())</span>\n            <span class=\"n\">MIDDLEWARE_CLASSES</span> <span class=\"o\">+=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">&quot;middleware&quot;</span><span class=\"p\">,</span> <span class=\"p\">())</span>\n</code></pre>\n</div>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2010-05-10 10:00:00",
            "slug": "optional-django-apps-1",
            "expiry_date": null
        }
    },
    {
        "pk": 17,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "Anyone who has programmed in Python for a considerable length of time will at\nleast have some passing familiarity with PEP\n8 - the document that goes into an\nincredible level of detail in dictating precisely how code should be written.\nWhile its primary goal is to ensure that Python code is written in a\nconsistant fashion throughout the community, therefore making it as easy as\npossible to read, it also provides one of many aspects that makes programming\nin Python an incredibly efficient process - it negates the need for a lot of\ndecision making around any of the choices one might come across that are\nalready covered in PEP 8.",
            "title": "Where is PEP 8 for Technical Documentation?",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "python documentation",
            "content": "<p>Anyone who has programmed in Python for a considerable length of time will at\nleast have some passing familiarity with <a href=\"http://www.python.org/dev/peps/pep-0008/\">PEP\n8</a> - the document that goes into an\nincredible level of detail in dictating precisely how code should be written.\nWhile its primary goal is to ensure that Python code is written in a\nconsistant fashion throughout the community, therefore making it as easy as\npossible to read, it also provides one of many aspects that makes programming\nin Python an incredibly efficient process - it negates the need for a lot of\ndecision making around any of the choices one might come across that are\nalready covered in PEP 8.</p>\n\n<p>I&rsquo;ve recently been spending a lot of time writing technical documentation.\nWhile it&rsquo;s been interesting doing something different for a change, the\nperfectionist in me is constantly frustated with finding myself using\ninconsistant language across different sections when faced with the exact same\ncontext, for example:</p>\n\n<ul>\n  <li>contains / has / includes / provides</li>\n  <li>discussed / referred to / described / mentioned</li>\n  <li>above / earlier / previously</li>\n  <li>below / later / next</li>\n</ul>\n\n<p>Are these types of ambiguities in technical writing something that\nprofessional editors typically deal with? What I&rsquo;d love to see is something\nlike PEP 8 for technical documentation.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2010-03-18 10:00:00",
            "slug": "where-is-pep-8-for-technical-documentation",
            "expiry_date": null
        }
    },
    {
        "pk": 42,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "Anyone who has programmed in Python for a considerable length of time will at\nleast have some passing familiarity with PEP\n8 - the document that goes into an\nincredible level of detail in dictating precisely how code should be written.\nWhile its primary goal is to ensure that Python code is written in a\nconsistant fashion throughout the community, therefore making it as easy as\npossible to read, it also provides one of many aspects that makes programming\nin Python an incredibly efficient process - it negates the need for a lot of\ndecision making around any of the choices one might come across that are\nalready covered in PEP 8.",
            "title": "Where is PEP 8 for Technical Documentation?",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "python documentation",
            "content": "<p>Anyone who has programmed in Python for a considerable length of time will at\nleast have some passing familiarity with <a href=\"http://www.python.org/dev/peps/pep-0008/\">PEP\n8</a> - the document that goes into an\nincredible level of detail in dictating precisely how code should be written.\nWhile its primary goal is to ensure that Python code is written in a\nconsistant fashion throughout the community, therefore making it as easy as\npossible to read, it also provides one of many aspects that makes programming\nin Python an incredibly efficient process - it negates the need for a lot of\ndecision making around any of the choices one might come across that are\nalready covered in PEP 8.</p>\n\n<p>I&rsquo;ve recently been spending a lot of time writing technical documentation.\nWhile it&rsquo;s been interesting doing something different for a change, the\nperfectionist in me is constantly frustated with finding myself using\ninconsistant language across different sections when faced with the exact same\ncontext, for example:</p>\n\n<ul>\n  <li>contains / has / includes / provides</li>\n  <li>discussed / referred to / described / mentioned</li>\n  <li>above / earlier / previously</li>\n  <li>below / later / next</li>\n</ul>\n\n<p>Are these types of ambiguities in technical writing something that\nprofessional editors typically deal with? What I&rsquo;d love to see is something\nlike PEP 8 for technical documentation.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2010-03-18 10:00:00",
            "slug": "where-is-pep-8-for-technical-documentation-1",
            "expiry_date": null
        }
    },
    {
        "pk": 18,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "Earlier this week I had the pleasure of removing my final Windows install\nafter wiping my machine at work and installing Ubuntu on it. It was during the\nlate 90s that I first tried out Linux after getting my hands on a Redhat 6.1\nCD from the cover of a magazine I&rsquo;d bought. I didn&rsquo;t keep it installed for\nvery long and after a few more tries over the years with Mandrake (now\nMandrivia) and Damn Small Linux, it wasn&rsquo;t until 2005 when I installed\nSlackware 10.2 as my primary operating system at home and really cut my teeth\non it in order to test how cross-platform my Python projects were. It was a\ngreat experience learning about all the various sub-systems, compiling\nsoftware and libraries from source, embracing the command line and modifying\nsome of the internal scripts to get things working the way I wanted.",
            "title": "Hasta la Vista, Windows",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "linux x.org",
            "content": "<p>Earlier this week I had the pleasure of removing my final Windows install\nafter wiping my machine at work and installing Ubuntu on it. It was during the\nlate 90s that I first tried out Linux after getting my hands on a Redhat 6.1\nCD from the cover of a magazine I&rsquo;d bought. I didn&rsquo;t keep it installed for\nvery long and after a few more tries over the years with Mandrake (now\nMandrivia) and Damn Small Linux, it wasn&rsquo;t until 2005 when I installed\nSlackware 10.2 as my primary operating system at home and really cut my teeth\non it in order to test how cross-platform my Python projects were. It was a\ngreat experience learning about all the various sub-systems, compiling\nsoftware and libraries from source, embracing the command line and modifying\nsome of the internal scripts to get things working the way I wanted.</p>\n\n<p>Fast forward to 2010 and in my workplace the migration from a Microsoft\ndevelopment shop to a Linux/Python shop after several years is finally\ncomplete, paving the way for this latest install. I did experience a couple of\nhiccups that hadn&rsquo;t happened before. Firstly I have dual wide-screen monitors\nat work and I rotate one of them 90 degrees in order to maximize the amount of\nvisible code on my screen. The display properties in Ubuntu only gave me the\nability to flip the display 180 degrees which seemed quite odd so I then tried\nto manually rotate the display with the\n<a href=\"http://en.wikipedia.org/wiki/RandR\">xrandr</a> command which reported my overall\nvirtual screen size as being too small for the rotation. I resolved this with\nthe update below to my x.org configuration to use a virtual screen size large\nenough to handle the rotation while including the second monitor.</p>\n\n<div class=\"highlight\"><pre><code class=\"css\"><span class=\"nt\">Section</span> <span class=\"s2\">&quot;Screen&quot;</span>\n    <span class=\"nt\">Identifier</span> <span class=\"s2\">&quot;Configured Screen Device&quot;</span>\n    <span class=\"nt\">Device</span> <span class=\"s2\">&quot;Configured Video Device&quot;</span>\n    <span class=\"nt\">SubSection</span> <span class=\"s2\">&quot;Display&quot;</span>\n        <span class=\"nt\">Virtual</span> <span class=\"nt\">2880</span> <span class=\"nt\">1440</span>\n    <span class=\"nt\">EndSubSection</span>\n<span class=\"nt\">EndSection</span>\n</code></pre>\n</div>\n\n<p>The second issue was more a lack of foresight on my part than a problem with\nthe new install itself. After a vanilla install of any modern operating system\nyou&rsquo;ll undoubtedly be required to download a series of updates that have\noccurred since the version you&rsquo;ve installed was initially released. The\ndifference with most Linux distributions is that almost all of your software\nis managed in this way from installing to updating, it all goes through the\nsame service known as a package manager - one of the many things with Linux\nthat once you&rsquo;re used to using you won&rsquo;t know how you ever worked without it.\nSo away I went with the initial round of updates which left the package\nmanager busy for several hours, during which time some issues arose with a\nproject that immediately required my attention. Unfortunately I needed to\ninstall a handful of libraries to get up and running and with the package\nmanager busy I was left in a real bind. Fortunately I was able to use one of\nour test servers remotely to resolve the issue but the lesson learnt here is\nthat for a new development system it&rsquo;s best to leave the initial system update\nuntil after your development environment is completely set up.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2010-02-13 10:00:00",
            "slug": "hasta-la-vista-windows",
            "expiry_date": null
        }
    },
    {
        "pk": 43,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "Earlier this week I had the pleasure of removing my final Windows install\nafter wiping my machine at work and installing Ubuntu on it. It was during the\nlate 90s that I first tried out Linux after getting my hands on a Redhat 6.1\nCD from the cover of a magazine I&rsquo;d bought. I didn&rsquo;t keep it installed for\nvery long and after a few more tries over the years with Mandrake (now\nMandrivia) and Damn Small Linux, it wasn&rsquo;t until 2005 when I installed\nSlackware 10.2 as my primary operating system at home and really cut my teeth\non it in order to test how cross-platform my Python projects were. It was a\ngreat experience learning about all the various sub-systems, compiling\nsoftware and libraries from source, embracing the command line and modifying\nsome of the internal scripts to get things working the way I wanted.",
            "title": "Hasta la Vista, Windows",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "linux x.org",
            "content": "<p>Earlier this week I had the pleasure of removing my final Windows install\nafter wiping my machine at work and installing Ubuntu on it. It was during the\nlate 90s that I first tried out Linux after getting my hands on a Redhat 6.1\nCD from the cover of a magazine I&rsquo;d bought. I didn&rsquo;t keep it installed for\nvery long and after a few more tries over the years with Mandrake (now\nMandrivia) and Damn Small Linux, it wasn&rsquo;t until 2005 when I installed\nSlackware 10.2 as my primary operating system at home and really cut my teeth\non it in order to test how cross-platform my Python projects were. It was a\ngreat experience learning about all the various sub-systems, compiling\nsoftware and libraries from source, embracing the command line and modifying\nsome of the internal scripts to get things working the way I wanted.</p>\n\n<p>Fast forward to 2010 and in my workplace the migration from a Microsoft\ndevelopment shop to a Linux/Python shop after several years is finally\ncomplete, paving the way for this latest install. I did experience a couple of\nhiccups that hadn&rsquo;t happened before. Firstly I have dual wide-screen monitors\nat work and I rotate one of them 90 degrees in order to maximize the amount of\nvisible code on my screen. The display properties in Ubuntu only gave me the\nability to flip the display 180 degrees which seemed quite odd so I then tried\nto manually rotate the display with the\n<a href=\"http://en.wikipedia.org/wiki/RandR\">xrandr</a> command which reported my overall\nvirtual screen size as being too small for the rotation. I resolved this with\nthe update below to my x.org configuration to use a virtual screen size large\nenough to handle the rotation while including the second monitor.</p>\n\n<div class=\"highlight\"><pre><code class=\"css\"><span class=\"nt\">Section</span> <span class=\"s2\">&quot;Screen&quot;</span>\n    <span class=\"nt\">Identifier</span> <span class=\"s2\">&quot;Configured Screen Device&quot;</span>\n    <span class=\"nt\">Device</span> <span class=\"s2\">&quot;Configured Video Device&quot;</span>\n    <span class=\"nt\">SubSection</span> <span class=\"s2\">&quot;Display&quot;</span>\n        <span class=\"nt\">Virtual</span> <span class=\"nt\">2880</span> <span class=\"nt\">1440</span>\n    <span class=\"nt\">EndSubSection</span>\n<span class=\"nt\">EndSection</span>\n</code></pre>\n</div>\n\n<p>The second issue was more a lack of foresight on my part than a problem with\nthe new install itself. After a vanilla install of any modern operating system\nyou&rsquo;ll undoubtedly be required to download a series of updates that have\noccurred since the version you&rsquo;ve installed was initially released. The\ndifference with most Linux distributions is that almost all of your software\nis managed in this way from installing to updating, it all goes through the\nsame service known as a package manager - one of the many things with Linux\nthat once you&rsquo;re used to using you won&rsquo;t know how you ever worked without it.\nSo away I went with the initial round of updates which left the package\nmanager busy for several hours, during which time some issues arose with a\nproject that immediately required my attention. Unfortunately I needed to\ninstall a handful of libraries to get up and running and with the package\nmanager busy I was left in a real bind. Fortunately I was able to use one of\nour test servers remotely to resolve the issue but the lesson learnt here is\nthat for a new development system it&rsquo;s best to leave the initial system update\nuntil after your development environment is completely set up.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2010-02-13 10:00:00",
            "slug": "hasta-la-vista-windows-1",
            "expiry_date": null
        }
    },
    {
        "pk": 19,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "My current project has the common requirement of storing and rendering a\nhierarchical tree of categories. This project is geared towards potentially\njunior developers with the expectation of it being hacked at every time it&rsquo;s\nused - a set of scaffolding where simplicity isn&rsquo;t just a loose goal but a\nfundamental requirement.",
            "title": "Linear Traversal of Adjacency List Trees",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "python algorithms data structures",
            "content": "<p>My current project has the common requirement of storing and rendering a\nhierarchical tree of categories. This project is geared towards potentially\njunior developers with the expectation of it being hacked at every time it&rsquo;s\nused - a set of scaffolding where simplicity isn&rsquo;t just a loose goal but a\nfundamental requirement.</p>\n\n<p>Two popular approaches to the hierarchical tree are the <a href=\"http://articles.sitepoint.com/print/hierarchical-data-database\">Adjacency List (AL)\nand Modified Preorder Tree Traversal (MPTT)\nmodels</a>. The\nadvantage of AL is that it only stores the exact data required for\nrepresenting the tree while MPTT stores extraneous data for assisting in\ntraversing the tree in an optimal fashion. The simplicity of the AL model\nmakes it much better suited to the requirements I mentioned, however the\nproblem with AL is the recursive nature in which you traverse it.</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"k\">def</span> <span class=\"nf\">show_branch</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"c\"># iterating the entire tree for each branch gives quadratic performance</span>\n    <span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">nodes</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"n\">parent</span><span class=\"p\">:</span>\n            <span class=\"k\">print</span> <span class=\"p\">(</span><span class=\"s\">&quot; &quot;</span> <span class=\"o\">*</span> <span class=\"n\">depth</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">node</span>\n            <span class=\"n\">show_branch</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">depth</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Worst case here is <em>O</em>(n\u00b2) performance but thanks to <a href=\"http://wiki.python.org/moin/DictionaryKeys\">Python&rsquo;s lightning fast\nhashtable implementation</a> we can\ncreate a copy of the tree as a dictionary of branches giving us <em>O</em>(n) overall\nperformance when traversing the entire tree.</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"c\"># copy the tree into a dict of branches</span>\n<span class=\"n\">branches</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">nodes</span><span class=\"p\">:</span>\n    <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">parent</span>\n    <span class=\"k\">if</span> <span class=\"n\">parent</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">branches</span><span class=\"p\">:</span>\n        <span class=\"n\">branches</span><span class=\"p\">[</span><span class=\"n\">parent</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">branches</span><span class=\"p\">[</span><span class=\"n\">parent</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">show_branch</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"c\"># iterating only the nodes in the branch gives linear performance</span>\n    <span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">branches</span><span class=\"p\">[</span><span class=\"n\">parent</span><span class=\"p\">]:</span>\n        <span class=\"k\">print</span> <span class=\"p\">(</span><span class=\"s\">&quot; &quot;</span> <span class=\"o\">*</span> <span class=\"n\">depth</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">node</span>\n        <span class=\"k\">if</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">branches</span><span class=\"p\">:</span>\n            <span class=\"n\">show_branch</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">depth</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>When rendering the entire tree, using this technique will greatly increase\nperformance as the tree grows in size. Be aware though that if your\napplication only ever deals with a single branch in any given view, this\ntechnique won&rsquo;t perform as well as directly querying the database for the\nnodes in a single branch.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2010-01-26 10:00:00",
            "slug": "linear-traversal-of-adjacency-list-trees",
            "expiry_date": null
        }
    },
    {
        "pk": 44,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "My current project has the common requirement of storing and rendering a\nhierarchical tree of categories. This project is geared towards potentially\njunior developers with the expectation of it being hacked at every time it&rsquo;s\nused - a set of scaffolding where simplicity isn&rsquo;t just a loose goal but a\nfundamental requirement.",
            "title": "Linear Traversal of Adjacency List Trees",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "python algorithms data structures",
            "content": "<p>My current project has the common requirement of storing and rendering a\nhierarchical tree of categories. This project is geared towards potentially\njunior developers with the expectation of it being hacked at every time it&rsquo;s\nused - a set of scaffolding where simplicity isn&rsquo;t just a loose goal but a\nfundamental requirement.</p>\n\n<p>Two popular approaches to the hierarchical tree are the <a href=\"http://articles.sitepoint.com/print/hierarchical-data-database\">Adjacency List (AL)\nand Modified Preorder Tree Traversal (MPTT)\nmodels</a>. The\nadvantage of AL is that it only stores the exact data required for\nrepresenting the tree while MPTT stores extraneous data for assisting in\ntraversing the tree in an optimal fashion. The simplicity of the AL model\nmakes it much better suited to the requirements I mentioned, however the\nproblem with AL is the recursive nature in which you traverse it.</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"k\">def</span> <span class=\"nf\">show_branch</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"c\"># iterating the entire tree for each branch gives quadratic performance</span>\n    <span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">nodes</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"n\">parent</span><span class=\"p\">:</span>\n            <span class=\"k\">print</span> <span class=\"p\">(</span><span class=\"s\">&quot; &quot;</span> <span class=\"o\">*</span> <span class=\"n\">depth</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">node</span>\n            <span class=\"n\">show_branch</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">depth</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Worst case here is <em>O</em>(n\u00b2) performance but thanks to <a href=\"http://wiki.python.org/moin/DictionaryKeys\">Python&rsquo;s lightning fast\nhashtable implementation</a> we can\ncreate a copy of the tree as a dictionary of branches giving us <em>O</em>(n) overall\nperformance when traversing the entire tree.</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"c\"># copy the tree into a dict of branches</span>\n<span class=\"n\">branches</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">nodes</span><span class=\"p\">:</span>\n    <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">parent</span>\n    <span class=\"k\">if</span> <span class=\"n\">parent</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">branches</span><span class=\"p\">:</span>\n        <span class=\"n\">branches</span><span class=\"p\">[</span><span class=\"n\">parent</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">branches</span><span class=\"p\">[</span><span class=\"n\">parent</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">show_branch</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"c\"># iterating only the nodes in the branch gives linear performance</span>\n    <span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">branches</span><span class=\"p\">[</span><span class=\"n\">parent</span><span class=\"p\">]:</span>\n        <span class=\"k\">print</span> <span class=\"p\">(</span><span class=\"s\">&quot; &quot;</span> <span class=\"o\">*</span> <span class=\"n\">depth</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">node</span>\n        <span class=\"k\">if</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">branches</span><span class=\"p\">:</span>\n            <span class=\"n\">show_branch</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">depth</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>When rendering the entire tree, using this technique will greatly increase\nperformance as the tree grows in size. Be aware though that if your\napplication only ever deals with a single branch in any given view, this\ntechnique won&rsquo;t perform as well as directly querying the database for the\nnodes in a single branch.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2010-01-26 10:00:00",
            "slug": "linear-traversal-of-adjacency-list-trees-1",
            "expiry_date": null
        }
    },
    {
        "pk": 20,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "Technology shows style of things to come",
            "title": "Technology shows style of things to come",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "django facebook",
            "content": "<p><a href=\"http://www.smh.com.au/business\n/technology-shows-style-of-things-to-come-20091129-jyxp.html\">Technology shows style of things to come</a></p>\n\n<p>The Sydney Morning Herald has an article that talks about some of the work I\ndid for Sportsgirl including their community portal running on Django and a\nFacebook app written in C# - nice to get recognized!</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2009-11-30 10:00:00",
            "slug": "technology-shows-style-of-things-to-come",
            "expiry_date": null
        }
    },
    {
        "pk": 45,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "Technology shows style of things to come",
            "title": "Technology Shows Style of Things to Come",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "django facebook",
            "content": "<p><a href=\"http://www.smh.com.au/business\n/technology-shows-style-of-things-to-come-20091129-jyxp.html\">Technology shows style of things to come</a></p>\n\n<p>The Sydney Morning Herald has an article that talks about some of the work I\ndid for Sportsgirl including their community portal running on Django and a\nFacebook app written in C# - nice to get recognized!</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2009-11-30 10:00:00",
            "slug": "technology-shows-style-of-things-to-come-1",
            "expiry_date": null
        }
    },
    {
        "pk": 21,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "Many major Linux distributions such as Ubuntu ship with\ngedit as the default text editor. It has\nall the standard features you&rsquo;d expect in an editor such as syntax\nhighlighting, a tabbed interface and the ability to integrate external tools.\nMost importantly it&rsquo;s highly extensible with the ability to create plug-\nins for it written in Python or C.",
            "title": "FTP Browser for gedit",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "gedit linux python gnome",
            "content": "<p>Many major Linux distributions such as Ubuntu ship with\n<a href=\"http://projects.gnome.org/gedit/\">gedit</a> as the default text editor. It has\nall the standard features you&rsquo;d expect in an editor such as syntax\nhighlighting, a tabbed interface and the ability to integrate external tools.\nMost importantly it&rsquo;s highly extensible with the ability to <a href=\"http://live.gnome.org/Gedit/Plugins\">create plug-\nins</a> for it written in Python or C.</p>\n\n<p>One great plug-in that&rsquo;s been written is <a href=\"http://code.google.com/p/gedit-ftp-browser/\">gedit-ftp-\nbrowser</a>, an FTP client that\nembeds itself into the editor giving you the ability to remotely edit files\nover FTP. I&rsquo;ve just been accepted as a contributor to the project which I&rsquo;m\nreally excited about. <a href=\"http://code.google.com/p/gedit-ftp-\nbrowser/source/diff?spec=svn5&amp;r=5&amp;format=side&amp;path=/trunk/FTP.py\">I&rsquo;ve implemented a &ldquo;Save As&rdquo;\nfeature</a> allowing the\nuser to create and upload new files over FTP. Next up I&rsquo;ll be working on the\nability to manage multiple FTP servers via profiles.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2009-11-03 10:00:00",
            "slug": "ftp-browser-for-gedit",
            "expiry_date": null
        }
    },
    {
        "pk": 46,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "Many major Linux distributions such as Ubuntu ship with\ngedit as the default text editor. It has\nall the standard features you&rsquo;d expect in an editor such as syntax\nhighlighting, a tabbed interface and the ability to integrate external tools.\nMost importantly it&rsquo;s highly extensible with the ability to create plug-\nins for it written in Python or C.",
            "title": "FTP Browser for gedit",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "gedit linux python gnome",
            "content": "<p>Many major Linux distributions such as Ubuntu ship with\n<a href=\"http://projects.gnome.org/gedit/\">gedit</a> as the default text editor. It has\nall the standard features you&rsquo;d expect in an editor such as syntax\nhighlighting, a tabbed interface and the ability to integrate external tools.\nMost importantly it&rsquo;s highly extensible with the ability to <a href=\"http://live.gnome.org/Gedit/Plugins\">create plug-\nins</a> for it written in Python or C.</p>\n\n<p>One great plug-in that&rsquo;s been written is <a href=\"http://code.google.com/p/gedit-ftp-browser/\">gedit-ftp-\nbrowser</a>, an FTP client that\nembeds itself into the editor giving you the ability to remotely edit files\nover FTP. I&rsquo;ve just been accepted as a contributor to the project which I&rsquo;m\nreally excited about. <a href=\"http://code.google.com/p/gedit-ftp-\nbrowser/source/diff?spec=svn5&amp;r=5&amp;format=side&amp;path=/trunk/FTP.py\">I&rsquo;ve implemented a &ldquo;Save As&rdquo;\nfeature</a> allowing the\nuser to create and upload new files over FTP. Next up I&rsquo;ll be working on the\nability to manage multiple FTP servers via profiles.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2009-11-03 10:00:00",
            "slug": "ftp-browser-for-gedit-1",
            "expiry_date": null
        }
    },
    {
        "pk": 22,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "Lately I&rsquo;ve noticed people posting various different takes on making the\ndefault Django settings a lot more dynamic. The development and deployment\nrequirements for the projects I work on tend to be far from straight-forward\nand over time I&rsquo;ve come up with my own approach to Django settings, so here it\nis.",
            "title": "Dynamic Django Deployment",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "django python",
            "content": "<p>Lately I&rsquo;ve noticed people posting various different takes on making the\ndefault Django settings a lot more dynamic. The development and deployment\nrequirements for the projects I work on tend to be far from straight-forward\nand over time I&rsquo;ve come up with my own approach to Django settings, so here it\nis.</p>\n\n<p>The simplest approach typically involves importing all the names from a custom\nsettings module at the end of the project&rsquo;s standard settings module,\nproviding the ability to override settings on a per machine basis.</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">local_settings</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</code></pre>\n</div>\n\n<p>This still requires modifying <code>local_settings.py</code> on a per machine basis.\nAnother approach that builds on this is to import a custom settings module\nfrom a <code>host_settings</code> package that has a unique name derived from the current\nmachine the site is running on - this gives the advantage of being able to\nspecify custom settings per machine and have each of these settings modules\nreside in the version control system, without the same file having to be\nmodified on a per machine basis.</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"kn\">from</span> <span class=\"nn\">socket</span> <span class=\"kn\">import</span> <span class=\"n\">gethostname</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">exec</span> <span class=\"p\">(</span><span class=\"s\">&quot;from host_settings.</span><span class=\"si\">%s</span><span class=\"s\"> import *&quot;</span> <span class=\"o\">%</span> \n        <span class=\"n\">gethostname</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s\">&quot;-&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;_&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s\">&quot;.&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;_&quot;</span><span class=\"p\">))</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</code></pre>\n</div>\n\n<p>This simple version of the <code>host_settings</code> approach I&rsquo;ve seen attempts to deal\nwith the differences between a valid hostname and a valid module name with the\ntwo calls to replace, but ignores the fact a hostname could begin with a\nnumber which would be an invalid module name. Other versions of this approach\nhandle this correctly and involve calling the <code>__import__</code> built-in, iterating\nover and updating each name in the settings module individually, but once we\nlook at some further requirements below and how to deal with them we&rsquo;ll find\nthis isn&rsquo;t necessary.</p>\n\n<p>Let&rsquo;s take a step back for a moment and talk about some of the requirements I\nmentioned before. Where I work a project can end up deployed in a dozen\ndifferent locations - a handful of developer machines and various different\nservers managing the project life cycle. Due to a variety of non-technical\nreasons it&rsquo;s often required that various versions of a project run side by\nside in the same location, so with a project called <code>project_x</code> we end up with\n<code>project_x_feature_a</code> and <code>project_x_feature_b</code> sitting in the same location -\nall of a sudden all of our references to <code>project_x</code> are broken. So we end up\ntaking the approach in our code that the actual name of a project&rsquo;s directory\nis a moving target and should never be referenced - we never import from\n<code>package_x</code> and anything in our settings module that would typically reference\nthis we set dynamically.</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"n\">project_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">__file__</span><span class=\"p\">))</span>\n<span class=\"n\">project_dir</span> <span class=\"o\">=</span> <span class=\"n\">project_path</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">sep</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">MEDIA_URL</span> <span class=\"o\">=</span> <span class=\"s\">&quot;/site_media/&quot;</span>\n<span class=\"n\">MEDIA_ROOT</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">project_path</span><span class=\"p\">,</span> <span class=\"n\">MEDIA_URL</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s\">&quot;/&quot;</span><span class=\"p\">))</span>\n<span class=\"n\">TEMPLATE_DIRS</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">project_path</span><span class=\"p\">,</span> <span class=\"s\">&quot;templates&quot;</span><span class=\"p\">),)</span>\n<span class=\"n\">ADMIN_MEDIA_PREFIX</span> <span class=\"o\">=</span> <span class=\"s\">&quot;/media/&quot;</span>\n<span class=\"n\">ROOT_URLCONF</span> <span class=\"o\">=</span> <span class=\"s\">&quot;</span><span class=\"si\">%s</span><span class=\"s\">.urls&quot;</span> <span class=\"o\">%</span> <span class=\"n\">project_dir</span>\n</code></pre>\n</div>\n\n<p>So that removes any hard-coded reference to the project&rsquo;s directory name,\nhowever we sometimes have to go as far as having host specific settings that\nvary across these different project versions residing on the same machine,\nsuch as a different database for example. The ultimate goal here is to not\nhave any files in the project&rsquo;s version control repository that are manually\nedited for a specific instance of the project. So using the <code>host_settings</code>\napproach from earlier on, we continue on from the code above by using the\n<code>project_dir</code> variable when referencing the machine specific <code>host_settings</code>\nmodule so that each of the <code>host_settings</code> modules are named not only after\nthe machine they exist for, but the project directory as well.</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"kn\">from</span> <span class=\"nn\">socket</span> <span class=\"kn\">import</span> <span class=\"n\">gethostname</span>\n<span class=\"n\">host_settings_module</span> <span class=\"o\">=</span> <span class=\"s\">&quot;</span><span class=\"si\">%s</span><span class=\"s\">_</span><span class=\"si\">%s</span><span class=\"s\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">project_dir</span><span class=\"p\">,</span> \n    <span class=\"n\">gethostname</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s\">&quot;-&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;_&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s\">&quot;.&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;_&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">())</span>\n<span class=\"n\">host_settings_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">project_path</span><span class=\"p\">,</span> <span class=\"s\">&quot;host_settings&quot;</span><span class=\"p\">,</span> \n    <span class=\"s\">&quot;</span><span class=\"si\">%s</span><span class=\"s\">.py&quot;</span> <span class=\"o\">%</span> <span class=\"n\">host_settings_module</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">host_settings_path</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">host_settings_path</span><span class=\"p\">,</span> <span class=\"s\">&quot;w&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span> <span class=\"ne\">IOError</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span> <span class=\"s\">&quot;couldnt create host_settings module: </span><span class=\"si\">%s</span><span class=\"s\"> &quot;</span> <span class=\"o\">%</span> <span class=\"n\">host_settings_path</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">exec</span> <span class=\"s\">&quot;from host_settings.</span><span class=\"si\">%s</span><span class=\"s\"> import *&quot;</span> <span class=\"o\">%</span> <span class=\"n\">host_settings_module</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n<span class=\"n\">TEMPLATE_DEBUG</span> <span class=\"o\">=</span> <span class=\"n\">DEBUG</span>\n</code></pre>\n</div>\n\n<p>As an added bonus, we try to create the <code>host_settings</code> module if it&rsquo;s missing\nand warn if we&rsquo;re unable to create it.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2009-10-20 10:00:00",
            "slug": "dynamic-django-deployment",
            "expiry_date": null
        }
    },
    {
        "pk": 47,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "Lately I&rsquo;ve noticed people posting various different takes on making the\ndefault Django settings a lot more dynamic. The development and deployment\nrequirements for the projects I work on tend to be far from straight-forward\nand over time I&rsquo;ve come up with my own approach to Django settings, so here it\nis.",
            "title": "Dynamic Django Deployment",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "django python",
            "content": "<p>Lately I&rsquo;ve noticed people posting various different takes on making the\ndefault Django settings a lot more dynamic. The development and deployment\nrequirements for the projects I work on tend to be far from straight-forward\nand over time I&rsquo;ve come up with my own approach to Django settings, so here it\nis.</p>\n\n<p>The simplest approach typically involves importing all the names from a custom\nsettings module at the end of the project&rsquo;s standard settings module,\nproviding the ability to override settings on a per machine basis.</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">local_settings</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</code></pre>\n</div>\n\n<p>This still requires modifying <code>local_settings.py</code> on a per machine basis.\nAnother approach that builds on this is to import a custom settings module\nfrom a <code>host_settings</code> package that has a unique name derived from the current\nmachine the site is running on - this gives the advantage of being able to\nspecify custom settings per machine and have each of these settings modules\nreside in the version control system, without the same file having to be\nmodified on a per machine basis.</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"kn\">from</span> <span class=\"nn\">socket</span> <span class=\"kn\">import</span> <span class=\"n\">gethostname</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">exec</span> <span class=\"p\">(</span><span class=\"s\">&quot;from host_settings.</span><span class=\"si\">%s</span><span class=\"s\"> import *&quot;</span> <span class=\"o\">%</span> \n        <span class=\"n\">gethostname</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s\">&quot;-&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;_&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s\">&quot;.&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;_&quot;</span><span class=\"p\">))</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</code></pre>\n</div>\n\n<p>This simple version of the <code>host_settings</code> approach I&rsquo;ve seen attempts to deal\nwith the differences between a valid hostname and a valid module name with the\ntwo calls to replace, but ignores the fact a hostname could begin with a\nnumber which would be an invalid module name. Other versions of this approach\nhandle this correctly and involve calling the <code>__import__</code> built-in, iterating\nover and updating each name in the settings module individually, but once we\nlook at some further requirements below and how to deal with them we&rsquo;ll find\nthis isn&rsquo;t necessary.</p>\n\n<p>Let&rsquo;s take a step back for a moment and talk about some of the requirements I\nmentioned before. Where I work a project can end up deployed in a dozen\ndifferent locations - a handful of developer machines and various different\nservers managing the project life cycle. Due to a variety of non-technical\nreasons it&rsquo;s often required that various versions of a project run side by\nside in the same location, so with a project called <code>project_x</code> we end up with\n<code>project_x_feature_a</code> and <code>project_x_feature_b</code> sitting in the same location -\nall of a sudden all of our references to <code>project_x</code> are broken. So we end up\ntaking the approach in our code that the actual name of a project&rsquo;s directory\nis a moving target and should never be referenced - we never import from\n<code>package_x</code> and anything in our settings module that would typically reference\nthis we set dynamically.</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"n\">project_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">__file__</span><span class=\"p\">))</span>\n<span class=\"n\">project_dir</span> <span class=\"o\">=</span> <span class=\"n\">project_path</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">sep</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">MEDIA_URL</span> <span class=\"o\">=</span> <span class=\"s\">&quot;/site_media/&quot;</span>\n<span class=\"n\">MEDIA_ROOT</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">project_path</span><span class=\"p\">,</span> <span class=\"n\">MEDIA_URL</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s\">&quot;/&quot;</span><span class=\"p\">))</span>\n<span class=\"n\">TEMPLATE_DIRS</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">project_path</span><span class=\"p\">,</span> <span class=\"s\">&quot;templates&quot;</span><span class=\"p\">),)</span>\n<span class=\"n\">ADMIN_MEDIA_PREFIX</span> <span class=\"o\">=</span> <span class=\"s\">&quot;/media/&quot;</span>\n<span class=\"n\">ROOT_URLCONF</span> <span class=\"o\">=</span> <span class=\"s\">&quot;</span><span class=\"si\">%s</span><span class=\"s\">.urls&quot;</span> <span class=\"o\">%</span> <span class=\"n\">project_dir</span>\n</code></pre>\n</div>\n\n<p>So that removes any hard-coded reference to the project&rsquo;s directory name,\nhowever we sometimes have to go as far as having host specific settings that\nvary across these different project versions residing on the same machine,\nsuch as a different database for example. The ultimate goal here is to not\nhave any files in the project&rsquo;s version control repository that are manually\nedited for a specific instance of the project. So using the <code>host_settings</code>\napproach from earlier on, we continue on from the code above by using the\n<code>project_dir</code> variable when referencing the machine specific <code>host_settings</code>\nmodule so that each of the <code>host_settings</code> modules are named not only after\nthe machine they exist for, but the project directory as well.</p>\n\n<div class=\"highlight\"><pre><code class=\"python\"><span class=\"kn\">from</span> <span class=\"nn\">socket</span> <span class=\"kn\">import</span> <span class=\"n\">gethostname</span>\n<span class=\"n\">host_settings_module</span> <span class=\"o\">=</span> <span class=\"s\">&quot;</span><span class=\"si\">%s</span><span class=\"s\">_</span><span class=\"si\">%s</span><span class=\"s\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">project_dir</span><span class=\"p\">,</span> \n    <span class=\"n\">gethostname</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s\">&quot;-&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;_&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s\">&quot;.&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;_&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">())</span>\n<span class=\"n\">host_settings_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">project_path</span><span class=\"p\">,</span> <span class=\"s\">&quot;host_settings&quot;</span><span class=\"p\">,</span> \n    <span class=\"s\">&quot;</span><span class=\"si\">%s</span><span class=\"s\">.py&quot;</span> <span class=\"o\">%</span> <span class=\"n\">host_settings_module</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">host_settings_path</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">host_settings_path</span><span class=\"p\">,</span> <span class=\"s\">&quot;w&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span> <span class=\"ne\">IOError</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span> <span class=\"s\">&quot;couldnt create host_settings module: </span><span class=\"si\">%s</span><span class=\"s\"> &quot;</span> <span class=\"o\">%</span> <span class=\"n\">host_settings_path</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">exec</span> <span class=\"s\">&quot;from host_settings.</span><span class=\"si\">%s</span><span class=\"s\"> import *&quot;</span> <span class=\"o\">%</span> <span class=\"n\">host_settings_module</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n<span class=\"n\">TEMPLATE_DEBUG</span> <span class=\"o\">=</span> <span class=\"n\">DEBUG</span>\n</code></pre>\n</div>\n\n<p>As an added bonus, we try to create the <code>host_settings</code> module if it&rsquo;s missing\nand warn if we&rsquo;re unable to create it.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2009-10-20 10:00:00",
            "slug": "dynamic-django-deployment-1",
            "expiry_date": null
        }
    },
    {
        "pk": 23,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "After living the last few years without a mobile phone it finally became a\nproblem for me so recently I decided to get a new one. I only needed something\nsimple for receiving calls, not making them so any kind of plan or contract\nwas out of the question since I could spend a few bucks on pre-paid and\ntheoretically not pay anything after that. I didn&rsquo;t consider any of the latest\nsmart-phones either like the HTC or iPhone (I wouldn&rsquo;t buy a crippled device\nanyway) since they&rsquo;re so ridiculously priced compared to lower end models that\naren&rsquo;t even a year old.",
            "title": "Nokia E63",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "nokia symbian python",
            "content": "<p>After living the last few years without a mobile phone it finally became a\nproblem for me so recently I decided to get a new one. I only needed something\nsimple for receiving calls, not making them so any kind of plan or contract\nwas out of the question since I could spend a few bucks on pre-paid and\ntheoretically not pay anything after that. I didn&rsquo;t consider any of the latest\nsmart-phones either like the HTC or iPhone (I wouldn&rsquo;t buy a crippled device\nanyway) since they&rsquo;re so ridiculously priced compared to lower end models that\naren&rsquo;t even a year old.</p>\n\n<p>I ended up getting a <a href=\"http://www.nokia.com.au/find-products/all-\nphones/nokia-e63\">Nokia E63</a> that has a full qwerty keyboard and wireless LAN access\nwhich were the main selling points for me. It cost $299 when it was being sold\nfor over $500 at other places around town so it felt like a smart purchase.\nApart from those features I looked at, I really knew nothing about the phone\nand <a href=\"http://symbian.org/\">Symbian OS</a> which powers it and after taking a\ncloser look at the software available for it I&rsquo;ve been really surprised.</p>\n\n<p><img alt=\"Google Apps for Symbian\nOS\" src=\"http://media.tumblr.com/tumblr_ksm6cyOpF11qa0qji.png\" /> Google Apps for\nSymbian OS <img alt=\"Putty for Symbian\nOS\" src=\"http://media.tumblr.com/tumblr_ksm6dyg1OZ1qa0qji.png\" /> Putty for Symbian OS\n<img alt=\"Python (PyS60) on Symbian\nOS\" src=\"http://media.tumblr.com/tumblr_ksm6eqDj7h1qa0qji.png\" /> Python (PyS60) on\nSymbian OS</p>\n\n<p>Google has created a <a href=\"http://www.google.com/mobile/products.html#p=default\">handful of Symbian\napps</a> for things like\ngmail, reader, youtube and maps which all work great. The other day I found an\napp called <a href=\"http://www.fring.com\">fring</a> which is very similar to\n<a href=\"http://pidgin.im/\">Pidgin</a> in that it wraps up all the various IM clients\ninto one, even including Skype with voice working! So it has essentially\nturned my phone into a Skype handset which is amazing. I&rsquo;ve also found that\nthere&rsquo;s a version of <a href=\"http://s2putty.sourceforge.net/\">putty for Symbian</a> so I\ncan actually SSH onto any of our Linux servers or desktops and access the\nshell from my phone!</p>\n\n<p>The most incredible thing I&rsquo;ve found for Symbian however has been a project\ncalled <a href=\"https://garage.maemo.org/projects/pys60/\">PyS60</a> - Nokia has actually\nported the Python run-time to the Symbian OS. I was amazed once I had this\ninstalled and was sitting there typing out Python code into an interactive\nconsole directly on my phone. The standard library is even included and it&rsquo;s\nvery interesting - certain pieces aren&rsquo;t fully ported but it comes with a\nhandful of modules specifically for PyS60 which handle things like locating\nwireless networks and working with the user interface. It even includes\n<a href=\"http://www.opengl.org/\">OpenGL</a> bindings which is unbelievable - that&rsquo;s\nright, you can develop 3D games in Python for your phone.</p>\n\n<p>I&rsquo;m well into developing my first app which is a small RPC server for the\nphone controlled by a <a href=\"http://wxwidgets.org/\">wxWidgets</a> client. The idea is\nto be able to traverse the phone&rsquo;s file system and create, edit and execute\nPython apps on the phone from a remote machine. The SimpleXMLRPCServer module\nisn&rsquo;t included with PyS60 and broke when I tried to copy it onto the phone and\nimport it manually. I&rsquo;ve since been able to patch it and get it working which\nI&rsquo;ve <a href=\"https://garage.maemo.org/tracker/index.php?func=deta\nil&amp;aid=4576&amp;group_id=854&amp;atid=3201\">submitted to Nokia</a>, hopefully they&rsquo;ll include it in their\nnext release.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2009-09-26 10:00:00",
            "slug": "nokia-e63",
            "expiry_date": null
        }
    },
    {
        "pk": 48,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "After living the last few years without a mobile phone it finally became a\nproblem for me so recently I decided to get a new one. I only needed something\nsimple for receiving calls, not making them so any kind of plan or contract\nwas out of the question since I could spend a few bucks on pre-paid and\ntheoretically not pay anything after that. I didn&rsquo;t consider any of the latest\nsmart-phones either like the HTC or iPhone (I wouldn&rsquo;t buy a crippled device\nanyway) since they&rsquo;re so ridiculously priced compared to lower end models that\naren&rsquo;t even a year old.",
            "title": "Nokia E63",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "nokia symbian python",
            "content": "<p>After living the last few years without a mobile phone it finally became a\nproblem for me so recently I decided to get a new one. I only needed something\nsimple for receiving calls, not making them so any kind of plan or contract\nwas out of the question since I could spend a few bucks on pre-paid and\ntheoretically not pay anything after that. I didn&rsquo;t consider any of the latest\nsmart-phones either like the HTC or iPhone (I wouldn&rsquo;t buy a crippled device\nanyway) since they&rsquo;re so ridiculously priced compared to lower end models that\naren&rsquo;t even a year old.</p>\n\n<p>I ended up getting a <a href=\"http://www.nokia.com.au/find-products/all-\nphones/nokia-e63\">Nokia E63</a> that has a full qwerty keyboard and wireless LAN access\nwhich were the main selling points for me. It cost $299 when it was being sold\nfor over $500 at other places around town so it felt like a smart purchase.\nApart from those features I looked at, I really knew nothing about the phone\nand <a href=\"http://symbian.org/\">Symbian OS</a> which powers it and after taking a\ncloser look at the software available for it I&rsquo;ve been really surprised.</p>\n\n<p><img alt=\"Google Apps for Symbian\nOS\" src=\"http://media.tumblr.com/tumblr_ksm6cyOpF11qa0qji.png\" /> Google Apps for\nSymbian OS <img alt=\"Putty for Symbian\nOS\" src=\"http://media.tumblr.com/tumblr_ksm6dyg1OZ1qa0qji.png\" /> Putty for Symbian OS\n<img alt=\"Python (PyS60) on Symbian\nOS\" src=\"http://media.tumblr.com/tumblr_ksm6eqDj7h1qa0qji.png\" /> Python (PyS60) on\nSymbian OS</p>\n\n<p>Google has created a <a href=\"http://www.google.com/mobile/products.html#p=default\">handful of Symbian\napps</a> for things like\ngmail, reader, youtube and maps which all work great. The other day I found an\napp called <a href=\"http://www.fring.com\">fring</a> which is very similar to\n<a href=\"http://pidgin.im/\">Pidgin</a> in that it wraps up all the various IM clients\ninto one, even including Skype with voice working! So it has essentially\nturned my phone into a Skype handset which is amazing. I&rsquo;ve also found that\nthere&rsquo;s a version of <a href=\"http://s2putty.sourceforge.net/\">putty for Symbian</a> so I\ncan actually SSH onto any of our Linux servers or desktops and access the\nshell from my phone!</p>\n\n<p>The most incredible thing I&rsquo;ve found for Symbian however has been a project\ncalled <a href=\"https://garage.maemo.org/projects/pys60/\">PyS60</a> - Nokia has actually\nported the Python run-time to the Symbian OS. I was amazed once I had this\ninstalled and was sitting there typing out Python code into an interactive\nconsole directly on my phone. The standard library is even included and it&rsquo;s\nvery interesting - certain pieces aren&rsquo;t fully ported but it comes with a\nhandful of modules specifically for PyS60 which handle things like locating\nwireless networks and working with the user interface. It even includes\n<a href=\"http://www.opengl.org/\">OpenGL</a> bindings which is unbelievable - that&rsquo;s\nright, you can develop 3D games in Python for your phone.</p>\n\n<p>I&rsquo;m well into developing my first app which is a small RPC server for the\nphone controlled by a <a href=\"http://wxwidgets.org/\">wxWidgets</a> client. The idea is\nto be able to traverse the phone&rsquo;s file system and create, edit and execute\nPython apps on the phone from a remote machine. The SimpleXMLRPCServer module\nisn&rsquo;t included with PyS60 and broke when I tried to copy it onto the phone and\nimport it manually. I&rsquo;ve since been able to patch it and get it working which\nI&rsquo;ve <a href=\"https://garage.maemo.org/tracker/index.php?func=deta\nil&amp;aid=4576&amp;group_id=854&amp;atid=3201\">submitted to Nokia</a>, hopefully they&rsquo;ll include it in their\nnext release.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2009-09-26 10:00:00",
            "slug": "nokia-e63-1",
            "expiry_date": null
        }
    },
    {
        "pk": 24,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "I think CHM files are great and my main Python reference is the CHM version of\nthe main documentation. I\u2019ve used GnoCHM\nwhich is the default CHM viewer for Gnome for quite a while and it\u2019s really\npoor - slow as hell on startup and segfaults half the time you click a link. I\nfinally gave up and looked for an alternative which I found in\nKchmViewer which appears to be the default CHM\nviewer for KDE. As usual the KDE counterpart of a given Gnome app is much\neasier on the eyes and in this case the problems I had are solved - lightning\nfast and stable.",
            "title": "CHM Files on Linux",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "chm linux gnome kde",
            "content": "<p>I think CHM files are great and my main Python reference is the CHM version of\nthe main documentation. I\u2019ve used <a href=\"http://gnochm.sourceforge.net/\">GnoCHM</a>\nwhich is the default CHM viewer for Gnome for quite a while and it\u2019s really\npoor - slow as hell on startup and segfaults half the time you click a link. I\nfinally gave up and looked for an alternative which I found in\n<a href=\"http://www.kchmviewer.net/\">KchmViewer</a> which appears to be the default CHM\nviewer for KDE. As usual the KDE counterpart of a given Gnome app is much\neasier on the eyes and in this case the problems I had are solved - lightning\nfast and stable.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2009-09-21 10:00:00",
            "slug": "chm-files-on-linux",
            "expiry_date": null
        }
    },
    {
        "pk": 49,
        "model": "blog.blogpost",
        "fields": {
            "status": 2,
            "allow_comments": true,
            "description": "I think CHM files are great and my main Python reference is the CHM version of\nthe main documentation. I\u2019ve used GnoCHM\nwhich is the default CHM viewer for Gnome for quite a while and it\u2019s really\npoor - slow as hell on startup and segfaults half the time you click a link. I\nfinally gave up and looked for an alternative which I found in\nKchmViewer which appears to be the default CHM\nviewer for KDE. As usual the KDE counterpart of a given Gnome app is much\neasier on the eyes and in this case the problems I had are solved - lightning\nfast and stable.",
            "title": "CHM Files on Linux",
            "rating_average": 0.0,
            "image": "",
            "categories": [],
            "site": 1,
            "keywords_string": "chm linux gnome kde",
            "content": "<p>I think CHM files are great and my main Python reference is the CHM version of\nthe main documentation. I\u2019ve used <a href=\"http://gnochm.sourceforge.net/\">GnoCHM</a>\nwhich is the default CHM viewer for Gnome for quite a while and it\u2019s really\npoor - slow as hell on startup and segfaults half the time you click a link. I\nfinally gave up and looked for an alternative which I found in\n<a href=\"http://www.kchmviewer.net/\">KchmViewer</a> which appears to be the default CHM\nviewer for KDE. As usual the KDE counterpart of a given Gnome app is much\neasier on the eyes and in this case the problems I had are solved - lightning\nfast and stable.</p>",
            "rating_count": 0,
            "comments_count": 0,
            "user": 1,
            "featured_image": null,
            "short_url": null,
            "publish_date": "2009-09-21 10:00:00",
            "slug": "chm-files-on-linux-1",
            "expiry_date": null
        }
    },
    {
        "pk": 1,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "osx",
            "title": "osx"
        }
    },
    {
        "pk": 2,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "ruby",
            "title": "ruby"
        }
    },
    {
        "pk": 3,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "django",
            "title": "django"
        }
    },
    {
        "pk": 4,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "django-dash",
            "title": "django dash"
        }
    },
    {
        "pk": 5,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "open-source",
            "title": "open source"
        }
    },
    {
        "pk": 6,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "version-control",
            "title": "version control"
        }
    },
    {
        "pk": 7,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "mercurial",
            "title": "mercurial"
        }
    },
    {
        "pk": 8,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "git",
            "title": "git"
        }
    },
    {
        "pk": 9,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "github",
            "title": "github"
        }
    },
    {
        "pk": 10,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "bitbucket",
            "title": "bitbucket"
        }
    },
    {
        "pk": 11,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "mezzanine",
            "title": "mezzanine"
        }
    },
    {
        "pk": 12,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "python",
            "title": "python"
        }
    },
    {
        "pk": 13,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "orm",
            "title": "orm"
        }
    },
    {
        "pk": 14,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "websockets",
            "title": "websockets"
        }
    },
    {
        "pk": 15,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "socketio",
            "title": "socket.io"
        }
    },
    {
        "pk": 16,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "rails",
            "title": "rails"
        }
    },
    {
        "pk": 17,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "cartridge",
            "title": "cartridge"
        }
    },
    {
        "pk": 18,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "scalability",
            "title": "scalability"
        }
    },
    {
        "pk": 19,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "australia",
            "title": "australia"
        }
    },
    {
        "pk": 20,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "techworld",
            "title": "techworld"
        }
    },
    {
        "pk": 21,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "cio-magazine",
            "title": "cio magazine"
        }
    },
    {
        "pk": 22,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "coffeescript",
            "title": "coffeescript"
        }
    },
    {
        "pk": 23,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "javascript",
            "title": "javascript"
        }
    },
    {
        "pk": 24,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "nodejs",
            "title": "node.js"
        }
    },
    {
        "pk": 25,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "sockets",
            "title": "sockets"
        }
    },
    {
        "pk": 26,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "rosetta-code",
            "title": "rosetta code"
        }
    },
    {
        "pk": 27,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "aspnet",
            "title": "asp.net"
        }
    },
    {
        "pk": 28,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "java",
            "title": "java"
        }
    },
    {
        "pk": 29,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "php",
            "title": "php"
        }
    },
    {
        "pk": 30,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "security",
            "title": "security"
        }
    },
    {
        "pk": 31,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "ecommerce",
            "title": "ecommerce"
        }
    },
    {
        "pk": 32,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "cms",
            "title": "cms"
        }
    },
    {
        "pk": 33,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "gunicorn",
            "title": "gunicorn"
        }
    },
    {
        "pk": 34,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "curses",
            "title": "curses"
        }
    },
    {
        "pk": 35,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "documentation",
            "title": "documentation"
        }
    },
    {
        "pk": 36,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "linux",
            "title": "linux"
        }
    },
    {
        "pk": 37,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "xorg",
            "title": "x.org"
        }
    },
    {
        "pk": 38,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "algorithms",
            "title": "algorithms"
        }
    },
    {
        "pk": 39,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "data-structures",
            "title": "data structures"
        }
    },
    {
        "pk": 40,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "facebook",
            "title": "facebook"
        }
    },
    {
        "pk": 41,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "gedit",
            "title": "gedit"
        }
    },
    {
        "pk": 42,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "gnome",
            "title": "gnome"
        }
    },
    {
        "pk": 43,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "nokia",
            "title": "nokia"
        }
    },
    {
        "pk": 44,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "symbian",
            "title": "symbian"
        }
    },
    {
        "pk": 45,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "chm",
            "title": "chm"
        }
    },
    {
        "pk": 46,
        "model": "generic.keyword",
        "fields": {
            "site": 1,
            "slug": "kde",
            "title": "kde"
        }
    },
    {
        "pk": 1,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 25,
            "_order": 0,
            "content_type": 26,
            "keyword": 1
        }
    },
    {
        "pk": 6,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 26,
            "_order": 0,
            "content_type": 26,
            "keyword": 6
        }
    },
    {
        "pk": 12,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 27,
            "_order": 0,
            "content_type": 26,
            "keyword": 3
        }
    },
    {
        "pk": 16,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 28,
            "_order": 0,
            "content_type": 26,
            "keyword": 5
        }
    },
    {
        "pk": 17,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 29,
            "_order": 0,
            "content_type": 26,
            "keyword": 3
        }
    },
    {
        "pk": 20,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 30,
            "_order": 0,
            "content_type": 26,
            "keyword": 12
        }
    },
    {
        "pk": 24,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 31,
            "_order": 0,
            "content_type": 26,
            "keyword": 11
        }
    },
    {
        "pk": 28,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 32,
            "_order": 0,
            "content_type": 26,
            "keyword": 11
        }
    },
    {
        "pk": 35,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 33,
            "_order": 0,
            "content_type": 26,
            "keyword": 22
        }
    },
    {
        "pk": 39,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 34,
            "_order": 0,
            "content_type": 26,
            "keyword": 26
        }
    },
    {
        "pk": 43,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 35,
            "_order": 0,
            "content_type": 26,
            "keyword": 12
        }
    },
    {
        "pk": 48,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 36,
            "_order": 0,
            "content_type": 26,
            "keyword": 27
        }
    },
    {
        "pk": 55,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 37,
            "_order": 0,
            "content_type": 26,
            "keyword": 3
        }
    },
    {
        "pk": 60,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 38,
            "_order": 0,
            "content_type": 26,
            "keyword": 12
        }
    },
    {
        "pk": 64,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 39,
            "_order": 0,
            "content_type": 26,
            "keyword": 3
        }
    },
    {
        "pk": 69,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 40,
            "_order": 0,
            "content_type": 26,
            "keyword": 3
        }
    },
    {
        "pk": 73,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 41,
            "_order": 0,
            "content_type": 26,
            "keyword": 12
        }
    },
    {
        "pk": 75,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 42,
            "_order": 0,
            "content_type": 26,
            "keyword": 12
        }
    },
    {
        "pk": 77,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 43,
            "_order": 0,
            "content_type": 26,
            "keyword": 36
        }
    },
    {
        "pk": 79,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 44,
            "_order": 0,
            "content_type": 26,
            "keyword": 12
        }
    },
    {
        "pk": 82,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 45,
            "_order": 0,
            "content_type": 26,
            "keyword": 3
        }
    },
    {
        "pk": 84,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 46,
            "_order": 0,
            "content_type": 26,
            "keyword": 41
        }
    },
    {
        "pk": 88,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 47,
            "_order": 0,
            "content_type": 26,
            "keyword": 3
        }
    },
    {
        "pk": 90,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 48,
            "_order": 0,
            "content_type": 26,
            "keyword": 43
        }
    },
    {
        "pk": 93,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 49,
            "_order": 0,
            "content_type": 26,
            "keyword": 45
        }
    },
    {
        "pk": 2,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 25,
            "_order": 1,
            "content_type": 26,
            "keyword": 2
        }
    },
    {
        "pk": 7,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 26,
            "_order": 1,
            "content_type": 26,
            "keyword": 7
        }
    },
    {
        "pk": 13,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 27,
            "_order": 1,
            "content_type": 26,
            "keyword": 11
        }
    },
    {
        "pk": 18,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 29,
            "_order": 1,
            "content_type": 26,
            "keyword": 14
        }
    },
    {
        "pk": 21,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 30,
            "_order": 1,
            "content_type": 26,
            "keyword": 2
        }
    },
    {
        "pk": 25,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 31,
            "_order": 1,
            "content_type": 26,
            "keyword": 17
        }
    },
    {
        "pk": 29,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 32,
            "_order": 1,
            "content_type": 26,
            "keyword": 17
        }
    },
    {
        "pk": 36,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 33,
            "_order": 1,
            "content_type": 26,
            "keyword": 23
        }
    },
    {
        "pk": 40,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 34,
            "_order": 1,
            "content_type": 26,
            "keyword": 12
        }
    },
    {
        "pk": 44,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 35,
            "_order": 1,
            "content_type": 26,
            "keyword": 3
        }
    },
    {
        "pk": 49,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 36,
            "_order": 1,
            "content_type": 26,
            "keyword": 19
        }
    },
    {
        "pk": 56,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 37,
            "_order": 1,
            "content_type": 26,
            "keyword": 12
        }
    },
    {
        "pk": 61,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 38,
            "_order": 1,
            "content_type": 26,
            "keyword": 3
        }
    },
    {
        "pk": 65,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 39,
            "_order": 1,
            "content_type": 26,
            "keyword": 12
        }
    },
    {
        "pk": 70,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 40,
            "_order": 1,
            "content_type": 26,
            "keyword": 33
        }
    },
    {
        "pk": 74,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 41,
            "_order": 1,
            "content_type": 26,
            "keyword": 3
        }
    },
    {
        "pk": 76,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 42,
            "_order": 1,
            "content_type": 26,
            "keyword": 35
        }
    },
    {
        "pk": 78,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 43,
            "_order": 1,
            "content_type": 26,
            "keyword": 37
        }
    },
    {
        "pk": 80,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 44,
            "_order": 1,
            "content_type": 26,
            "keyword": 38
        }
    },
    {
        "pk": 83,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 45,
            "_order": 1,
            "content_type": 26,
            "keyword": 40
        }
    },
    {
        "pk": 85,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 46,
            "_order": 1,
            "content_type": 26,
            "keyword": 36
        }
    },
    {
        "pk": 89,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 47,
            "_order": 1,
            "content_type": 26,
            "keyword": 12
        }
    },
    {
        "pk": 91,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 48,
            "_order": 1,
            "content_type": 26,
            "keyword": 44
        }
    },
    {
        "pk": 94,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 49,
            "_order": 1,
            "content_type": 26,
            "keyword": 36
        }
    },
    {
        "pk": 3,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 25,
            "_order": 2,
            "content_type": 26,
            "keyword": 3
        }
    },
    {
        "pk": 8,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 26,
            "_order": 2,
            "content_type": 26,
            "keyword": 8
        }
    },
    {
        "pk": 14,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 27,
            "_order": 2,
            "content_type": 26,
            "keyword": 12
        }
    },
    {
        "pk": 19,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 29,
            "_order": 2,
            "content_type": 26,
            "keyword": 15
        }
    },
    {
        "pk": 22,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 30,
            "_order": 2,
            "content_type": 26,
            "keyword": 16
        }
    },
    {
        "pk": 26,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 31,
            "_order": 2,
            "content_type": 26,
            "keyword": 3
        }
    },
    {
        "pk": 30,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 32,
            "_order": 2,
            "content_type": 26,
            "keyword": 3
        }
    },
    {
        "pk": 37,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 33,
            "_order": 2,
            "content_type": 26,
            "keyword": 24
        }
    },
    {
        "pk": 41,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 34,
            "_order": 2,
            "content_type": 26,
            "keyword": 25
        }
    },
    {
        "pk": 45,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 35,
            "_order": 2,
            "content_type": 26,
            "keyword": 5
        }
    },
    {
        "pk": 50,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 36,
            "_order": 2,
            "content_type": 26,
            "keyword": 3
        }
    },
    {
        "pk": 57,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 37,
            "_order": 2,
            "content_type": 26,
            "keyword": 11
        }
    },
    {
        "pk": 62,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 38,
            "_order": 2,
            "content_type": 26,
            "keyword": 5
        }
    },
    {
        "pk": 66,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 39,
            "_order": 2,
            "content_type": 26,
            "keyword": 29
        }
    },
    {
        "pk": 71,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 40,
            "_order": 2,
            "content_type": 26,
            "keyword": 12
        }
    },
    {
        "pk": 81,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 44,
            "_order": 2,
            "content_type": 26,
            "keyword": 39
        }
    },
    {
        "pk": 86,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 46,
            "_order": 2,
            "content_type": 26,
            "keyword": 12
        }
    },
    {
        "pk": 92,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 48,
            "_order": 2,
            "content_type": 26,
            "keyword": 12
        }
    },
    {
        "pk": 95,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 49,
            "_order": 2,
            "content_type": 26,
            "keyword": 42
        }
    },
    {
        "pk": 4,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 25,
            "_order": 3,
            "content_type": 26,
            "keyword": 4
        }
    },
    {
        "pk": 9,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 26,
            "_order": 3,
            "content_type": 26,
            "keyword": 9
        }
    },
    {
        "pk": 15,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 27,
            "_order": 3,
            "content_type": 26,
            "keyword": 13
        }
    },
    {
        "pk": 23,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 30,
            "_order": 3,
            "content_type": 26,
            "keyword": 3
        }
    },
    {
        "pk": 27,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 31,
            "_order": 3,
            "content_type": 26,
            "keyword": 18
        }
    },
    {
        "pk": 31,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 32,
            "_order": 3,
            "content_type": 26,
            "keyword": 19
        }
    },
    {
        "pk": 38,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 33,
            "_order": 3,
            "content_type": 26,
            "keyword": 25
        }
    },
    {
        "pk": 42,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 34,
            "_order": 3,
            "content_type": 26,
            "keyword": 5
        }
    },
    {
        "pk": 46,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 35,
            "_order": 3,
            "content_type": 26,
            "keyword": 11
        }
    },
    {
        "pk": 51,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 36,
            "_order": 3,
            "content_type": 26,
            "keyword": 28
        }
    },
    {
        "pk": 58,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 37,
            "_order": 3,
            "content_type": 26,
            "keyword": 17
        }
    },
    {
        "pk": 63,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 38,
            "_order": 3,
            "content_type": 26,
            "keyword": 11
        }
    },
    {
        "pk": 67,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 39,
            "_order": 3,
            "content_type": 26,
            "keyword": 32
        }
    },
    {
        "pk": 72,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 40,
            "_order": 3,
            "content_type": 26,
            "keyword": 34
        }
    },
    {
        "pk": 87,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 46,
            "_order": 3,
            "content_type": 26,
            "keyword": 42
        }
    },
    {
        "pk": 96,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 49,
            "_order": 3,
            "content_type": 26,
            "keyword": 46
        }
    },
    {
        "pk": 5,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 25,
            "_order": 4,
            "content_type": 26,
            "keyword": 5
        }
    },
    {
        "pk": 10,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 26,
            "_order": 4,
            "content_type": 26,
            "keyword": 10
        }
    },
    {
        "pk": 32,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 32,
            "_order": 4,
            "content_type": 26,
            "keyword": 20
        }
    },
    {
        "pk": 47,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 35,
            "_order": 4,
            "content_type": 26,
            "keyword": 4
        }
    },
    {
        "pk": 52,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 36,
            "_order": 4,
            "content_type": 26,
            "keyword": 5
        }
    },
    {
        "pk": 59,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 37,
            "_order": 4,
            "content_type": 26,
            "keyword": 31
        }
    },
    {
        "pk": 68,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 39,
            "_order": 4,
            "content_type": 26,
            "keyword": 11
        }
    },
    {
        "pk": 11,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 26,
            "_order": 5,
            "content_type": 26,
            "keyword": 5
        }
    },
    {
        "pk": 33,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 32,
            "_order": 5,
            "content_type": 26,
            "keyword": 21
        }
    },
    {
        "pk": 53,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 36,
            "_order": 5,
            "content_type": 26,
            "keyword": 29
        }
    },
    {
        "pk": 34,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 32,
            "_order": 6,
            "content_type": 26,
            "keyword": 5
        }
    },
    {
        "pk": 54,
        "model": "generic.assignedkeyword",
        "fields": {
            "object_pk": 36,
            "_order": 6,
            "content_type": 26,
            "keyword": 30
        }
    }
]