[
    {
        "pk": 12, 
        "model": "core.keyword", 
        "fields": {
            "value": "algorithms"
        }
    }, 
    {
        "pk": 18, 
        "model": "core.keyword", 
        "fields": {
            "value": "chm"
        }
    }, 
    {
        "pk": 6, 
        "model": "core.keyword", 
        "fields": {
            "value": "cms"
        }
    }, 
    {
        "pk": 8, 
        "model": "core.keyword", 
        "fields": {
            "value": "curses"
        }
    }, 
    {
        "pk": 13, 
        "model": "core.keyword", 
        "fields": {
            "value": "data structures"
        }
    }, 
    {
        "pk": 2, 
        "model": "core.keyword", 
        "fields": {
            "value": "django"
        }
    }, 
    {
        "pk": 9, 
        "model": "core.keyword", 
        "fields": {
            "value": "documentation"
        }
    }, 
    {
        "pk": 14, 
        "model": "core.keyword", 
        "fields": {
            "value": "gedit"
        }
    }, 
    {
        "pk": 15, 
        "model": "core.keyword", 
        "fields": {
            "value": "gnome"
        }
    }, 
    {
        "pk": 7, 
        "model": "core.keyword", 
        "fields": {
            "value": "gunicorn"
        }
    }, 
    {
        "pk": 19, 
        "model": "core.keyword", 
        "fields": {
            "value": "kde"
        }
    }, 
    {
        "pk": 10, 
        "model": "core.keyword", 
        "fields": {
            "value": "linux"
        }
    }, 
    {
        "pk": 4, 
        "model": "core.keyword", 
        "fields": {
            "value": "mezzanine"
        }
    }, 
    {
        "pk": 16, 
        "model": "core.keyword", 
        "fields": {
            "value": "nokia"
        }
    }, 
    {
        "pk": 3, 
        "model": "core.keyword", 
        "fields": {
            "value": "open source"
        }
    }, 
    {
        "pk": 5, 
        "model": "core.keyword", 
        "fields": {
            "value": "php"
        }
    }, 
    {
        "pk": 1, 
        "model": "core.keyword", 
        "fields": {
            "value": "python"
        }
    }, 
    {
        "pk": 17, 
        "model": "core.keyword", 
        "fields": {
            "value": "symbian"
        }
    }, 
    {
        "pk": 11, 
        "model": "core.keyword", 
        "fields": {
            "value": "x.org"
        }
    }, 
    {
        "pk": 1, 
        "model": "blog.blogpost", 
        "fields": {
            "status": 2, 
            "description": "<p>You&#8217;d be forgiven for reading the title of this post and thinking it&#8217;s about a crazy approach to project briefing that somehow mimics open source development - as interesting as that sounds, it isn&#8217;t the case and my motives are much more simplistic and sinister. What I&#8217;d like to do here is put a brief together for an open source project called <a href=\"http://mezzanine.jupo.org\">Mezzanine</a>. This brief isn&#8217;t specifically geared towards programmers so if you think this isn&#8217;t for you then please continue reading and let me prove you wrong.</p>", 
            "_keywords": "django mezzanine open source python", 
            "title": "An Open Source Brief", 
            "short_url": null, 
            "content": "<p>You&#8217;d be forgiven for reading the title of this post and thinking it&#8217;s about a crazy approach to project briefing that somehow mimics open source development - as interesting as that sounds, it isn&#8217;t the case and my motives are much more simplistic and sinister. What I&#8217;d like to do here is put a brief together for an open source project called <a href=\"http://mezzanine.jupo.org\">Mezzanine</a>. This brief isn&#8217;t specifically geared towards programmers so if you think this isn&#8217;t for you then please continue reading and let me prove you wrong.</p>\n\n<p><em>What is Mezzanine?</em></p>\n\n<p>Anyone who <a href=\"http://twitter.com/stephen_mcd\">follows my updates</a> will know it&#8217;s an open source CMS framework I&#8217;ve been working on over the last couple of months. It now has a <a href=\"http://mezzanine.jupo.org/docs/overview.html#features\">concrete feature set</a> having come remarkably far in a very short amount of time. This might lead you to believe an entire team of people have been working on it but in fact it&#8217;s mostly been myself alone - it&#8217;s thanks to the incredibly rapid development that using <a href=\"http://djangoproject.com\">Django</a> brings you that so much has been done so quickly. For those readers who aren&#8217;t familiar with it please go ahead and check out the <a href=\"http://mezzanine.jupo.org/docs/overview.html\">overview</a> in the <a href=\"http://mezzanine.jupo.org/docs/\">documentation</a>, play around with the <a href=\"http://mezzanine.jupo.org/blog/\">live demo</a> and have a read of my <a href=\"http://blog.jupo.org/post/684732364/mezzanine-just-another-django-cms\">previous blog post</a> that talks about why I started Mezzanine and what I hope to achieve.</p>\n\n<p><em>Why would I want to help?</em></p>\n\n<p>Perhaps you&#8217;re an end user of a poorly designed CMS and you&#8217;ve often wished you could do something about it. Perhaps you&#8217;re a developer that&#8217;s had the unfortunate experience of trying to extend a seemingly user-friendly CMS that&#8217;s built using archaic technology, and wished you could be working with something that&#8217;s much more cutting edge and elegantly designed. Perhaps you&#8217;re someone who &#8220;gets&#8221; open source at a deeper level but always felt as someone who isn&#8217;t a coder that you couldn&#8217;t contribute. Perhaps you&#8217;re in business development and you&#8217;re tired of trying to sell &#8220;enterprise&#8221; crap with completely absurd price tags. If you have anything to do with web development then there&#8217;s something in this for you.</p>\n\n<p><em>What do I get out of it?</em></p>\n\n<p>As much as you put in of course. The experience of contributing to open source software on paper can often be a competitive advantage over other candidates for a job interview or even development contracts for your business. There&#8217;s also the chance of notoriety - imagine being responsible for the user interface or branding of the next <a href=\"http://wordpress.org/\">Wordpress</a>. Imagine your staff are core contributors to one of the web&#8217;s leading development tools. Again the success of the project will only match its contributions so it&#8217;s ultimately up to you.</p>\n\n<p><em>What can I do to help?</em></p>\n\n<p>A common misconception about open source software is that it&#8217;s something that only coders can participate in. Unfortunately the result of this is that the majority of open source software ends up being only contributed to by coders and is incredibly lacking in a variety of areas. I&#8217;m talking about visual branding, copy-writing, UI development - all these areas that fall outside of coding but are equally crucial in successfully shipping a professional piece of software. Mezzanine has now reached a point where it can only continue to move forward at a consistent pace by bringing in these skills that I don&#8217;t specialise in. So without further ado, here are the specific roles I think need filling and what the focus of each would be.</p>\n\n<p><strong>Graphic Designer</strong>\n<br/>The entire project is desperately in need of some visual love. At the simplest level it could really use some basic branding such as a logo and &#8220;powered by&#8221; buttons. Then there&#8217;s the <a href=\"http://mezzanine.jupo.org\">Mezzanine website</a>, <a href=\"http://mezzanine.jupo.org/docs/\">documentation</a> and <a href=\"http://mezzanine.jupo.org/blog/\">default site</a> that are all currently quite spartan looking.</p>\n\n<p><strong>Interface Developer</strong>\n<br/>So far the template mark-up for the default site are as minimal as can be. While this is intentional to some extent in order to best serve those that would come along and customise them for their projects, I think this idea could be improved upon with a greater level of modularity. I&#8217;m also keen to introduce a CSS framework like <a href=\"http://blueprintcss.org/\">Blueprint</a> into the default site. Once that&#8217;s all in order then I&#8217;d like to address what theming would look like. Is this simply a matter of packaging up copies of the templates as separate themes? A great milestone for Mezzanine would be to have a handful of built-in themes created, as well as documenting the process for creating your own.</p>\n\n<p><strong>UX Designer</strong>\n<br/>I&#8217;ve introduced a handful of user interface elements into Mezzanine that could definitely use some ironing out from a usability and accessibility perspective. The main contender is the navigation tree in the admin that&#8217;s used for managing the hierarchy of the entire site as well as being the entry point for accessing most of the content management. There&#8217;s the dashboard interface for the admin area which is in a very early stage. There&#8217;s the overall layout for both the <a href=\"http://mezzanine.jupo.org\">project&#8217;s own site</a> and the <a href=\"http://mezzanine.jupo.org/blog/\">default site</a>. Lastly and of great importance, there&#8217;s the <a href=\"http://mezzanine.jupo.org/docs/inline-editing.html\">entire system for in-line editing</a> which is featured in the default site - making this feature as user-friendly as possible is critical.</p>\n\n<p><strong>Technical Writer</strong>\n<br/>Mezzanine currently has a good start on <a href=\"http://mezzanine.jupo.org/docs/\">documentation</a> but at the moment it&#8217;s mostly focused on developers. I&#8217;d eventually like to have a lot more material aimed at both end users of Mezzanine as well as marketing material geared towards business decision makers.</p>\n\n<p><strong>Product Evangelist</strong>\n<br/>This is probably the easiest task of all. We simply need the word to be spread. Learn about Mezzanine and use whatever medium you like to let the world know how great it is, be it <a href=\"http://twitter.com\">Twitter</a>, mailing lists or blog posts.</p>\n\n<p>This list isn&#8217;t entirely complete and some of the tasks certainly overlap. If you think you fit the bill or know anyone else who would get a kick out of working on Mezzanine then there&#8217;s no time like the present to get started. There aren&#8217;t any obligations with this so contributions of any size are welcome. If you&#8217;d like to get involved but don&#8217;t know where to start just <a href=\"http://groups.google.com/group/mezzanine-users\">post a message to the mailing list</a> and let&#8217;s talk!</p>", 
            "publish_date": "2010-07-22 22:56:00", 
            "user": 1, 
            "keywords": [
                [
                    "django"
                ], 
                [
                    "mezzanine"
                ], 
                [
                    "open source"
                ], 
                [
                    "python"
                ]
            ], 
            "slug": "an-open-source-brief"
        }
    }, 
    {
        "pk": 2, 
        "model": "blog.blogpost", 
        "fields": {
            "status": 2, 
            "description": "<p>Ask any developer that has put together a <a href=\"http://docs.djangoproject.com/en/dev/intro/tutorial02/\">Django admin interface</a> and they&#8217;ll tell you that it&#8217;s an amazing piece of technology that allows you to whip up an admin system for your web application in a number of minutes rather than days. Unfortunately this power can be a double-edged sword as without enough time and thought up front, a developer can easily end up creating an interface that&#8217;s almost impossible for its intended audience to work with.</p>", 
            "_keywords": "cms django mezzanine php python", 
            "title": "Mezzanine: Just Another Django CMS?", 
            "short_url": null, 
            "content": "<p>Ask any developer that has put together a <a href=\"http://docs.djangoproject.com/en/dev/intro/tutorial02/\">Django admin interface</a> and they&#8217;ll tell you that it&#8217;s an amazing piece of technology that allows you to whip up an admin system for your web application in a number of minutes rather than days. Unfortunately this power can be a double-edged sword as without enough time and thought up front, a developer can easily end up creating an interface that&#8217;s almost impossible for its intended audience to work with.</p>\n\n<p>I&#8217;ve seen this issue manifest itself in two ways. The first is the bare-bones case where the options available for creating the admin interface are simply left out, resulting in a spartan admin that does little to guide the user on how to use it. The second could be described as the opposite end of the scale where there is actually far too much going on in the admin interface at the cost of simplicity and intuitiveness. This can often be the result of gluing together a range of resuable apps that each have their own approach to providing admin interfaces with the end result looking like a <a href=\"http://en.wikipedia.org/wiki/Rube_Goldberg_machine\">Rube Goldberg machine</a>. These scenarios are bad for customers and bad for Django. When end-users think of Django, they think of the admin interface - that&#8217;s what Django is to them so it&#8217;s critical to get this component right.</p>\n\n<p>I recently had <a href=\"http://wordpress.org/\">Wordpress</a> suggested to me as a solution to this problem and it&#8217;s easy to see why. The Wordpress install base alone speaks huge volumes while its admin interface is incredibly user-friendly. It also benefits from not requiring technical expertise to get a simple website with pages and a blog up and running. However I felt this idea overlooked the underlying issue of poorly configured Django admin interfaces, while taking a step backwards by investing in <a href=\"http://php.net/\">PHP</a> - a relatively inelegant technology with a very limited application scope.</p> \n\n<p>My solution to the problem was to tackle the underlying issue more directly by creating a Django application which I&#8217;ve called <a href=\"http://github.com/stephenmcd/mezzanine\">Mezzanine</a>. The approach I&#8217;ve taken is to have functionality on par with Wordpress that can be used as a starting point when developing basic websites. This meant putting a lot of thought into the admin options used, as well as including a custom version of the <a href=\"http://code.google.com/p/django-grappelli/\">django-grappelli admin skin</a> to come up with a modern looking and intuitive admin interface. The other key approach I&#8217;ve taken is to include as much functionality as possible directly in the application itself for the sake of a consistent and lightweight code base that can easily be hacked on. It&#8217;s worth noting that this is in total contrast to other Django website applications such as <a href=\"http://github.com/montylounge/django-mingus\">Mingus</a> and <a href=\"http://pinaxproject.com/\">Pinax</a>, and that this difference really comes down to a question of scope. Pinax for example is capable of a much wider range of functionality than what I&#8217;m aiming for with Mezzanine out of the box which is to cater for basic websites with the following features:</p>\n\n<ul>\n<li>Hierarchical page navigation</li>\n<li>Save as draft and preview on site</li>\n<li>Drag-n-drop page ordering</li>\n<li>WYSIWYG editing</li>\n<li>SEO friendly URLs and meta data</li>\n<li>Mobile device detection and templates</li>\n<li>Blogging engine</li>\n<li>Tagging</li>\n<li>Custom templates per page or blog post</li>\n<li>\n<a href=\"http://gravatar.com/\">Gravatar</a> integration</li>\n<li>\n<a href=\"http://www.google.com/analytics/\">Google Analytics</a> integration</li>\n<li>\n<a href=\"http://twitter.com\">Twitter</a> feed integration</li>\n<li>\n<a href=\"http://bit.ly/\">bit.ly</a> integration</li>\n<li>Sharing via Facebook or Twitter</li>\n<li>Built-in threaded comments, or:</li>\n<li>\n<a href=\"http://disqus.com/\">Disqus</a> integration</li>\n</ul>\n<p style=\"text-align:center; font-style:italic; margin:30px auto;\"><img src=\"http://media.tumblr.com/tumblr_l3su7jFBHM1qa0qji.png\" style=\"border:1px solid #666;\"/><br/>The Mezzanine admin dashboard</p>\n<p>I&#8217;ve open sourced the initial version of Mezzanine with a BSD license on both <a href=\"http://github.com/stephenmcd/mezzanine\">github</a> and <a href=\"http://bitbucket.org/stephenmcd/mezzanine\">bitbucket</a> - it still has a long way to go so jump right in and fork away.</p>", 
            "publish_date": "2010-06-11 07:06:00", 
            "user": 1, 
            "keywords": [
                [
                    "cms"
                ], 
                [
                    "django"
                ], 
                [
                    "mezzanine"
                ], 
                [
                    "php"
                ], 
                [
                    "python"
                ]
            ], 
            "slug": "mezzanine-just-another-django-cms"
        }
    }, 
    {
        "pk": 3, 
        "model": "blog.blogpost", 
        "fields": {
            "status": 2, 
            "description": "<p>Like a lot of Django shops our software stack consists of two layers up front: a public facing web/proxy server and an application server sitting behind it. For a long time we&#8217;ve enjoyed success using <a href=\"http://nginx.org/en/\">nginx</a> and <a href=\"http://httpd.apache.org/\">Apache</a> to fill these roles respectively, but as an application server the 800 pound gorilla that is Apache can really be overkill, which over time we&#8217;ve found can have quite a cost around lack of granular control. So we recently decided to try out the up and coming <a href=\"http://gunicorn.org/\">gunicorn</a> which is currently gaining in popularity throughout the Django community and so far it&#8217;s been very smooth.</p>", 
            "_keywords": "curses django gunicorn python", 
            "title": "Announcing gunicorn-console", 
            "short_url": null, 
            "content": "<p>Like a lot of Django shops our software stack consists of two layers up front: a public facing web/proxy server and an application server sitting behind it. For a long time we&#8217;ve enjoyed success using <a href=\"http://nginx.org/en/\">nginx</a> and <a href=\"http://httpd.apache.org/\">Apache</a> to fill these roles respectively, but as an application server the 800 pound gorilla that is Apache can really be overkill, which over time we&#8217;ve found can have quite a cost around lack of granular control. So we recently decided to try out the up and coming <a href=\"http://gunicorn.org/\">gunicorn</a> which is currently gaining in popularity throughout the Django community and so far it&#8217;s been very smooth.</p>\n\n<p>One of the interesting features it provides is the ability to handle various kill signals which map to functions such as adding and removing worker processes as well as reloading the master process, all on the fly without dropping a single client connection. So after a brief honeymoon period I then came up with the following list of questions that mightn&#8217;t be apparent when serving a single application, but really come into play when serving dozens of applications this way on a single server:</p>\n\n<ul>\n<li>How can we deal with the signals interface without knowledge of process IDs?</li>\n    <li>How can we gain visiblity around the ports being used?</li>\n    <li>How can we gain visiblity around the number of worker procesess being used?</li>\n    <li>How can we gain visiblity around the amount of memory being used per application?</li>\n</ul>\n<p>All of these can be answered with a small amount of command-line-fu, however I wanted this process to be ridiculously easy for our entire team. For quite some time I&#8217;ve wanted to put together a console application using the <a href=\"http://docs.python.org/howto/curses.html\">curses library</a> so a simple management console for gunicorn seemed like the perfect opportunity to do so and as such, <a href=\"http://github.com/stephenmcd/gunicorn-console\">gunicorn-console</a> was born.</p>\n\n<p style=\"text-align:center;\"><img src=\"http://media.tumblr.com/tumblr_l35p9x2tmU1qa0qji.jpg\"/></p>\n\n<p>As pictured above, after firing up a few gunicorn instances with varying parameters gunicorn-console gives you the following interface in all its 8bit glory:</p>\n\n<p style=\"text-align:center;\"><img src=\"http://media.tumblr.com/tumblr_l35pgbDlII1qa0qji.gif\"/></p>\n\n<p>If you&#8217;re hosting multiple applications served up via gunicorn then gunicorn-console should make managing them easier. I&#8217;ve released it with a BSD license on both <a href=\"http://github.com/stephenmcd/gunicorn-console\">github</a> and <a href=\"http://bitbucket.org/stephenmcd/gunicorn-console\">bitbucket</a> using the amazing <a href=\"http://hg-git.github.com/\">hg-git extension</a>, so go ahead and make it better!</p>\n\n<p><strong>Update, May 30:</strong> I ended this post with a request for others to contribute and after only a day someone already has. <a href=\"http://adamv.com/\">Adam Vandenberg</a> went ahead and forked the project with <a href=\"http://github.com/adamv/gunicorn-console/commit/0f9bc2672f4cc0b1d560b353304d374d5c927120\">some patches</a> to get it running on OSX, so a big thanks goes to him.</p>", 
            "publish_date": "2010-05-29 11:20:00", 
            "user": 1, 
            "keywords": [
                [
                    "curses"
                ], 
                [
                    "django"
                ], 
                [
                    "gunicorn"
                ], 
                [
                    "python"
                ]
            ], 
            "slug": "announcing-gunicorn-console"
        }
    }, 
    {
        "pk": 4, 
        "model": "blog.blogpost", 
        "fields": {
            "status": 2, 
            "description": "<p>A project of mine contains a number of third-party apps that are development related and potentially not available on every machine the project will run on. My general approach to dealing with these was to try and import the app in my <code>settings</code> module and if successful, add it to the <code>INSTALLED_APPS</code> setting. However as the number of these apps grew it became a wart within the settings module so I put together this snippet for managing them.</p>", 
            "_keywords": "django python", 
            "title": "Optional Django Apps", 
            "short_url": null, 
            "content": "<p>A project of mine contains a number of third-party apps that are development related and potentially not available on every machine the project will run on. My general approach to dealing with these was to try and import the app in my <code>settings</code> module and if successful, add it to the <code>INSTALLED_APPS</code> setting. However as the number of these apps grew it became a wart within the settings module so I put together this snippet for managing them.</p>\n\n<p>We first create a sequence of dictionaries, each containing information about an installed app such as the module to try and import, an extra potential condition for checking and then the sequences of names to add to <code>INSTALLED_APPS</code>, <code>MIDDLEWARE_CLASSES</code> and <code>TEMPLATE_CONTEXT_PROCESSORS</code>. Let&#8217;s start with the settings for optionally including the apps <a href=\"http://github.com/django-extensions/django-extensions\">django-command-extensions</a>, <a href=\"http://github.com/robhudson/django-debug-toolbar\">django-debug-toolbar</a> and <a href=\"http://south.aeracode.org\">south</a>.</p>\n\n<pre style=\"color:#d1d1d1;background:#000000;\"><span style=\"color:#9999a9; \"># Define any settings specific to each of the optional apps.</span>\n<span style=\"color:#e66170; font-weight:bold; \">import</span> sys\nUSE_SOUTH <span style=\"color:#d2cd86; \">=</span> <span style=\"color:#e66170; font-weight:bold; \">not</span> <span style=\"color:#d2cd86; \">(</span><span style=\"color:#e34adc; \">len</span><span style=\"color:#d2cd86; \">(</span>sys<span style=\"color:#d2cd86; \">.</span>argv<span style=\"color:#d2cd86; \">)</span> <span style=\"color:#d2cd86; \">&gt;</span> <span style=\"color:#008c00; \">1</span> <span style=\"color:#e66170; font-weight:bold; \">and</span> sys<span style=\"color:#d2cd86; \">.</span>argv<span style=\"color:#d2cd86; \">[</span><span style=\"color:#008c00; \">1</span><span style=\"color:#d2cd86; \">]</span> <span style=\"color:#d2cd86; \">=</span><span style=\"color:#d2cd86; \">=</span> <span style=\"color:#00c4c4; \">\"test\"</span><span style=\"color:#d2cd86; \">)</span>\nDEBUG_TOOLBAR_CONFIG <span style=\"color:#d2cd86; \">=</span> <span style=\"color:#b060b0; \">{</span><span style=\"color:#00c4c4; \">\"INTERCEPT_REDIRECTS\"</span><span style=\"color:#d2cd86; \">:</span> <span style=\"color:#e34adc; \">False</span><span style=\"color:#b060b0; \">}</span>\n\n<span style=\"color:#9999a9; \"># Sequence for each optional app as a dict containing info about the app.</span>\nOPTIONAL_APPS <span style=\"color:#d2cd86; \">=</span> <span style=\"color:#d2cd86; \">(</span>\n    <span style=\"color:#b060b0; \">{</span><span style=\"color:#00c4c4; \">\"import\"</span><span style=\"color:#d2cd86; \">:</span> <span style=\"color:#00c4c4; \">\"django_extensions\"</span><span style=\"color:#d2cd86; \">,</span> <span style=\"color:#00c4c4; \">\"apps\"</span><span style=\"color:#d2cd86; \">:</span> <span style=\"color:#d2cd86; \">(</span><span style=\"color:#00c4c4; \">\"django_extensions\"</span><span style=\"color:#d2cd86; \">,</span><span style=\"color:#d2cd86; \">)</span><span style=\"color:#b060b0; \">}</span><span style=\"color:#d2cd86; \">,</span>\n    <span style=\"color:#b060b0; \">{</span><span style=\"color:#00c4c4; \">\"import\"</span><span style=\"color:#d2cd86; \">:</span> <span style=\"color:#00c4c4; \">\"debug_toolbar\"</span><span style=\"color:#d2cd86; \">,</span> <span style=\"color:#00c4c4; \">\"apps\"</span><span style=\"color:#d2cd86; \">:</span> <span style=\"color:#d2cd86; \">(</span><span style=\"color:#00c4c4; \">\"debug_toolbar\"</span><span style=\"color:#d2cd86; \">,</span><span style=\"color:#d2cd86; \">)</span><span style=\"color:#d2cd86; \">,</span> \n        <span style=\"color:#00c4c4; \">\"middleware\"</span><span style=\"color:#d2cd86; \">:</span> <span style=\"color:#d2cd86; \">(</span><span style=\"color:#00c4c4; \">\"debug_toolbar.middleware.DebugToolbarMiddleware\"</span><span style=\"color:#d2cd86; \">,</span><span style=\"color:#d2cd86; \">)</span><span style=\"color:#b060b0; \">}</span><span style=\"color:#d2cd86; \">,</span>\n    <span style=\"color:#b060b0; \">{</span><span style=\"color:#00c4c4; \">\"import\"</span><span style=\"color:#d2cd86; \">:</span> <span style=\"color:#00c4c4; \">\"south\"</span><span style=\"color:#d2cd86; \">,</span> <span style=\"color:#00c4c4; \">\"apps\"</span><span style=\"color:#d2cd86; \">:</span> <span style=\"color:#d2cd86; \">(</span><span style=\"color:#00c4c4; \">\"south\"</span><span style=\"color:#d2cd86; \">,</span><span style=\"color:#d2cd86; \">)</span><span style=\"color:#d2cd86; \">,</span> <span style=\"color:#00c4c4; \">\"condition\"</span><span style=\"color:#d2cd86; \">:</span> USE_SOUTH<span style=\"color:#b060b0; \">}</span><span style=\"color:#d2cd86; \">,</span>\n<span style=\"color:#d2cd86; \">)</span>\n</pre>\n\n<p>Next we simply iterate through the sequence of optional apps and set them up.</p>\n\n<pre style=\"color:#d1d1d1;background:#000000;\"><span style=\"color:#9999a9; \"># Set up each optional app if available.</span>\n<span style=\"color:#e66170; font-weight:bold; \">for</span> app <span style=\"color:#e66170; font-weight:bold; \">in</span> OPTIONAL_APPS<span style=\"color:#d2cd86; \">:</span>\n    <span style=\"color:#e66170; font-weight:bold; \">if</span> app<span style=\"color:#d2cd86; \">.</span>get<span style=\"color:#d2cd86; \">(</span><span style=\"color:#00c4c4; \">\"condition\"</span><span style=\"color:#d2cd86; \">,</span> <span style=\"color:#e34adc; \">True</span><span style=\"color:#d2cd86; \">)</span><span style=\"color:#d2cd86; \">:</span>\n        <span style=\"color:#e66170; font-weight:bold; \">try</span><span style=\"color:#d2cd86; \">:</span>\n            <span style=\"color:#e34adc; \">__import__</span><span style=\"color:#d2cd86; \">(</span>app<span style=\"color:#d2cd86; \">[</span><span style=\"color:#00c4c4; \">\"import\"</span><span style=\"color:#d2cd86; \">]</span><span style=\"color:#d2cd86; \">)</span>\n        <span style=\"color:#e66170; font-weight:bold; \">except</span> <span style=\"color:#e34adc; \">ImportError</span><span style=\"color:#d2cd86; \">:</span>\n            <span style=\"color:#e66170; font-weight:bold; \">pass</span>\n        <span style=\"color:#e66170; font-weight:bold; \">else</span><span style=\"color:#d2cd86; \">:</span>\n            INSTALLED_APPS <span style=\"color:#d2cd86; \">+</span><span style=\"color:#d2cd86; \">=</span> app<span style=\"color:#d2cd86; \">.</span>get<span style=\"color:#d2cd86; \">(</span><span style=\"color:#00c4c4; \">\"apps\"</span><span style=\"color:#d2cd86; \">,</span> <span style=\"color:#d2cd86; \">(</span><span style=\"color:#d2cd86; \">)</span><span style=\"color:#d2cd86; \">)</span>\n            MIDDLEWARE_CLASSES <span style=\"color:#d2cd86; \">+</span><span style=\"color:#d2cd86; \">=</span> app<span style=\"color:#d2cd86; \">.</span>get<span style=\"color:#d2cd86; \">(</span><span style=\"color:#00c4c4; \">\"middleware\"</span><span style=\"color:#d2cd86; \">,</span> <span style=\"color:#d2cd86; \">(</span><span style=\"color:#d2cd86; \">)</span><span style=\"color:#d2cd86; \">)</span>\n            TEMPLATE_CONTEXT_PROCESSORS <span style=\"color:#d2cd86; \">+</span><span style=\"color:#d2cd86; \">=</span> app<span style=\"color:#d2cd86; \">.</span>get<span style=\"color:#d2cd86; \">(</span><span style=\"color:#00c4c4; \">\"context_processors\"</span><span style=\"color:#d2cd86; \">,</span> <span style=\"color:#d2cd86; \">(</span><span style=\"color:#d2cd86; \">)</span><span style=\"color:#d2cd86; \">)</span>\n</pre>", 
            "publish_date": "2010-05-10 17:41:39", 
            "user": 1, 
            "keywords": [
                [
                    "django"
                ], 
                [
                    "python"
                ]
            ], 
            "slug": "optional-django-apps"
        }
    }, 
    {
        "pk": 5, 
        "model": "blog.blogpost", 
        "fields": {
            "status": 2, 
            "description": "<p>Anyone who has programmed in Python for a considerable length of time will at least have some passing familiarity with <a href=\"http://www.python.org/dev/peps/pep-0008/\">PEP 8</a> - the document that goes into an incredible level of detail in dictating precisely how code should be written. While its primary goal is to ensure that Python code is written in a consistant fashion throughout the community, therefore making it as easy as possible to read, it also provides one of many aspects that makes programming in Python an incredibly efficient process - it negates the need for a lot of decision making around any of the choices one might come across that are already covered in PEP 8.</p>", 
            "_keywords": "documentation python", 
            "title": "Where is PEP 8 for Technical Documentation?", 
            "short_url": null, 
            "content": "<p>Anyone who has programmed in Python for a considerable length of time will at least have some passing familiarity with <a href=\"http://www.python.org/dev/peps/pep-0008/\">PEP 8</a> - the document that goes into an incredible level of detail in dictating precisely how code should be written. While its primary goal is to ensure that Python code is written in a consistant fashion throughout the community, therefore making it as easy as possible to read, it also provides one of many aspects that makes programming in Python an incredibly efficient process - it negates the need for a lot of decision making around any of the choices one might come across that are already covered in PEP 8.</p>\n\n<p>I&#8217;ve recently been spending a lot of time writing technical documentation. While it&#8217;s been interesting doing something different for a change, the perfectionist in me is constantly frustated with finding myself using inconsistant language across different sections when faced with the exact same context, for example:</p>\n\n<ul>\n<li>contains / has / includes / provides</li>\n    <li>discussed / referred to / described / mentioned</li>\n    <li>above / earlier / previously</li>\n    <li>below / later / next</li>\n</ul>\n<p>Are these types of ambiguities in technical writing something that professional editors typically deal with? What I&#8217;d love to see is something like PEP 8 for technical documentation.</p>", 
            "publish_date": "2010-03-18 17:49:00", 
            "user": 1, 
            "keywords": [
                [
                    "documentation"
                ], 
                [
                    "python"
                ]
            ], 
            "slug": "where-is-pep-8-for-technical-documentation"
        }
    }, 
    {
        "pk": 6, 
        "model": "blog.blogpost", 
        "fields": {
            "status": 2, 
            "description": "<p>Earlier this week I had the pleasure of removing my final Windows install after wiping my machine at work and installing Ubuntu on it. It was during the late 90s that I first tried out Linux after getting my hands on a Redhat 6.1 CD from the cover of a magazine I&#8217;d bought. I didn&#8217;t keep it installed for very long and after a few more tries over the years with Mandrake (now Mandrivia) and Damn Small Linux, it wasn&#8217;t until 2005 when I installed Slackware 10.2 as my primary operating system at home and really cut my teeth on it in order to test how cross-platform my Python projects were. It was a great experience learning about all the various sub-systems, compiling software and libraries from source, embracing the command line and modifying some of the internal scripts to get things working the way I wanted.</p>", 
            "_keywords": "linux x.org", 
            "title": "Hasta la Vista, Windows", 
            "short_url": null, 
            "content": "<p>Earlier this week I had the pleasure of removing my final Windows install after wiping my machine at work and installing Ubuntu on it. It was during the late 90s that I first tried out Linux after getting my hands on a Redhat 6.1 CD from the cover of a magazine I&#8217;d bought. I didn&#8217;t keep it installed for very long and after a few more tries over the years with Mandrake (now Mandrivia) and Damn Small Linux, it wasn&#8217;t until 2005 when I installed Slackware 10.2 as my primary operating system at home and really cut my teeth on it in order to test how cross-platform my Python projects were. It was a great experience learning about all the various sub-systems, compiling software and libraries from source, embracing the command line and modifying some of the internal scripts to get things working the way I wanted.</p>\n\n<p>Fast forward to 2010 and in my workplace the migration from a Microsoft development shop to a Linux/Python shop after several years is finally complete, paving the way for this latest install. I did experience a couple of hiccups that hadn&#8217;t happened before. Firstly I have dual wide-screen monitors at work and I rotate one of them 90 degrees in order to maximize the amount of visible code on my screen. The display properties in Ubuntu only gave me the ability to flip the display 180 degrees which seemed quite odd so I then tried to manually rotate the display with the <a href=\"http://en.wikipedia.org/wiki/RandR\">xrandr</a> command which reported my overall virtual screen size as being too small for the rotation. I resolved this with the update below to my x.org configuration to use a virtual screen size large enough to handle the rotation while including the second monitor.</p>\n\n<pre style=\"color:#d1d1d1;background:#000000;\">Section <span style=\"color:#00c4c4; \">\"Screen\"</span>\n    Identifier <span style=\"color:#00c4c4; \">\"Configured Screen Device\"</span>\n    Device <span style=\"color:#00c4c4; \">\"Configured Video Device\"</span>\n    SubSection <span style=\"color:#00c4c4; \">\"Display\"</span>\n        Virtual <span style=\"color:#00a800; \">2880</span> <span style=\"color:#00a800; \">1440</span>\n    EndSubSection\nEndSection\n</pre>\n\n<p>The second issue was more a lack of foresight on my part than a problem with the new install itself. After a vanilla install of any modern operating system you&#8217;ll undoubtedly be required to download a series of updates that have occurred since the version you&#8217;ve installed was initially released. The difference with most Linux distributions is that almost all of your software is managed in this way from installing to updating, it all goes through the same service known as a package manager - one of the many things with Linux that once you&#8217;re used to using you won&#8217;t know how you ever worked without it. So away I went with the initial round of updates which left the package manager busy for several hours, during which time some issues arose with a project that immediately required my attention. Unfortunately I needed to install a handful of libraries to get up and running and with the package manager busy I was left in a real bind. Fortunately I was able to use one of our test servers remotely to resolve the issue but the lesson learnt here is that for a new development system it&#8217;s best to leave the initial system update until after your development environment is completely set up.</p>", 
            "publish_date": "2010-02-13 18:33:00", 
            "user": 1, 
            "keywords": [
                [
                    "linux"
                ], 
                [
                    "x.org"
                ]
            ], 
            "slug": "hasta-la-vista-windows"
        }
    }, 
    {
        "pk": 7, 
        "model": "blog.blogpost", 
        "fields": {
            "status": 2, 
            "description": "<p>My current project has the common requirement of storing and rendering a hierarchical tree of categories. This project is geared towards potentially junior developers with the expectation of it being hacked at every time it&#8217;s used - a set of scaffolding where simplicity isn&#8217;t just a loose goal but a fundamental requirement.</p>", 
            "_keywords": "algorithms data structures python", 
            "title": "Linear Traversal of Adjacency List Trees", 
            "short_url": null, 
            "content": "<p>My current project has the common requirement of storing and rendering a hierarchical tree of categories. This project is geared towards potentially junior developers with the expectation of it being hacked at every time it&#8217;s used - a set of scaffolding where simplicity isn&#8217;t just a loose goal but a fundamental requirement.</p>\n\n<p>Two popular approaches to the hierarchical tree are the <a href=\"http://articles.sitepoint.com/print/hierarchical-data-database\">Adjacency List (AL) and  Modified Preorder Tree Traversal (MPTT) models</a>. The advantage of AL is that it only stores the exact data required for representing the tree while MPTT stores extraneous data for assisting in traversing the tree in an optimal fashion. The simplicity of the AL model makes it much better suited to the requirements I mentioned, however the problem with AL is the recursive nature in which you traverse it.</p>\n\n<pre style=\"color:#d1d1d1;background:#000000;\"><span style=\"color:#e66170; font-weight:bold; \">def</span> show_branch<span style=\"color:#d2cd86; \">(</span>parent<span style=\"color:#d2cd86; \">,</span> depth<span style=\"color:#d2cd86; \">=</span><span style=\"color:#008c00; \">0</span><span style=\"color:#d2cd86; \">)</span><span style=\"color:#d2cd86; \">:</span>\n    <span style=\"color:#9999a9; \"># iterating the entire tree for each branch gives quadratic performance</span>\n    <span style=\"color:#e66170; font-weight:bold; \">for</span> node <span style=\"color:#e66170; font-weight:bold; \">in</span> nodes<span style=\"color:#d2cd86; \">:</span>\n        <span style=\"color:#e66170; font-weight:bold; \">if</span> node<span style=\"color:#d2cd86; \">.</span>parent <span style=\"color:#d2cd86; \">=</span><span style=\"color:#d2cd86; \">=</span> parent<span style=\"color:#d2cd86; \">:</span>\n            <span style=\"color:#e66170; font-weight:bold; \">print</span> <span style=\"color:#d2cd86; \">(</span><span style=\"color:#00c4c4; \">\" \"</span> <span style=\"color:#d2cd86; \">*</span> depth<span style=\"color:#d2cd86; \">)</span> <span style=\"color:#d2cd86; \">+</span> node\n            show_branch<span style=\"color:#d2cd86; \">(</span>node<span style=\"color:#d2cd86; \">,</span> depth <span style=\"color:#d2cd86; \">+</span> <span style=\"color:#008c00; \">1</span><span style=\"color:#d2cd86; \">)</span>\n</pre>\n\n<p>Worst case here is <em>O</em>(n\u00b2) performance but thanks to <a href=\"http://wiki.python.org/moin/DictionaryKeys\">Python&#8217;s lightning fast hashtable implementation</a> we can create a copy of the tree as a dictionary of branches giving us <em>O</em>(n) overall performance when traversing the entire tree.</p>\n\n<pre style=\"color:#d1d1d1;background:#000000;\"><span style=\"color:#9999a9; \"># copy the tree into a dict of branches</span>\nbranches <span style=\"color:#d2cd86; \">=</span> <span style=\"color:#b060b0; \">{</span><span style=\"color:#b060b0; \">}</span>\n<span style=\"color:#e66170; font-weight:bold; \">for</span> node <span style=\"color:#e66170; font-weight:bold; \">in</span> nodes<span style=\"color:#d2cd86; \">:</span>\n    parent <span style=\"color:#d2cd86; \">=</span> node<span style=\"color:#d2cd86; \">.</span>parent\n    <span style=\"color:#e66170; font-weight:bold; \">if</span> parent <span style=\"color:#e66170; font-weight:bold; \">not</span> <span style=\"color:#e66170; font-weight:bold; \">in</span> branches<span style=\"color:#d2cd86; \">:</span>\n        branches<span style=\"color:#d2cd86; \">[</span>parent<span style=\"color:#d2cd86; \">]</span> <span style=\"color:#d2cd86; \">=</span> <span style=\"color:#d2cd86; \">[</span><span style=\"color:#d2cd86; \">]</span>\n    branches<span style=\"color:#d2cd86; \">[</span>parent<span style=\"color:#d2cd86; \">]</span><span style=\"color:#d2cd86; \">.</span>append<span style=\"color:#d2cd86; \">(</span>node<span style=\"color:#d2cd86; \">)</span>\n\n<span style=\"color:#e66170; font-weight:bold; \">def</span> show_branch<span style=\"color:#d2cd86; \">(</span>parent<span style=\"color:#d2cd86; \">,</span> depth<span style=\"color:#d2cd86; \">=</span><span style=\"color:#008c00; \">0</span><span style=\"color:#d2cd86; \">)</span><span style=\"color:#d2cd86; \">:</span>\n    <span style=\"color:#9999a9; \"># iterating only the nodes in the branch gives linear performance</span>\n    <span style=\"color:#e66170; font-weight:bold; \">for</span> node <span style=\"color:#e66170; font-weight:bold; \">in</span> branches<span style=\"color:#d2cd86; \">[</span>parent<span style=\"color:#d2cd86; \">]</span><span style=\"color:#d2cd86; \">:</span>\n        <span style=\"color:#e66170; font-weight:bold; \">print</span> <span style=\"color:#d2cd86; \">(</span><span style=\"color:#00c4c4; \">\" \"</span> <span style=\"color:#d2cd86; \">*</span> depth<span style=\"color:#d2cd86; \">)</span> <span style=\"color:#d2cd86; \">+</span> node\n        <span style=\"color:#e66170; font-weight:bold; \">if</span> node <span style=\"color:#e66170; font-weight:bold; \">in</span> branches<span style=\"color:#d2cd86; \">:</span>\n            show_branch<span style=\"color:#d2cd86; \">(</span>node<span style=\"color:#d2cd86; \">,</span> depth <span style=\"color:#d2cd86; \">+</span> <span style=\"color:#008c00; \">1</span><span style=\"color:#d2cd86; \">)</span>\n</pre>\n\n<p>When rendering the entire tree, using this technique will greatly increase performance as the tree grows in size. Be aware though that if your application only ever deals with a single branch in any given view, this technique won&#8217;t perform as well as directly querying the database for the nodes in a single branch.</p>", 
            "publish_date": "2010-01-26 12:34:00", 
            "user": 1, 
            "keywords": [
                [
                    "algorithms"
                ], 
                [
                    "data structures"
                ], 
                [
                    "python"
                ]
            ], 
            "slug": "linear-traversal-of-adjacency-list-trees"
        }
    }, 
    {
        "pk": 8, 
        "model": "blog.blogpost", 
        "fields": {
            "status": 2, 
            "description": "<p>Many major Linux distributions such as Ubuntu ship with <a href=\"http://projects.gnome.org/gedit/\">gedit</a> as the default text editor. It has all the standard features you&#8217;d expect in an editor such as syntax highlighting, a tabbed interface and the ability to integrate external tools. Most importantly it&#8217;s highly extensible with the ability to <a href=\"http://live.gnome.org/Gedit/Plugins\">create plug-ins</a> for it written in Python or C.</p>", 
            "_keywords": "gedit gnome linux python", 
            "title": "FTP Browser for gedit", 
            "short_url": null, 
            "content": "<p>Many major Linux distributions such as Ubuntu ship with <a href=\"http://projects.gnome.org/gedit/\">gedit</a> as the default text editor. It has all the standard features you&#8217;d expect in an editor such as syntax highlighting, a tabbed interface and the ability to integrate external tools. Most importantly it&#8217;s highly extensible with the ability to <a href=\"http://live.gnome.org/Gedit/Plugins\">create plug-ins</a> for it written in Python or C.</p> \n\n<p>One great plug-in that&#8217;s been written is <a href=\"http://code.google.com/p/gedit-ftp-browser/\">gedit-ftp-browser</a>, an FTP client that embeds itself into the editor giving you the ability to remotely edit files over FTP. I&#8217;ve just been accepted as a contributor to the project which I&#8217;m really excited about. <a href=\"http://code.google.com/p/gedit-ftp-browser/source/diff?spec=svn5&amp;r=5&amp;format=side&amp;path=/trunk/FTP.py\">I&#8217;ve implemented a &#8220;Save As&#8221; feature</a> allowing the user to create and upload new files over FTP. Next up I&#8217;ll be working on the ability to manage multiple FTP servers via profiles.</p>", 
            "publish_date": "2009-11-03 11:30:00", 
            "user": 1, 
            "keywords": [
                [
                    "gedit"
                ], 
                [
                    "gnome"
                ], 
                [
                    "linux"
                ], 
                [
                    "python"
                ]
            ], 
            "slug": "ftp-browser-for-gedit"
        }
    }, 
    {
        "pk": 9, 
        "model": "blog.blogpost", 
        "fields": {
            "status": 2, 
            "description": "<p>Lately I&#8217;ve noticed people posting various different takes on making the default Django settings a lot more dynamic. The development and deployment requirements for the projects I work on tend to be far from straight-forward and over time I&#8217;ve come up with my own approach to Django settings, so here it is.</p>", 
            "_keywords": "django python", 
            "title": "Dynamic Django Deployment", 
            "short_url": null, 
            "content": "<p>Lately I&#8217;ve noticed people posting various different takes on making the default Django settings a lot more dynamic. The development and deployment requirements for the projects I work on tend to be far from straight-forward and over time I&#8217;ve come up with my own approach to Django settings, so here it is.</p>\n\n<p>The simplest approach typically involves importing all the names from a custom settings module at the end of the project&#8217;s standard settings module, providing the ability to override settings on a per machine basis.</p>\n\n<pre style=\"color:#d1d1d1;background:#000000;\"><span style=\"color:#e66170; font-weight:bold; \">try</span><span style=\"color:#d2cd86; \">:</span>\n    <span style=\"color:#e66170; font-weight:bold; \">from</span> local_settings <span style=\"color:#e66170; font-weight:bold; \">import</span> <span style=\"color:#d2cd86; \">*</span>\n<span style=\"color:#e66170; font-weight:bold; \">except</span> <span style=\"color:#e34adc; \">ImportError</span><span style=\"color:#d2cd86; \">:</span>\n    <span style=\"color:#e66170; font-weight:bold; \">pass</span>\n</pre>\n\n<p>This still requires modifying <code>local_settings.py</code> on a per machine basis. Another approach that builds on this is to import a custom settings module from a <code>host_settings</code> package that has a unique name derived from the current machine the site is running on - this gives the advantage of being able to specify custom settings per machine and have each of these settings modules reside in the version control system, without the same file having to be modified on a per machine basis.</p>\n\n<pre style=\"color:#d1d1d1;background:#000000;\"><span style=\"color:#e66170; font-weight:bold; \">from</span> socket <span style=\"color:#e66170; font-weight:bold; \">import</span> gethostname\n<span style=\"color:#e66170; font-weight:bold; \">try</span><span style=\"color:#d2cd86; \">:</span>\n    <span style=\"color:#e66170; font-weight:bold; \">exec</span> <span style=\"color:#d2cd86; \">(</span><span style=\"color:#00c4c4; \">\"from host_settings.%s import *\"</span> <span style=\"color:#d2cd86; \">%</span> \n        gethostname<span style=\"color:#d2cd86; \">(</span><span style=\"color:#d2cd86; \">)</span><span style=\"color:#d2cd86; \">.</span>replace<span style=\"color:#d2cd86; \">(</span><span style=\"color:#00c4c4; \">\"-\"</span><span style=\"color:#d2cd86; \">,</span> <span style=\"color:#00c4c4; \">\"_\"</span><span style=\"color:#d2cd86; \">)</span><span style=\"color:#d2cd86; \">.</span>replace<span style=\"color:#d2cd86; \">(</span><span style=\"color:#00c4c4; \">\".\"</span><span style=\"color:#d2cd86; \">,</span> <span style=\"color:#00c4c4; \">\"_\"</span><span style=\"color:#d2cd86; \">)</span><span style=\"color:#d2cd86; \">)</span>\n<span style=\"color:#e66170; font-weight:bold; \">except</span> <span style=\"color:#e34adc; \">ImportError</span><span style=\"color:#d2cd86; \">:</span>\n    <span style=\"color:#e66170; font-weight:bold; \">pass</span>\n</pre>\n\n<p>This simple version of the <code>host_settings</code> approach I&#8217;ve seen attempts to deal with the differences between a valid hostname and a valid module name with the two calls to replace, but ignores the fact a hostname could begin with a number which would be an invalid module name. Other versions of this approach handle this correctly and involve calling the <code>__import__</code> built-in, iterating over and updating each name in the settings module individually, but once we look at some further requirements below and how to deal with them we&#8217;ll find this isn&#8217;t necessary.</p>\n\n<p>Let&#8217;s take a step back for a moment and talk about some of the requirements I mentioned before. Where I work a project can end up deployed in a dozen different locations - a handful of developer machines and various different servers managing the project life cycle. Due to a variety of non-technical reasons it&#8217;s often required that various versions of a project run side by side in the same location, so with a project called <code>project_x</code> we end up with <code>project_x_feature_a</code> and <code>project_x_feature_b</code> sitting in the same location - all of a sudden all of our references to <code>project_x</code> are broken. So we end up taking the approach in our code that the actual name of a project&#8217;s directory is a moving target and should never be referenced - we never import from <code>package_x</code> and anything in our settings module that would typically reference this we set dynamically.</p>\n\n<pre style=\"color:#d1d1d1;background:#000000;\"><span style=\"color:#e66170; font-weight:bold; \">import</span> os\nproject_path <span style=\"color:#d2cd86; \">=</span> os<span style=\"color:#d2cd86; \">.</span>path<span style=\"color:#d2cd86; \">.</span>dirname<span style=\"color:#d2cd86; \">(</span>os<span style=\"color:#d2cd86; \">.</span>path<span style=\"color:#d2cd86; \">.</span>abspath<span style=\"color:#d2cd86; \">(</span>__file__<span style=\"color:#d2cd86; \">)</span><span style=\"color:#d2cd86; \">)</span>\nproject_dir <span style=\"color:#d2cd86; \">=</span> project_path<span style=\"color:#d2cd86; \">.</span>split<span style=\"color:#d2cd86; \">(</span>os<span style=\"color:#d2cd86; \">.</span>sep<span style=\"color:#d2cd86; \">)</span><span style=\"color:#d2cd86; \">[</span><span style=\"color:#d2cd86; \">-</span><span style=\"color:#008c00; \">1</span><span style=\"color:#d2cd86; \">]</span>\nMEDIA_URL <span style=\"color:#d2cd86; \">=</span> <span style=\"color:#00c4c4; \">\"/site_media/\"</span>\nMEDIA_ROOT <span style=\"color:#d2cd86; \">=</span> os<span style=\"color:#d2cd86; \">.</span>path<span style=\"color:#d2cd86; \">.</span>join<span style=\"color:#d2cd86; \">(</span>project_path<span style=\"color:#d2cd86; \">,</span> MEDIA_URL<span style=\"color:#d2cd86; \">.</span>strip<span style=\"color:#d2cd86; \">(</span><span style=\"color:#00c4c4; \">\"/\"</span><span style=\"color:#d2cd86; \">)</span><span style=\"color:#d2cd86; \">)</span>\nTEMPLATE_DIRS <span style=\"color:#d2cd86; \">=</span> <span style=\"color:#d2cd86; \">(</span>os<span style=\"color:#d2cd86; \">.</span>path<span style=\"color:#d2cd86; \">.</span>join<span style=\"color:#d2cd86; \">(</span>project_path<span style=\"color:#d2cd86; \">,</span> <span style=\"color:#00c4c4; \">\"templates\"</span><span style=\"color:#d2cd86; \">)</span><span style=\"color:#d2cd86; \">,</span><span style=\"color:#d2cd86; \">)</span>\nADMIN_MEDIA_PREFIX <span style=\"color:#d2cd86; \">=</span> <span style=\"color:#00c4c4; \">\"/media/\"</span>\nROOT_URLCONF <span style=\"color:#d2cd86; \">=</span> <span style=\"color:#00c4c4; \">\"%s.urls\"</span> <span style=\"color:#d2cd86; \">%</span> project_dir\n</pre>\n\n<p>So that removes any hard-coded reference to the project&#8217;s directory name, however we sometimes have to go as far as having host specific settings that vary across these different project versions residing on the same machine, such as a different database for example. The ultimate goal here is to not have any files in the project&#8217;s version control repository that are manually edited for a specific instance of the project. So using the <code>host_settings</code> approach from earlier on, we continue on from the code above by using the <code>project_dir</code> variable when referencing the machine specific <code>host_settings</code> module so that each of the <code>host_settings</code> modules are named not only after the machine they exist for, but the project directory as well.</p>\n\n<pre style=\"color:#d1d1d1;background:#000000;\"><span style=\"color:#e66170; font-weight:bold; \">from</span> socket <span style=\"color:#e66170; font-weight:bold; \">import</span> gethostname\nhost_settings_module <span style=\"color:#d2cd86; \">=</span> <span style=\"color:#00c4c4; \">\"%s_%s\"</span> <span style=\"color:#d2cd86; \">%</span> <span style=\"color:#d2cd86; \">(</span>project_dir<span style=\"color:#d2cd86; \">,</span> \n    gethostname<span style=\"color:#d2cd86; \">(</span><span style=\"color:#d2cd86; \">)</span><span style=\"color:#d2cd86; \">.</span>replace<span style=\"color:#d2cd86; \">(</span><span style=\"color:#00c4c4; \">\"-\"</span><span style=\"color:#d2cd86; \">,</span> <span style=\"color:#00c4c4; \">\"_\"</span><span style=\"color:#d2cd86; \">)</span><span style=\"color:#d2cd86; \">.</span>replace<span style=\"color:#d2cd86; \">(</span><span style=\"color:#00c4c4; \">\".\"</span><span style=\"color:#d2cd86; \">,</span> <span style=\"color:#00c4c4; \">\"_\"</span><span style=\"color:#d2cd86; \">)</span><span style=\"color:#d2cd86; \">.</span>lower<span style=\"color:#d2cd86; \">(</span><span style=\"color:#d2cd86; \">)</span><span style=\"color:#d2cd86; \">)</span>\nhost_settings_path <span style=\"color:#d2cd86; \">=</span> os<span style=\"color:#d2cd86; \">.</span>path<span style=\"color:#d2cd86; \">.</span>join<span style=\"color:#d2cd86; \">(</span>project_path<span style=\"color:#d2cd86; \">,</span> <span style=\"color:#00c4c4; \">\"host_settings\"</span><span style=\"color:#d2cd86; \">,</span> \n    <span style=\"color:#00c4c4; \">\"%s.py\"</span> <span style=\"color:#d2cd86; \">%</span> host_settings_module<span style=\"color:#d2cd86; \">)</span>\n<span style=\"color:#e66170; font-weight:bold; \">if</span> <span style=\"color:#e66170; font-weight:bold; \">not</span> os<span style=\"color:#d2cd86; \">.</span>path<span style=\"color:#d2cd86; \">.</span>exists<span style=\"color:#d2cd86; \">(</span>host_settings_path<span style=\"color:#d2cd86; \">)</span><span style=\"color:#d2cd86; \">:</span>\n    <span style=\"color:#e66170; font-weight:bold; \">try</span><span style=\"color:#d2cd86; \">:</span>\n        f <span style=\"color:#d2cd86; \">=</span> <span style=\"color:#e34adc; \">open</span><span style=\"color:#d2cd86; \">(</span>host_settings_path<span style=\"color:#d2cd86; \">,</span> <span style=\"color:#00c4c4; \">\"w\"</span><span style=\"color:#d2cd86; \">)</span>\n        f<span style=\"color:#d2cd86; \">.</span>close<span style=\"color:#d2cd86; \">(</span><span style=\"color:#d2cd86; \">)</span>\n    <span style=\"color:#e66170; font-weight:bold; \">except</span> <span style=\"color:#e34adc; \">IOError</span><span style=\"color:#d2cd86; \">:</span>\n        <span style=\"color:#e66170; font-weight:bold; \">print</span> <span style=\"color:#00c4c4; \">\"couldn't create host_settings module: %s \"</span> <span style=\"color:#d2cd86; \">%</span> host_settings_path\n<span style=\"color:#e66170; font-weight:bold; \">try</span><span style=\"color:#d2cd86; \">:</span>\n    <span style=\"color:#e66170; font-weight:bold; \">exec</span> <span style=\"color:#00c4c4; \">\"from host_settings.%s import *\"</span> <span style=\"color:#d2cd86; \">%</span> host_settings_module\n<span style=\"color:#e66170; font-weight:bold; \">except</span> <span style=\"color:#e34adc; \">ImportError</span><span style=\"color:#d2cd86; \">:</span>\n    <span style=\"color:#e66170; font-weight:bold; \">pass</span>\nTEMPLATE_DEBUG <span style=\"color:#d2cd86; \">=</span> DEBUG\n</pre>\n\n<p>As an added bonus, we try to create the <code>host_settings</code> module if it&#8217;s missing and warn if we&#8217;re unable to create it.</p>", 
            "publish_date": "2009-10-20 16:39:00", 
            "user": 1, 
            "keywords": [
                [
                    "django"
                ], 
                [
                    "python"
                ]
            ], 
            "slug": "dynamic-django-deployment"
        }
    }, 
    {
        "pk": 10, 
        "model": "blog.blogpost", 
        "fields": {
            "status": 2, 
            "description": "<p>After living the last few years without a mobile phone it finally became a problem for me so recently I decided to get a new one. I only needed something simple for receiving calls, not making them so any kind of plan or contract was out of the question since I could spend a few bucks on pre-paid and theoretically not pay anything after that. I didn&#8217;t consider any of the latest smart-phones either like the HTC or iPhone (I wouldn&#8217;t buy a crippled device anyway) since they&#8217;re so ridiculously priced compared to lower end models that aren&#8217;t even a year old.</p>", 
            "_keywords": "nokia python symbian", 
            "title": "Nokia E63", 
            "short_url": null, 
            "content": "<p>After living the last few years without a mobile phone it finally became a problem for me so recently I decided to get a new one. I only needed something simple for receiving calls, not making them so any kind of plan or contract was out of the question since I could spend a few bucks on pre-paid and theoretically not pay anything after that. I didn&#8217;t consider any of the latest smart-phones either like the HTC or iPhone (I wouldn&#8217;t buy a crippled device anyway) since they&#8217;re so ridiculously priced compared to lower end models that aren&#8217;t even a year old.</p>\n<p>I ended up getting a <a href=\"http://www.nokia.com.au/find-products/all-phones/nokia-e63\">Nokia E63</a> that has a full qwerty keyboard and wireless LAN access which were the main selling points for me. It cost $299 when it was being sold for over $500 at other places around town so it felt like a smart purchase. Apart from those features I looked at, I really knew nothing about the phone and <a href=\"http://symbian.org/\">Symbian OS</a> which powers it and after taking a closer look at the software available for it I&#8217;ve been really surprised.</p>\n<p class=\"side-thumb\"><img alt=\"Google Apps for Symbian OS\" src=\"http://media.tumblr.com/tumblr_ksm6cyOpF11qa0qji.png\"/> Google Apps for Symbian OS <img alt=\"Putty for Symbian OS\" src=\"http://media.tumblr.com/tumblr_ksm6dyg1OZ1qa0qji.png\"/> Putty for Symbian OS <img alt=\"Python (PyS60) on Symbian OS\" src=\"http://media.tumblr.com/tumblr_ksm6eqDj7h1qa0qji.png\"/> Python (PyS60) on Symbian OS</p>\n<p>Google has created a <a href=\"http://www.google.com/mobile/products.html#p=default\">handful of Symbian apps</a> for things like gmail, reader, youtube and maps which all work great. The other day I found an app called <a href=\"http://www.fring.com\">fring</a> which is very similar to <a href=\"http://pidgin.im/\">Pidgin</a> in that it wraps up all the various IM clients into one, even including Skype with voice working! So it has essentially turned my phone into a Skype handset which is amazing. I&#8217;ve also found that there&#8217;s a version of <a href=\"http://s2putty.sourceforge.net/\">putty for Symbian</a> so I can actually SSH onto any of our Linux servers or desktops and access the shell from my phone!</p>\n<p>The most incredible thing I&#8217;ve found for Symbian however has been a project called <a href=\"https://garage.maemo.org/projects/pys60/\">PyS60</a> - Nokia has actually ported the Python run-time to the Symbian OS. I was amazed once I had this installed and was sitting there typing out Python code into an interactive console directly on my phone. The standard library is even included and it&#8217;s very interesting - certain pieces aren&#8217;t fully ported but it comes with a handful of modules specifically for PyS60 which handle things like locating wireless networks and working with the user interface. It even includes <a href=\"http://www.opengl.org/\">OpenGL</a> bindings which is unbelievable - that&#8217;s right, you can develop 3D games in Python for your phone.</p>\n<p>I&#8217;m well into developing my first app which is a small RPC server for the phone controlled by a <a href=\"http://wxwidgets.org/\">wxWidgets</a> client. The idea is to be able to traverse the phone&#8217;s file system and create, edit and execute Python apps on the phone from a remote machine. The SimpleXMLRPCServer module isn&#8217;t included with PyS60 and broke when I tried to copy it onto the phone and import it manually. I&#8217;ve since been able to patch it and get it working which I&#8217;ve <a href=\"https://garage.maemo.org/tracker/index.php?func=detail&amp;aid=4576&amp;group_id=854&amp;atid=3201\">submitted to Nokia</a>, hopefully they&#8217;ll include it in their next release.</p>", 
            "publish_date": "2009-09-26 02:48:00", 
            "user": 1, 
            "keywords": [
                [
                    "nokia"
                ], 
                [
                    "python"
                ], 
                [
                    "symbian"
                ]
            ], 
            "slug": "nokia-e63"
        }
    }, 
    {
        "pk": 11, 
        "model": "blog.blogpost", 
        "fields": {
            "status": 2, 
            "description": "<p>I think CHM files are great and my main Python reference is the CHM version of the main documentation. I\u2019ve used <a href=\"http://gnochm.sourceforge.net/\">GnoCHM</a> which is the default CHM viewer for Gnome for quite a while and it\u2019s really poor - slow as hell on startup and segfaults half the time you click a link. I finally gave up and looked for an alternative which I found in <a href=\"http://www.kchmviewer.net/\">KchmViewer</a> which appears to be the default CHM viewer for KDE. As usual the KDE counterpart of a given Gnome app is much easier on the eyes and in this case the problems I had are solved - lightning fast and stable.</p>", 
            "_keywords": "chm gnome kde linux", 
            "title": "CHM Files on Linux", 
            "short_url": null, 
            "content": "<p>I think CHM files are great and my main Python reference is the CHM version of the main documentation. I\u2019ve used <a href=\"http://gnochm.sourceforge.net/\">GnoCHM</a> which is the default CHM viewer for Gnome for quite a while and it\u2019s really poor - slow as hell on startup and segfaults half the time you click a link. I finally gave up and looked for an alternative which I found in <a href=\"http://www.kchmviewer.net/\">KchmViewer</a> which appears to be the default CHM viewer for KDE. As usual the KDE counterpart of a given Gnome app is much easier on the eyes and in this case the problems I had are solved - lightning fast and stable.</p>", 
            "publish_date": "2009-09-21 12:00:00", 
            "user": 1, 
            "keywords": [
                [
                    "chm"
                ], 
                [
                    "gnome"
                ], 
                [
                    "kde"
                ], 
                [
                    "linux"
                ]
            ], 
            "slug": "chm-files-on-linux"
        }
    }
]
